{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programaci\u00f3 web","text":"<p>Materiales para el curso sobre Programaci\u00f3 web del M\u00e0ster en Geoinformaci\u00f3 de la UAB</p> <p>Temario:</p> <ul> <li>Introducci\u00f3n al desarrollo Web<ul> <li>Ciclo petici\u00f3n/respuesta</li> <li>Front-End y Back-End</li> <li>\u00bfQu\u00e9 hacen HTML/CSS/JS?</li> </ul> </li> <li>HTML<ul> <li>Elementos</li> <li>Anatom\u00eda de un HTML</li> <li>Mi primera p\u00e1gina</li> </ul> </li> <li>CSS<ul> <li>Use de estilos en HTML</li> <li>Tipos de selectores</li> <li>Modelo de cajas</li> <li>Dise\u00f1o</li> </ul> </li> <li>JS<ul> <li>\u00bfQu\u00e9 podemos haer con JavaScript en el navegador?</li> <li>Variables</li> <li>Funciones</li> <li>Estructuras de control</li> <li>Objetos</li> <li>API del DOM</li> <li>Programaci\u00f3n as\u00edncrona</li> <li>JavaScript en el servidor</li> </ul> </li> </ul>"},{"location":"#httpsgss-mtiggithubioweb-mgeo","title":"https://gss-mtig.github.io/web-mgeo/","text":""},{"location":"#autores","title":"Autores","text":"<ul> <li>Wladimir Szczerban (alias Bolo) @bolosig, geostarter (ICGC)</li> </ul> <p>Condiciones de reutilizaci\u00f3n de estos apuntes</p> <p>Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional</p> <p>Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial.</p> <p>Bajo las condiciones siguientes:</p> <ul> <li> <p>Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace.</p> </li> <li> <p>CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original.</p> </li> <li> <p>No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.</p> </li> </ul> <p>Muchos de los contenidos son obtenidos y/o adaptados de los contenidos de https://developer.mozilla.org/es/docs/Learn que se distribuyen bajo licenca Mozilla Contributors is licensed under CC-BY-SA 2.5.</p>"},{"location":"css/","title":"CSS - Cascading Style Sheets - Hojas de Estilo en Cascada","text":"<p>Hojas de Estilo en Cascada (del ingl\u00e9s Cascading Style Sheets) o CSS es el lenguaje de estilos utilizado para describir la presentaci\u00f3n de documentos HTML. CSS describe como debe ser renderizado el elemento estructurado en la pantalla, en papel, en el habla o en otros medios. CSS es uno de los lenguajes base de la Open Web y posee una especificaci\u00f3n estandarizada por parte del W3C. <sup>1</sup></p> <p>CSS es el segundo lenguaje m\u00e1s b\u00e1sico y esencial para crear p\u00e1ginas web. El primero ser\u00eda HTML, con el que se define el contenido de la p\u00e1gina. El segundo CSS, con el que se define la parte de la presentaci\u00f3n, es decir, c\u00f3mo deben mostrarse los elementos de la p\u00e1gina, su posici\u00f3n, forma, espaciados, colores y en resumen, toda la parte est\u00e9tica.</p> <p>CSS est\u00e1 formado por un conjunto de reglas que te permite aplicar estilos de manera selectiva a elementos en documentos HTML. Por ejemplo, para seleccionar todos los elementos de p\u00e1rrafo en una p\u00e1gina HTML y volver el texto dentro de ellos de color rojo.</p>"},{"location":"css/#uso-de-estilos-en-html","title":"Uso de estilos en HTML","text":"<p>En HTML existen tres m\u00e9todos para agregar informaci\u00f3n de estilo a un documento.</p>"},{"location":"css/#el-atributo-style","title":"El atributo style","text":"<p>El uso del atributo style es la forma m\u00e1s f\u00e1cil y directa de aplicar declaraciones de estilo a un elemento. Este atributo puede tener como contenido, cualquier n\u00famero de declaraciones de estilo, separadas unas de otras por un punto y coma (\";\"). Como style es un atributo global, puede ser usado en cualquier elemento de HTML.</p> <p>Ejemplo</p> <pre><code>&lt;p style=\"background-color: gray;\"&gt;Este texto tiene el estilo &lt;b style=\"color: white; text-decoration: underline;\"&gt;definido&lt;/b&gt; por atributo&lt;/p&gt;\n</code></pre> <p>Este texto tiene el estilo definido por atributo</p> <p>A pesar de toda su simplicidad e inmediatez, el uso de este m\u00e9todo rompe de alguna manera uno de los principales beneficios de CSS: la posibilidad de crear declaraciones de estilo que pueden ser reutilizadas en tantos elementos como sea posible, algo que se traduce en flexibilidad y portabilidad.</p>"},{"location":"css/#el-elemento-style","title":"El elemento style","text":"<p>El elemento <code>&lt;style&gt;</code> es un contenedor para declaraciones de estilo. Dentro de este elemento podemos arrojar cualquier n\u00famero de declaraciones de reglas de estilo. Este elemento s\u00f3lo puede ser declarado en la secci\u00f3n del encabezado (<code>&lt;head&gt;</code>) del documento.</p> <p>Ejemplo</p> <pre><code>&lt;head&gt;\n  &lt;title&gt;Hombre de negro&lt;/title&gt;\n  &lt;style&gt;\n    h1 {\n      background-color: gray;\n      margin: 0;\n    }\n\n    p {\n      background-color: black;\n      color: white;\n      margin: 0;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mi color favorito&lt;/h1&gt;\n  &lt;p&gt;\u00bfTe atrever\u00edas a adivinar cu\u00e1l es mi color favorito?&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Ahora, con este m\u00e9todo podemos compartir declaraciones entre los muchos elementos presentes en una misma p\u00e1gina. Pero, \u00bfes posible compartir declaraciones de estilo entre muchos documentos?</p>"},{"location":"css/#archivos-externos","title":"Archivos externos","text":"<p>La ventaja de utilizar un archivo externo para almacenar informaci\u00f3n de estilo reside en la posibilidad de compartir ese archivo entre un gran n\u00famero de documentos. Cuando un documento es cargado, el navegador detecta la referencia al archivo de hojas de estilo, cargando y aplicando los estilos como si fueran parte del documento.</p> <p>Un archivo externo de hojas de estilo puede ser insertando en el documento con el elemento <code>&lt;link&gt;</code>, teniendo el valor \"text/css\" en el atributo type, y el URI del archivo de hojas de estilo en el atributo href. Ten presente que, como style, este elemento solo puede estar ubicado en el bloque de encabezado (<code>&lt;head&gt;</code>) del documento.</p> <p>Ejemplo</p> <pre><code>&lt;head&gt;\n  &lt;title&gt;Hombre de negro&lt;/title&gt;\n  &lt;link type=\"text/css\" href=\"estilos.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mi color favorito&lt;/h1&gt;\n  &lt;p&gt;\u00bfTe atrever\u00edas a adivinar cu\u00e1l es mi color favorito?&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <ol> <li> <p>Crear una carpeta llamada css dentro de la carpeta web-mgeo</p> </li> <li> <p>Crear un archivo llamado estilos.css dentro de la carpeta css</p> </li> <li> <p>Modificar el index.html para agregar una hoja de estilo externa a nuestra calculadora</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar el archivo.</p> </li> </ol>"},{"location":"css/#anatomia-de-una-regla-css","title":"Anatom\u00eda de una regla CSS","text":"<ul> <li>Selector: es el elemento con el que comienza la regla y selecciona el(los) elemento(s) a dar estilo.</li> <li>Declaraci\u00f3n: es la unidad b\u00e1sica de CSS y consiste, b\u00e1sicamente, en la asignaci\u00f3n de un valor a una propiedad. CSS tiene un formato espec\u00edfico que debe seguir toda declaraci\u00f3n. \u00c9ste consiste en el nombre de la propiedad seguido de dos puntos (\":\") y el valor que le ser\u00e1 asignado. Cuando se provee m\u00e1s de una declaraci\u00f3n en el mismo bloque, cada declaraci\u00f3n debe ser separada de su pr\u00f3xima por un punto y coma (\";\"). Este es el motivo por el cual los autores normalmente usan un punto y coma al final de cada declaraci\u00f3n, independientemente de la presencia de declaraciones siguientes. <sup>2</sup></li> <li>Propiedades: es la propiedad quieres afectar en tu regla. Por ejemplo: color</li> <li>Valores de propiedades: es el valor que se le asigna a la propiedad. Por ejemplo: red</li> </ul> <p> Regla css</p> <p>Para modificar varios valores de propiedades a la vez, solo necesitas escribirlos separados por punto y coma (;).</p> <p>Ejemplo</p> <pre><code>p {\n  color: red;\n  width: 500px;\n  border: 1px solid black;\n}\n</code></pre> <p>Tambi\u00e9n puedes seleccionar varios elementos y aplicar una sola regla a todos ellos. Incluye varios selectores separados por comas (,). </p> <p>Ejemplo</p> <pre><code>p, li, h1 {\n  color: red;\n}\n</code></pre>"},{"location":"css/#tipos-de-selectores-simples","title":"Tipos de Selectores simples","text":""},{"location":"css/#selector-de-elemento-o-de-tipo","title":"Selector de elemento o de tipo","text":"<p>Se corresponde con todos los elementos en el documento que tienen el tipo especificado. Con este selector puedes aplicar declaraciones a, por ejemplo, todos los p\u00e1rrafos (elementos <code>&lt;p&gt;</code>), todos los \u00edtems de listas (elemento <code>&lt;li&gt;</code>) o todos los v\u00ednculos (elementos <code>&lt;a&gt;</code>) de un documento.</p> <p>\u00bfQu\u00e9 selecciona?. Todos los elementos HTML del tipo especificado.</p> <p>Ejemplo</p> <pre><code>div {\n  width: 500px;\n}\n</code></pre>"},{"location":"css/#selector-de-identificacion-id","title":"Selector de identificaci\u00f3n (ID)","text":"<p>Se corresponde con todos los elementos que tienen el valor especificado en su atributo id. Como, por definici\u00f3n, los valores de id deben ser \u00fanicos, este selector puede afectar s\u00f3lo a un elemento en el documento. En su declaraci\u00f3n, el ID especificado debe estar precedido por el signo numeral (#).</p> <p>\u00bfQu\u00e9 selecciona?. El elemento en la p\u00e1gina con el ID especificado.</p> <p>El siguiente ejemplo muestra un conjunto de declaraciones que est\u00e1n siendo aplicadas a un elemento que tiene el valor \"titulo\" en el atributo id.</p> <pre><code>#titulo {\n  font-size: 4em;\n  color: blue;\n  text-decoration: underline;\n}\n</code></pre> <p>Esta regla afectar\u00eda a un elemento como el siguiente.</p> <pre><code>&lt;h1 id=\"titulo\"&gt;T\u00edtulo con estilo&lt;/h1&gt;\n</code></pre>"},{"location":"css/#selector-de-clase","title":"Selector de clase","text":"<p>Una clase es un concepto introducido por CSS con el prop\u00f3sito de agrupar declaraciones y aplicarlas a un conjunto personalizado de elementos, independientemente de su tipo o naturaleza.</p> <p>Se corresponde con  todos los elementos que tienen el nombre de clase especificado en su atributo class. En su construcci\u00f3n, un punto (.) debe preceder al nombre de la clase.</p> <p>\u00bfQu\u00e9 selecciona?. Los elementos en la p\u00e1gina con la clase especificada (una clase puede aparecer varias veces en una p\u00e1gina).</p> <p>El siguiente ejemplo muestra un conjunto de declaraciones para la clase llamada \"importante\".</p> <pre><code>.importante {\n  font-size: 1.2em;\n  font-weight: bold;\n  color: red;\n}\n</code></pre> <p>Esta regla afectar\u00eda a los elementos como los siguientes.</p> <pre><code>&lt;h3 class=\"importante\"&gt;Cuidado&lt;/h3&gt;\n&lt;p class=\"importante\"&gt;No abra la escotilla durante viajes interestelares!&lt;/p&gt;\n&lt;div class=\"importante\"&gt;Georeferenciar los datos&lt;/div&gt;\n</code></pre>"},{"location":"css/#herencia","title":"Herencia","text":"<p>La herencia es un concepto por el cual los elementos descendientes heredan algunas de las propiedades declaradas para sus ancestros. Esto no es otra cosa m\u00e1s que el comportamiento esperado, y evita tener que redefinir las mismas propiedades en los hijos de un elemento.</p> <p>El siguiente ejemplo afectar\u00eda a todos los elementos del documento.</p> <pre><code>body {\n  color: red;\n  font-style: italic;\n}\n</code></pre> <p>Como ya comentamos esta regla afectar\u00eda a todos los elementos que estan dentro del body. En este ejemplo afectar\u00eda a los elemento <code>&lt;h1&gt;</code> y <code>&lt;p&gt;</code></p> <pre><code>&lt;body&gt;\n  &lt;h1&gt;Tormenta en el mar rojo&lt;/h1&gt;\n  &lt;p&gt;Este viento est\u00e1 torciendo mi texto...&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Algunas propiedades no se heredan. Por ejemplo, si para un elemento se establece un ancho width del 50%, sus descendientes no tendr\u00e1n un 50% de ancho con respecto al de sus padres.</p>"},{"location":"css/#orden-de-aplicacion-de-las-reglas","title":"Orden de aplicaci\u00f3n de las reglas","text":"<p>Los estilos de diferentes or\u00edgenes y selectores son aplicados en un orden espec\u00edfico y un\u00edvoco. Este orden ayuda a resolver conflictos y hace al sistema m\u00e1s predecible, lo que permite a los autores planear su esquema de estilos con certeza. Es posible que la regla que se aplica finalmente a tu elemento no sea la que esperas (debido a que algunas reglas entran en conflicto), por lo que debes comprender c\u00f3mo funcionan estos mecanismos.</p> <p>Los conceptos de cascada, y el de especificidad son mecanismos que controlan qu\u00e9 regla se aplica cuando aparecen tales conflictos.</p>"},{"location":"css/#cascada","title":"Cascada","text":"<p>En un primer nivel de simplicidad, la cascada en las hojas de estilo significa que el orden de las reglas importa en CSS: cuando dos reglas tienen la misma especificidad, se aplica la que aparece en \u00faltimo lugar en el CSS.</p> <p>En el ejemplo siguiente tenemos dos reglas que pueden aplicarse al <code>&lt;h1&gt;</code>. El <code>&lt;h1&gt;</code> acaba siendo de color azul porque estas normas tienen un selector id\u00e9ntico y, por lo tanto, tienen la misma especificidad. Por esta raz\u00f3n, se aplica la \u00faltima que aparece.</p> <pre><code>h1 { \n    color: red; \n}\nh1 { \n    color: blue; \n}\n</code></pre>"},{"location":"css/#especificidad","title":"Especificidad","text":"<p>La especificidad es el modo que tiene el navegador de decidir qu\u00e9 regla se aplica si diversas reglas tienen selectores diferentes pero podr\u00edan aplicarse a un mismo elemento. B\u00e1sicamente, la especificidad mide cu\u00e1n espec\u00edfica es la selecci\u00f3n de un selector.</p> <p>La siguiente lista muestra el orden de especificidad que se aplica en CSS. Cada forma de aplicar estilos en esta lista prevalecer\u00e1 cuando compita con aquellos debajo de s\u00ed.</p> <ol> <li>El atributo style</li> <li>El selector de ID</li> <li>El selector de clase</li> <li>El selector de tipo</li> <li>El selector universal</li> </ol> <p>Esta lista no dice nada acerca de los selectores avanzados, donde las combinaciones llevan al orden lejos de la simplicidad. Sin embargo, existe un sistema para trabajar con eso tambi\u00e9n.</p> <p>Por ejemplo tenemos este conjunto de reglas</p> <pre><code>p {\n  color: gray;\n}\n\n#titulo {\n  color: red;\n}\n\n.blue {\n  color: blue;\n}\n\nh1 {\n  color: green;\n}\n\n#titulo {\n  color: cyan;\n}\n</code></pre> <p>Y tenemos este html</p> <pre><code>&lt;h1 id=\"titulo\" class=\"blue\"&gt;Por qu\u00e9 amo las m\u00e1quinas de arcade&lt;/h1&gt;\n&lt;p style=\"color: blue\"&gt;Todav\u00eda puedo oler la ficha de metal en mi mano cuando cierro los ojos...&lt;/p&gt;\n</code></pre> <p>Siguiendo el orden de aplicaci\u00f3n de la lista veremos el <code>&lt;h1&gt;</code> con el texto en color cyan y el <code>&lt;p&gt;</code> en color azul</p>"},{"location":"css/#propiedad-important","title":"Propiedad !important","text":"<p>Hay una pieza especial de CSS que se puede utilizar para anular todos los c\u00e1lculos anteriores, sin embargo se debe tener mucho cuidado con su uso: !important. Se utiliza para convertir una propiedad y un valor particular en el elemento m\u00e1s espec\u00edfico, de modo que se invalidan las reglas normales de la cascada.</p>"},{"location":"css/#valores-y-unidades","title":"Valores y unidades","text":""},{"location":"css/#color","title":"Color","text":"<p>En CSS hay muchas formas de especificar el color. En todas partes en CSS se pueden usar los mismos valores de color, tanto para especificar el color del texto como el color de fondo, o de cualquier otra cosa.</p> <p>El sistema de colores est\u00e1ndar disponible en los ordenadores modernos es de 24 bits, lo que permite visualizar aproximadamente 16,7 millones de colores distintos a partir de una combinaci\u00f3n de diferentes canales de rojo, verde y azul con 256 valores diferentes por canal (256 x 256 x 256 = 16.777.216). Echemos un vistazo a algunas de las formas en que podemos especificar colores en CSS.</p>"},{"location":"css/#palabres-claves-para-los-colores","title":"Palabres claves para los colores","text":"<p>Las palabras clave para los colores, son una forma simple y comprensible de especificar colores. Son identificadores en los que no hay distinci\u00f3n entre may\u00fasculas y min\u00fasculas y que sirven para representar un color concreto, por ejemplo red, blue, brown, lightseagreen. El nombre describe el color aunque es mayormente artificial ya que el color final puede variar ligeramente dependiendo de diversos factores.</p> <p>Ninguna palabra clave de color tiene transparencia en CSS, son colores planos y s\u00f3lidos.</p>"},{"location":"css/#rgb","title":"RGB","text":"<p>Los colores puede ser definidos usando el modelo RGB (rojo-verde-azul) de dos maneras</p>"},{"location":"css/#notacion-hexadecimal-rrggbb-y-rgb","title":"Notaci\u00f3n Hexadecimal #RRGGBB y #RGB","text":"<p>Se representa mediante un \"#\", seguido de treo o seis caracteres hexadecimales (0-9, A-F).</p> <p>La notaci\u00f3n de tres d\u00edgitos (#RGB) y la de seis (#RRGGBB) son iguales. Por ejemplo, #f03 y #ff0033 representan el mismo color.</p>"},{"location":"css/#notacion-funcional-rgbrgb-y-rgbargba","title":"Notaci\u00f3n funcional rgb(R,G,B) y rgba(R,G,B,A)","text":"<p>Se representa mediante \"rgb\", seguido por tres valores enteros o tres valores porcentuales. El n\u00famero entero 255 representa el 100%, y F o FF en notaci\u00f3n hexadecimal.</p> <p>Podemos definir los colores con el modelo Rojo (red) - Verde (green) - Azul (blue) - alpha (RGBa) usando la notaci\u00f3n funcional rgba(). RGBa amplia el modelo RGB a\u00f1adiendo un canal alfa, permitiendo de esta manera especificar la opacidad de un color. La a representa opacidad: 0=transparente; 1=opaco; Los valores de opacidad son valores entre 0 y 1. Por ejemplo rgba(255,0,0,0.4)</p>"},{"location":"css/#hsl","title":"HSL","text":"<p>Los colores tambi\u00e9n puede ser definidos usando el modelo tono (hue) - saturaci\u00f3n (saturation) - brillo (lightness) (HSL) con la notaci\u00f3n funcional hsl(). La ventaja del modelo HSL sobre el modelo RGB es que es mucho m\u00e1s intuitivo: puedes adivinar los colores que t\u00fa quieres y luego modificarlos. Es tambi\u00e9n m\u00e1s f\u00e1cil crear conjuntos de colores (manteniendo el tono (hue)  igual y modificando el brillo y la saturaci\u00f3n.</p> <p>Esta notaci\u00f3n tambi\u00e9n se le puede definir opacidad usando la notaci\u00f3n funcional hsla(). HSLa ampl\u00eda el modelo HSL incluyendo el canal alfa, permitiendo de esta manera especificar la opacidad de un color. La a representa opacidad: 0=transparente; 1=opaco; Los valores de opacidad son valores entre 0 y 1. Por ejemplo hsla(240,100%,50%, 0.7)</p>"},{"location":"css/#numeros-longitudes-y-porcentajes","title":"N\u00fameros, longitudes y porcentajes","text":"<p>Al utilizar CSS te puedes encontrar con varios tipos de datos num\u00e9ricos. Todos los siguientes est\u00e1n clasificados como tipos de datos num\u00e9ricos:</p> <ul> <li>N\u00fameros enteros, por ejemplo 102 o -50</li> <li>N\u00fameros decimales, por ejemplo 0.2 o -2.5</li> <li>Una dimensi\u00f3n es un n\u00famero con una unidad asociada, por ejemplo 45deg (grados), 5s (segundos) o 10px (p\u00edxeles)</li> <li>Un porcentaje representa una fracci\u00f3n de alg\u00fan otro valor, por ejemplo, 50%. Los valores de porcentaje siempre son relativos a otra cantidad, por ejemplo, la longitud de un elemento es relativa a la longitud de su elemento padre.</li> </ul>"},{"location":"css/#longitudes","title":"Longitudes","text":"<p>El tipo num\u00e9rico con el que te vas a encontrar con mayor frecuencia es , por ejemplo, 10px (p\u00edxeles) o 30em. En CSS se utilizan dos longitudes diferentes: relativa y absoluta. Es importante conocer la diferencia para entender qu\u00e9 dimensiones van a tener las cosas."},{"location":"css/#unidades-de-longitud-absoluta","title":"Unidades de longitud absoluta","text":"<p>Todas las unidades siguientes son unidades de longitud absoluta: no son relativas a nada m\u00e1s y en general se considera que siempre tienen el mismo tama\u00f1o.</p> <p>En la siguiente lista se muestran algunas de las unidades m\u00e1s frecuentes</p> <ul> <li>cm: Cent\u00edmetros = 1cm = 96px/2,54</li> <li>mm: Mil\u00edmetros</li> <li>in: Pulgadas = 1in = 2,54cm = 96px</li> <li>pt: Puntos = 1pt = 1/72 de 1in</li> <li>px: P\u00edxeles = 1px = 1/96 de 1in</li> </ul> <p>Por ejemplo, normalmente no usamos cm (cent\u00edmetros) en pantalla. El valor que usar\u00e1s de forma m\u00e1s frecuente es px (p\u00edxeles) o pt (puntos) para las fuentes.</p>"},{"location":"css/#unidades-de-longitud-relativa","title":"Unidades de longitud relativa","text":"<p>Las unidades de longitud relativa son relativas a algo m\u00e1s, por ejemplo, al tama\u00f1o de letra del elemento principal o al tama\u00f1o de la ventana gr\u00e1fica. La ventaja de usar unidades relativas es que con una planificaci\u00f3n cuidadosa puedes lograr que el tama\u00f1o del texto u otros elementos escalen en relaci\u00f3n con todo lo dem\u00e1s en la p\u00e1gina.</p> <p>En la siguiente lista se muestran algunas de las unidades m\u00e1s \u00fatiles para el desarrollo web.</p> <ul> <li>em: Tama\u00f1o de letra del elemento padre, en el caso de propiedades tipogr\u00e1ficas como font-size, y tama\u00f1o de la fuente del propio elemento en el caso de otras propiedades, como width</li> <li>rem: Tama\u00f1o de la letra del elemento ra\u00edz.</li> <li>vw: % del ancho de la ventana gr\u00e1fica.</li> <li>vh: % de la altura de la ventana gr\u00e1fica.</li> </ul>"},{"location":"css/#funciones","title":"Funciones","text":"<p>Existe el grupo de valores conocidos como funciones. Ya hemos visto funciones en acci\u00f3n en la secci\u00f3n sobre los colores: rgb(), hsl(), etc.</p> <p>Un valor que se comporta m\u00e1s como algo que puedes encontrar en un lenguaje de programaci\u00f3n tradicional es la funci\u00f3n calc(). Esta funci\u00f3n te proporciona la capacidad de hacer c\u00e1lculos simples en tu CSS. Es particularmente \u00fatil si deseas calcular valores que no puedes definir al escribir el CSS para tu proyecto y necesitas que el navegador lo haga durante la ejecuci\u00f3n.</p> <p>Por ejemplo, a continuaci\u00f3n usamos calc() para hacer que la caja tenga 20% + 100px de ancho. El 20% se calcula a partir del ancho del contenedor principal .wrapper y, por lo tanto, cambiar\u00e1 si ese ancho cambia. No podemos hacer este c\u00e1lculo de antemano porque no sabemos cu\u00e1l ser\u00e1 el 20% del elemento padre, por lo que usamos calc() para decirle al navegador que lo haga por nosotros.</p> <p><pre><code>.wrapper {\n  width: 400px;\n}\n\n.box {\n  width: calc(20% + 100px);\n}\n</code></pre> <pre><code>&lt;div class=\"wrapper\"&gt;\n  &lt;div class=\"box\"&gt;Mi ancho es calculado.&lt;/div&gt; \n&lt;/div&gt;\n</code></pre></p>"},{"location":"css/#variables","title":"Variables","text":"<p>En CSS, las propiedades personalizadas tambi\u00e9n conocidas como variables son entidades definidas por autores de CSS que contienen valores espec\u00edficos que se pueden volver a utilizar en un documento. Se establecen mediante la notaci\u00f3n de propiedades personalizadas (por ejemplo, --main-color: black;) y se acceden mediante la funci\u00f3n var() (por ejemplo, color: var (--main-color);).</p> <p>Sitios web complejos tienen cantidades muy grandes de CSS, a menudo con una gran cantidad de valores repetidos. Por ejemplo, el mismo color se puede utilizar en cientos de lugares diferentes, lo cual requiere buscar y reemplazar globalmente si necesitamos cambiar ese color. Las variables CSS permiten que un valor se almacene en un lugar y luego se haga referencia en varios otros lugares. Un beneficio adicional son los identificadores sem\u00e1nticos. Por ejemplo --main-text-color es m\u00e1s f\u00e1cil de entender que #00ff00, especialmente si este mismo color tambi\u00e9n se utiliza en otro contexto.</p> <p>Las variables CSS est\u00e1n sujetas a la cascada, y heredan su valor de su padre.</p> <p>Para declarar variables usamos un nombre que comienze con dos guiones (--), y un valor que puede ser cualquier valor v\u00e1lido de CSS. Como cualquier otra propiedad, la escribimos dentro de un set de reglas de estilo, algo as\u00ed:</p> <pre><code>elemento {\n  --main-bg-color: brown;\n}\n</code></pre> <p>Ten en cuenta que el selector que usemos para las reglas de estilo define el \u00e1mbito (scope) en el que podremos usar la propiedad personalizada (variable). Una buena pr\u00e1ctica com\u00fan es declarar variables en la pseudo-clase :root, y as\u00ed aplicarlas globalmente al documento HTML</p> <pre><code>:root {\n  --main-bg-color: brown;\n}\n</code></pre> <p>La funci\u00f3n var() puede ser utilizada como valor en cualquier propiedad de un elemento. La funci\u00f3n var() no puede ser usada como nombre de una propiedad, selector o cualquier cosa que no sea un valor de propiedad.</p> <p>El primer par\u00e1metro que recibe la funci\u00f3n es el nombre de la variable que ser\u00e1 reemplazada. Se puede utilizar un segundo par\u00e1metro opcional como fallback de el primero. Si la variable referenciada por el primer par\u00e1metro no es v\u00e1lida, entonces la funci\u00f3n utiliza el valor del seg\u00fando par\u00e1metro.</p> <p>Ejemplo</p> <pre><code>:root {\n  --main-bg-color: pink;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n/* Fallback --header-color no est\u00e1 definido */\n.header {\n  color: var(--header-color, blue);\n}\n</code></pre>"},{"location":"css/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el archivo estilos.css para agregar las variables de los colores principales que usaremos en nuestra calculadora. Abrir el archivo con el editor de texto y escribir lo siguiente</p> <pre><code>:root {\n  --light-blue: #8ecae6ff;\n  --blue-green: #219ebcff;\n  --prussian-blue: #023047ff;\n  --honey-yellow: #ffb703ff;\n  --orange: #fb8500ff;\n}\n</code></pre> </li> <li> <p>Guardar el archivo</p> </li> </ol> <p>Paleta de colores sacada de https://coolors.co/palettes/trending</p>"},{"location":"css/#fuentes","title":"Fuentes","text":"<p>Las propiedades CSS que se usan para aplicar estilo al texto pueden clasificarse generalmente en dos categor\u00edas:</p> <ul> <li>Estilos del tipo de letra: Propiedades que afectan al texto (qu\u00e9 tipo de letra se usa, su tama\u00f1o, si es negrita, it\u00e1lica, etc.).</li> <li>Estilos de disposici\u00f3n del texto: Propiedades que afectan al espaciado y otras caracter\u00edsticas relativas a la disposici\u00f3n del texto, lo que permite la elecci\u00f3n de, por ejemplo, el espacio entre l\u00edneas y letras, y el modo como el texto se alinea dentro de la caja contenedora.</li> </ul>"},{"location":"css/#estilos-del-tipo-de-letra","title":"Estilos del tipo de letra","text":""},{"location":"css/#familia-de-tipos-de-letra","title":"Familia de tipos de letra","text":"<p>Usamos la propiedad font-family para definir un tipo de letra diferente para nuestro texto. Esta propiedad indica al navegador el tipo de letra (o una lista de tipos de letra) que debe aplicar a los elementos seleccionados. El navegador solo aplica el tipo de letra si la m\u00e1quina que accede al sitio web dispone de ella; en caso contrario, simplemente usa el tipo de letra que tiene definido por defecto.</p> <p>Ya que no puedes garantizar la disponibilidad de los tipos de letra que deseas utilizar (incluso un tipo de letra seguro para la web podr\u00eda fallar por alguna raz\u00f3n), puedes proporcionar un lista de tipos de letra para que el navegador tenga diversos tipos de letra entre los que elegir. Consiste simplemente en introducirlo como el valor de font-family, que consistir\u00e1 en una lista de diversos nombres de tipos de letra separados por comas.</p> <p>En tal caso, el navegador comienza al principio de la lista y busca si el primer tipo de letra est\u00e1 disponible en la m\u00e1quina. Si es as\u00ed, aplica ese tipo de letra a los elementos seleccionados, y si no, lo intenta con el nombre siguiente de la lista; y as\u00ed sucesivamente.</p> <p>Ejemplo</p> <pre><code>p {\n  font-family: \"Trebuchet MS\", Verdana, sans-serif;\n}\n</code></pre>"},{"location":"css/#tamano-de-la-letra","title":"Tama\u00f1o de la letra","text":"<p>En el apartado sobre Unidades y valores de CSS, vimos las unidades de longitud y tama\u00f1o. El tama\u00f1o del tipo de letra (establecido con la propiedad font-size) puede tomar valores medidos en la mayor\u00eda de estas unidades (y en otras, como porcentajes). Sin embargo, las unidades m\u00e1s comunes que vas a usar para ajustar el tama\u00f1o del texto son:</p> <ul> <li>Unidades px (p\u00edxeles): El n\u00famero de p\u00edxeles de altura que deseas que tenga el texto. Esta es una unidad absoluta, da como resultado el mismo valor calculado final para el tipo de letra en la p\u00e1gina en casi cualquier situaci\u00f3n.</li> <li>Unidades em: 1em equivale al tama\u00f1o de tipo de letra que se haya establecido en el elemento padre del elemento activo al que aplicamos estilo (m\u00e1s espec\u00edficamente, el ancho de una letra M may\u00fascula contenida dentro del elemento padre).</li> <li>Unidades rem: Funcionan igual que las unidades em, excepto que 1rem equivale al tama\u00f1o del tipo de letra establecido en el elemento ra\u00edz del documento (es decir, en <code>&lt;html&gt;</code>), no en el elemento padre.</li> </ul> <p>Ejemplo <pre><code>html {\n  font-size: 10px;\n}\n\nh1 {\n  font-size: 2.6rem;\n}\n\np {\n  font-size: 1.4rem;\n  color: red;\n  font-family: Helvetica, Arial, sans-serif;\n}\n</code></pre></p>"},{"location":"css/#estilo-y-cuerpo-del-tipo-de-letra-efectos-y-decoracion-del-texto","title":"Estilo y cuerpo del tipo de letra, efectos y decoraci\u00f3n del texto","text":"<p>El CSS proporciona cuatro propiedades comunes para alterar el efecto visual / \u00e9nfasis del texto:</p> <ul> <li>font-style: Se usa para activar y desactivar el texto en cursiva</li> <li>font-weight: Establece el grueso o peso del texto. Ejemplo normal o bold</li> <li>text-transform: Te permite practicar algunas transformaciones sobre tu tipo de letra. Ejemplo uppercase, lowercase, capitalize, etc.</li> <li>text-decoration: Activa/desactiva decoraciones en los tipos de letra (usar\u00e1s esto principalmente para desactivar el subrayado por defecto de los enlaces al aplicarles estilo). Ejemplo none (desactiva cualquier decoraci\u00f3n de texto que presente), underline, etc.</li> </ul>"},{"location":"css/#estilos-de-disposicion-del-texto","title":"Estilos de disposici\u00f3n del texto","text":""},{"location":"css/#alineacion-del-texto","title":"Alineaci\u00f3n del texto","text":"<p>La propiedad text-align se usa para controlar la forma en que el texto se alinea dentro de la caja que lo contiene. Los valores disponibles para esta propiedad son los siguientes, y funcionan de la misma forma que en una aplicaci\u00f3n de procesamiento de texto:</p> <ul> <li>left: Alinea el texto por la izquierda.</li> <li>right: Alinea el texto por la derecha.</li> <li>center: Centra el texto.</li> <li>justify: Var\u00eda los espacios entre las palabras para que todas las l\u00edneas de texto tengan el mismo ancho. </li> </ul>"},{"location":"css/#interlineado","title":"Interlineado","text":"<p>La propiedad line-height establece la altura entre cada l\u00ednea de texto; esta propiedad admite la mayor\u00eda de las unidades y magnitudes, pero tambi\u00e9n puede tomar un valor sin unidades, que act\u00faa como un multiplicador y generalmente se considera la mejor opci\u00f3n porque se multiplica la propiedad font-size para obtener la altura de la l\u00ednea (line-height)</p>"},{"location":"css/#otras-propiedades-interesantes","title":"Otras propiedades interesantes","text":"<ul> <li>white-space: Define c\u00f3mo se usan los espacios en blanco y los saltos de l\u00ednea asociados dentro del elemento.</li> <li>word-break: Especifica si se deben dividir las palabras a final de l\u00ednea.</li> <li>word-wrap: Especifica si el navegador puede dividir palabras a final de l\u00ednea para evitar desbordamientos del contenido.</li> </ul>"},{"location":"css/#tipografias-web","title":"Tipograf\u00edas web","text":"<p>Las tipograf\u00edas web son una funci\u00f3n del CSS que te permite especificar los archivos de tipo de letra que se van a descargar junto con tu sitio web a medida que el usuario acceda a ellos, lo que significa que cualquier navegador que admita tipograf\u00edas web puede disponer de los tipos de letra que especificas.</p> <p>En primer lugar, tienes un bloque @font-face al comienzo del CSS, que especifica los archivos de los tipos de letra que quieres que se descarguen:</p> <pre><code>@font-face {\n  font-family: \"myFont\";\n  src: url(\"myFont.woff\");\n}\n</code></pre> <p>A continuaci\u00f3n, puedes usar el nombre de la familia de tipos de letra especificado en @font-face para aplicar tu tipo de letra personalizado a cualquier elemento que desees</p> <pre><code>html {\n  font-family: \"myFont\", \"Bitstream Vera Serif\", serif;\n}\n</code></pre> <p>Los navegadores admiten diferentes formatos de tipos de letra, por lo que necesitar\u00e1s m\u00e1s de un formato de tipos de letra para conseguir una compatibilidad decente entre navegadores. Por ejemplo, la mayor\u00eda de los navegadores modernos admiten WOFF/WOFF2 (Web Open Font Format, versiones 1 y 2), el formato m\u00e1s eficiente disponible.</p> <p>Generalmente las fuentes no son de uso gratuito. Debes pagar por ellas y/o respetar otras condiciones de licencia, como acreditar al creador del tipo de letra en el c\u00f3digo (o en tu sitio web)</p> <p>Puedes obtener fuentes en diversos sitios como por ejemplo: https://fonts.google.com/ o https://fontlibrary.org/</p>"},{"location":"css/#ejercicios-entregables_1","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el archivo index.html para agregar la fuente Roboto de google fonts.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n&lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Modificar el archivo estilos.css para aplicar la fuente a todo nuestro documento</p> <pre><code>:root {\n  --light-blue: #8ecae6ff;\n  --blue-green: #219ebcff;\n  --prussian-blue: #023047ff;\n  --honey-yellow: #ffb703ff;\n  --orange: #fb8500ff;\n}\n\nhtml {\n  font-family: \"Roboto\", sans-serif;\n}\n</code></pre> </li> <li> <p>Guardar el archivo y recargar la p\u00e1gina en nuestro navegador para observar el cambio de tipo de letra.</p> </li> <li> <p>Modificar el archivo estilos.css para aplicar algunos estilos a nuestros elementos</p> <pre><code>:root {\n  --light-blue: #8ecae6ff;\n  --blue-green: #219ebcff;\n  --prussian-blue: #023047ff;\n  --honey-yellow: #ffb703ff;\n  --orange: #fb8500ff;\n}\n\nhtml {\n  font-family: \"Roboto\", sans-serif;\n}\n\nheader {\n  background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n  color: var(--prussian-blue);\n}\n\nfooter {\n  color: var(--blue-green);\n}\n\n#origen, #destino {\n  color: var(--orange);\n}\n\naside &gt; ul &gt; li {\n  color: var(--honey-yellow);\n}\n</code></pre> </li> <li> <p>Guardar el archivo y recargar la p\u00e1gina en nuestro navegador para ver los cambios de colores en nuestra p\u00e1gina.</p> </li> <li> <p>Modificar el archivo index.html para agregar un class al bot\u00f3n</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n&lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button class=\"btn-tranformar\"&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Modificar el archivo estilos.css para aplicar estilo al bot\u00f3n</p> <pre><code>:root {\n  --light-blue: #8ecae6ff;\n  --blue-green: #219ebcff;\n  --prussian-blue: #023047ff;\n  --honey-yellow: #ffb703ff;\n  --orange: #fb8500ff;\n}\n\nhtml {\n  font-family: \"Roboto\", sans-serif;\n}\n\nheader {\n  background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n  color: var(--prussian-blue);\n}\n\nfooter {\n  color: var(--blue-green);\n}\n\n#origen, #destino {\n  color: var(--orange);\n}\n\naside &gt; ul &gt; li {\n  color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n  background-color: var(--orange);\n  color: var(--prussian-blue);\n} \n</code></pre> </li> <li> <p>Guardar el archivo y recargar la p\u00e1gina en nuestro navegador para ver el cambio de estilo en el bot\u00f3n.</p> </li> </ol>"},{"location":"css/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>DragonBall: (15 minutos)</p> <ol> <li> <p>Agrega un archivo de estilo <code>estilo.css</code> a tu pagina del personaje</p> </li> <li> <p>Agrega classes a tus elementos y darle estilo para que se tenga un aspecto similar a esto</p> <p></p> </li> </ol>"},{"location":"css/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Web/CSS \u21a9</p> </li> <li> <p>https://www.htmlquick.com/es/tutorials/css.html \u21a9</p> </li> </ol>"},{"location":"css_avanzado/","title":"CSS Avanzado","text":""},{"location":"css_avanzado/#tipos-de-selectores-avanzados","title":"Tipos de Selectores avanzados","text":"<p>Guia visual de selectores: CSS Selectors: A Visual Guide</p>"},{"location":"css_avanzado/#selector-de-atributo","title":"Selector de atributo","text":"<p>Este grupo de selectores te proporciona diferentes formas de seleccionar elementos seg\u00fan la presencia de un atributo determinado en un elemento. O incluso hacer una selecci\u00f3n basada en la presencia de un atributo que tiene un valor particular asignado.</p> <p>Ejemplo para seleccionar todo los elementos <code>&lt;a&gt;</code> que tiene el atributo target</p> <pre><code>a[target] {\n  background-color: yellow;\n}\n</code></pre> <p>Ejemplo para seleccionar todo los elementos <code>&lt;a&gt;</code> que tiene el atributo target igual a _blank</p> <pre><code>a[target=\"_blank\"] {\n  background-color: yellow;\n}\n</code></pre> <p>Para ver m\u00e1s ejemplos de selectores de atributo https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors o https://www.w3schools.com/css/css_attribute_selectors.asp</p>"},{"location":"css_avanzado/#selector-de-pseudoclase","title":"Selector de pseudoclase","text":"<p>Este grupo de selectores te proporciona diferentes formas de seleccionar elementos pero solo cuando est\u00e9 en el estado especificado, por ejemplo cuando el puntero est\u00e9 sobre \u00e9l.</p> <p>Por ejemplo la pseudoclase :hover selecciona un elemento solo cuando se le pasa el rat\u00f3n por encima.</p> <pre><code>a: hover {\n  background-color: red;\n}\n</code></pre> <p>Para ver el listado completo de pseudoclase https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes</p>"},{"location":"css_avanzado/#selector-de-pseudoelementos","title":"Selector de pseudoelementos","text":"<p>Este grupo de selectores te proporciona diferentes formas de seleccionar una parte determinada de un elemento en vez del elemento en s\u00ed. Por ejemplo, ::first-line siempre selecciona la primera l\u00ednea del texto que se encuentra dentro de un elemento (<code>&lt;p&gt;</code>, en el ejemplo siguiente), y act\u00faa como si un elemento <code>&lt;span&gt;</code> hubiera delimitado la primera l\u00ednea, seleccionado y aplicado estilo.</p> <pre><code>p::first-line {\n  color: #ff0000;\n}\n</code></pre> <p>Para ver el listado completo de pseudoelementos https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements</p>"},{"location":"css_avanzado/#combinadores","title":"Combinadores","text":"<p>Este grupo de selectores combina otros selectores con el fin de delimitar elementos de nuestros documentos. </p> <p>El ejemplo siguiente selecciona los p\u00e1rrafos <code>&lt;p&gt;</code> que son hijos directos del elemento <code>&lt;article&gt;</code> utilizando el operador de combinaci\u00f3n hijo (&gt;)</p> <pre><code>article &gt; p {\n  color: #ff0000;\n}\n</code></pre> <p>Exiten 4 tipo de selectores de combinaci\u00f3n en CSS:</p> <ul> <li>Selectores descendientes (\u2423 espacio)</li> <li>Selectores de hijo (&gt;)</li> <li>Selectores de hermanos adyacentes (+)</li> <li>Selectores de hermanos generales (~)</li> </ul>"},{"location":"css_avanzado/#selectores-descendientes-espacio","title":"Selectores descendientes (espacio)","text":"<p>El \u2423 combinador (que se supone que representan un espacio, o mejor dicho uno o m\u00e1s espacios en blanco) combina dos selectores tales que el selector combinado incluye s\u00f3lo los elementos que coinciden con el segundo selector para los que hay un elemento ancestro que coincide con el primer selector. Los selectores descendientes son similares a selectores hijos , pero que no requieren que la relaci\u00f3n entre los elementos coincidentes ser estrictamente entre padres e hijos.</p> <p>El siguiente ejemplo selecciona todos lo elementos <code>&lt;p&gt;</code> que est\u00e9n dentro de un elemento <code>&lt;div&gt;</code></p> <pre><code>div p {\n  background-color: green;\n}\n</code></pre> <p>Esta regla afectar\u00eda a los elementos que aparecen marcados en amarillo.</p> <pre><code>&lt;div&gt;\n    &lt;p&gt;Afectado por el estilo&lt;p&gt;\n    &lt;a href=\"http://ejemplo.com\"&gt;\n        &lt;p&gt;Yo tambi\u00e9n estoy afectado&lt;/p&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n&lt;p&gt;Yo no estoy afectado&lt;/p&gt;\n&lt;a href=\"http://ejemplo.com\"&gt;\n    &lt;p&gt;Yo tampoco estoy afectado&lt;/p&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"css_avanzado/#selectores-de-hijo","title":"Selectores de hijo (&gt;)","text":"<p>El combinador &gt; separa a dos selectores y busca solo a los elementos que coindicen con el segundo selector y que son hijos directos del primero. Cuando se combinan dos selectores con el selector de descendiente, la expresi\u00f3n busca elementos que coinciden con el segundo selector y que tienen algun ancestro que coindice con el primero.</p> <p>El siguiente ejemplo selecciona todos lo elementos <code>&lt;p&gt;</code> que son hijos directos de un elemento <code>&lt;div&gt;</code></p> <pre><code>div &gt; p {\n  background-color: green;\n}\n</code></pre> <p>Esta regla afectar\u00eda a los elementos que aparecen marcados en amarillo.</p> <pre><code>&lt;div&gt;\n    &lt;p&gt;Afectado por el estilo&lt;p&gt;\n    &lt;a href=\"http://ejemplo.com\"&gt;\n        &lt;p&gt;Yo ya no estoy afectado&lt;/p&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n&lt;p&gt;Yo no estoy afectado&lt;/p&gt;\n&lt;a href=\"http://ejemplo.com\"&gt;\n    &lt;p&gt;Yo tampoco estoy afectado&lt;/p&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"css_avanzado/#selectores-de-hermanos-adyacentes","title":"Selectores de hermanos adyacentes (+)","text":"<p>El combinador + hace referencia a este selector como selector adyacente o selector del pr\u00f3ximo hermano. S\u00f3lo seleccionar\u00e1 un elemento especificado que est\u00e9 inmediatamente despu\u00e9s de otro elemento especificado. Tienes que estar en el mismo nivel esto quiere decir que tengan el mismo padre</p> <p>El siguiente ejemplo selecciona a todos los primeros elementos <code>&lt;p&gt;</code> que estan ubicados inmediatamente desp\u00faes de un elemento <code>&lt;div&gt;</code></p> <pre><code>div + p {\n  background-color: green;\n}\n</code></pre> <p>Esta regla afectar\u00eda a los elementos que aparecen marcados en amarillo.</p> <pre><code>&lt;p&gt;Yo no estoy afectado hermano&lt;/p&gt;\n&lt;div&gt;\n    &lt;p&gt;No Afectado por el estilo&lt;p&gt;\n    &lt;a href=\"http://ejemplo.com\"&gt;\n        &lt;p&gt;Yo ya no estoy afectado&lt;/p&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n&lt;p&gt;Yo estoy afectado hermano&lt;/p&gt;\n&lt;p&gt;Yo no estoy afectado&lt;/p&gt;\n&lt;a href=\"http://ejemplo.com\"&gt;\n    &lt;p&gt;Yo tampoco estoy afectado&lt;/p&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"css_avanzado/#selectores-de-hermanos-generales","title":"Selectores de hermanos generales (~)","text":"<p>El combinador ~ separa dos selectores y selecciona el segundo elemento s\u00f3lo si est\u00e1 precedido por el primero y ambos comparten un padre com\u00fan. Tienes que estar en el mismo nivel esto quiere decir que tengan el mismo padre</p> <p>El siguiente ejemplo selecciona a todos los elementos <code>&lt;p&gt;</code> que estan ubicados desp\u00faes de un elemento <code>&lt;div&gt;</code></p> <pre><code>div ~ p {\n  background-color: green;\n}\n</code></pre> <p>Esta regla afectar\u00eda a los elementos que aparecen marcados en amarillo.</p> <pre><code>&lt;p&gt;Yo no estoy afectado hermano&lt;/p&gt;\n&lt;div&gt;\n    &lt;p&gt;No Afectado por el estilo&lt;p&gt;\n    &lt;a href=\"http://ejemplo.com\"&gt;\n        &lt;p&gt;Yo ya no estoy afectado&lt;/p&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n&lt;p&gt;Yo estoy afectado hermano&lt;/p&gt;\n&lt;p&gt;Yo tambi\u00e9n estoy afectado&lt;/p&gt;\n&lt;a href=\"http://ejemplo.com\"&gt;\n    &lt;p&gt;Yo tampoco estoy afectado&lt;/p&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"css_bbox/","title":"CSS el modelo de caja","text":"<p>Todo en CSS tiene una caja alrededor, y comprender estas cajas es clave para poder crear dise\u00f1os con CSS o para alinear elementos con otros elementos. <sup>1</sup></p> <p>Como ya vimos en el apartado de Elementos de bloque vs elementos de l\u00ednea del html existen dos tipos de elementos esto es debido a los tipos de caja que se aplican por defecto a los elementos. Hay dos tipos de cajas: cajas en bloque y cajas en l\u00ednea. Estas caracter\u00edsticas se refieren al modo como se comporta la caja en t\u00e9rminos de flujo de p\u00e1gina y en relaci\u00f3n con otras cajas de la p\u00e1gina.</p> <p>El tipo de caja que se aplica a un elemento est\u00e1 definido por los valores de propiedad display, como por ejemplo block y inline</p> <p>Las cajas en CSS tienen un tipo de visualizaci\u00f3n externa, que define si se trata de una caja en bloque o en l\u00ednea. Sin embargo, las cajas tambi\u00e9n tienen un tipo de visualizaci\u00f3n interna, que determina c\u00f3mo se disponen los elementos dentro de esa caja. Por defecto los elementos dentro de una caja se presentan en flujo normal, lo que significa que se comportan como otros elementos de tipo en bloque o en l\u00ednea.</p> <p>Sin embargo, podemos cambiar el tipo de visualizaci\u00f3n interna utilizando valores de display, como flex o grid (que veremos m\u00e1s adelante). Por ejemplo si en un elemento establecemos display: flex;, el tipo de visualizaci\u00f3n externa es de tipo bloque (block), pero el tipo de visualizaci\u00f3n interna cambia a flexible (flex). Cualquier elemento que sea hijo directo de esta caja pasar\u00e1 a comportarse como un elemento de tipo flex, de acuerdo con las reglas que se establecen en la especificaci\u00f3n de Flexbox.</p> <p>Ejemplo</p> <pre><code>* {\n    border: 1px solid red;\n}\n\np, \nul {\n  border: 2px solid rebeccapurple;\n  padding: .5em;\n}\n\n.block,\nli {\n  border: 2px solid blue;\n  padding: .5em;\n}\n\nul {\n  display: flex;\n  list-style: none;\n}\n\n.block {\n  display: block;\n}  \n</code></pre> <pre><code>&lt;p&gt;Soy un p\u00e1rrafo.&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;Item One&lt;/li&gt;\n  &lt;li&gt;Item Two&lt;/li&gt;\n  &lt;li&gt;Item Three&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Otro p\u00e1rrafo. Algunas &lt;span class=\"block\"&gt;palabras&lt;/span&gt; est\u00e1n contenidas en &lt;span&gt;elementos de tipo span&lt;/span&gt; tanto en linea como en bloque.&lt;/p&gt;\n</code></pre> <p>Hay un valor especial de display: inline-block que proporciona un punto medio entre inline y block. Esto es \u00fatil para situaciones en las que no deseas que un elemento fuerce un salto de l\u00ednea, pero s\u00ed deseas que se respeten las propiedades width y height para evitar superposiciones. Esto puede ser \u00fatil cuando deseas dar a un enlace un \u00e1rea de impacto m\u00e1s grande a\u00f1adiendo padding. <code>&lt;a&gt;</code> es un elemento en l\u00ednea como <code>&lt;span&gt;</code>; puedes usar display: inline-block para configurar el \u00e1rea de relleno para facilitar al usuario hacer clic en el enlace.</p>"},{"location":"css_bbox/#partes-de-una-caja","title":"Partes de una caja","text":"<ul> <li>Contenido de la caja: (o content box): El \u00e1rea donde se muestra el contenido, cuyo tama\u00f1o puede cambiarse utilizando propiedades como width y height.</li> <li>Relleno de la caja: (o padding box): El relleno es espacio en blanco alrededor del contenido; es posible controlar su tama\u00f1o usando la propiedad padding y otras propiedades relacionadas.</li> <li>Borde de la caja: o border box): El borde de la caja envuelve el contenido y el de relleno. Es posible controlar su tama\u00f1o y estilo utilizando la propiedad border y otras propiedades relacionadas.</li> <li>Margen de la caja: (o margin box): El margen es la capa m\u00e1s externa. Envuelve el contenido, el relleno y el borde como espacio en blanco entre la caja y otros elementos. Es posible controlar su tama\u00f1o usando la propiedad margin y otras propiedades relacionadas.</li> </ul>"},{"location":"css_bbox/#el-modelo-de-cajas-estandar","title":"El modelo de cajas est\u00e1ndar","text":"<p>En el modelo de cajas est\u00e1ndar, cuando estableces los atributos width y height para una caja, defines el ancho y el alto del contenido de la caja. Cualquier \u00e1rea de relleno y borde se a\u00f1ade a ese ancho y alto para obtener el tama\u00f1o total que ocupa la caja.</p> <p>Ejemplo</p> <pre><code>.box {\n  width: 350px;\n  height: 150px;\n  margin: 10px;\n  padding: 25px;\n  border: 5px solid black;\n}\n</code></pre> <p>El espacio que ocupa nuestra caja usando el modelo de cajas est\u00e1ndar ser\u00e1 en realidad de 410 px (350 + 25 + 25 + 5 + 5); y su altura, de 210 px (150 + 25 + 25 + 5 + 5), porque el \u00e1rea de relleno y el borde se a\u00f1aden al ancho que se utiliza para el contenido de la caja.</p> <p></p>"},{"location":"css_bbox/#el-modelo-de-cajas-alternativo","title":"El modelo de cajas alternativo","text":"<p>Podr\u00edas pensar que es m\u00e1s bien inc\u00f3modo tener que sumar el borde y el \u00e1rea de relleno para obtener el tama\u00f1o real de la caja, \u00a1y tienes raz\u00f3n! Por este motivo, CSS introdujo un modelo de caja alternativo alg\u00fan tiempo despu\u00e9s del modelo de cajas est\u00e1ndar. Con este modelo, cualquier ancho es el ancho de la caja visible en la p\u00e1gina, por lo tanto, el ancho del \u00e1rea de contenido es ese ancho menos el ancho para el relleno y el borde. El mismo CSS que hemos usado antes dar\u00eda entonces el resultado siguiente (ancho = 350 px, altura = 150 px).</p> <p></p> <p>Por defecto, los navegadores usan el modelo de cajas est\u00e1ndar. Si deseas activar el modelo de cajas alternativo para un elemento, hazlo configurando box-sizing: border-box.</p> <p>Ejemplo</p> <pre><code>.box {\n  box-sizing: border-box;\n  width: 350px;\n  height: 150px;\n  margin: 10px;\n  padding: 25px;\n  border: 5px solid black;\n}\n</code></pre> <p>Si quieres que todos tus elementos usen el modelo de cajas alternativo (opci\u00f3n com\u00fan entre los desarrolladores) debes establecer la propiedad box-sizing en el elemento <code>&lt;html&gt;</code>. Luego debes configurar todos los dem\u00e1s elementos para que hereden ese valor, como se ve en el fragmento de c\u00f3digo siguiente.</p> <p>Ejemplo</p> <pre><code>html {\n  box-sizing: border-box;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n</code></pre>"},{"location":"css_bbox/#margenes-rellenos-y-bordes","title":"M\u00e1rgenes, rellenos y bordes","text":""},{"location":"css_bbox/#margen","title":"Margen","text":"<p>El margen es un espacio invisible que hay alrededor de la caja. Aleja el resto de elementos de la caja. Los m\u00e1rgenes pueden tener valores positivos o negativos. Establecer un margen negativo para un lado de tu caja puede hacer que se superponga con otros elementos de la p\u00e1gina. Tanto si utilizas el modelo de cajas est\u00e1ndar como el alternativo, el margen siempre se a\u00f1ade despu\u00e9s de haber calculado el tama\u00f1o de la caja que se ve.</p> <p>Podemos controlar todos los m\u00e1rgenes de un elemento a la vez usando la propiedad margin, o cada lado individualmente usando las propiedades equivalentes sin abreviar: margin-top, margin-right, margin-bottom y margin-left.</p> <p>Un punto clave a la hora de entender los m\u00e1rgenes es el concepto de colapso del margen. Si tienes dos elementos cuyos m\u00e1rgenes se tocan, esos m\u00e1rgenes se combinan para convertirse en un solo margen, cuyo tama\u00f1o es el del margen m\u00e1s grande.</p>"},{"location":"css_bbox/#bordes","title":"Bordes","text":"<p>El borde se dibuja entre el margen y el \u00e1rea de relleno de una caja. Si utilizas el modelo de cajas est\u00e1ndar, el tama\u00f1o del borde se a\u00f1ade a los elementos width y height que establecen el alto y el ancho de la caja. Si utilizas el modelo de cajas alternativo, el tama\u00f1o del borde reduce el tama\u00f1o de la caja de contenido, porque ocupa una parte del alto y el ancho disponibles.</p> <p>Al igual que el margen puedes establecer el ancho, el estilo o el color de los cuatro bordes a la vez utilizando la propiedad border o cada lado de forma individual.</p> <p>Para establecer el ancho, el estilo o el color de todos los lados, usa lo siguiente: border-width, border-style o border-color. Esta propiedades tambi\u00e9n se pueden aplicar de forma individual para cada lado. Ejemplos: border-top-width, border-right-style y border-bottom-color</p> <p>Se puede establecer el ancho, el estilo y el color de forma abreviada al borde combinandolos en una sola propiedad:</p> <p>Ejemplo</p> <pre><code>.container {\n  border-top: 5px dotted green;\n  border-right: 1px solid black;\n  border-bottom: 20px double rgb(23,45,145);\n}\n\n.box {\n  border: 1px solid #333333;\n}\n</code></pre> <p>El redondeo de esquinas en una caja se logra mediante el uso de la propiedad border-radius y otras propiedades asociadas que se relacionan con cada esquina de la caja. Como valor pueden usarse dos longitudes o porcentajes: el primer valor define el radio horizontal y el segundo el radio vertical. En muchos casos, solo se pondr\u00e1 un valor, que se utilizar\u00e1 para ambos.</p> <pre><code>.box { \n  border-radius: 10px; \n}\n</code></pre>"},{"location":"css_bbox/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el archivo estilos.css para agregar un borde al elemento aside</p> <pre><code>:root {\n    --light-blue: #8ecae6ff;\n    --blue-green: #219ebcff;\n    --prussian-blue: #023047ff;\n    --honey-yellow: #ffb703ff;\n    --orange: #fb8500ff;\n}\n\nhtml {\n    font-family: \"Roboto\", sans-serif;\n}\n\nheader {\n    background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n    color: var(--prussian-blue);\n}\n\nfooter {\n    color: var(--blue-green);\n}\n\n#origen, #destino {\n    color: var(--orange);\n}\n\naside {\n    border-left: 2px solid var(--prussian-blue);\n}\n\naside &gt; ul &gt; li {\n    color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n    background-color: var(--orange);\n    color: var(--prussian-blue);\n}\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver los cambios.</p> </li> </ol>"},{"location":"css_bbox/#relleno","title":"Relleno","text":"<p>El relleno se encuentra entre el borde y el \u00e1rea de contenido. A diferencia de los m\u00e1rgenes, el relleno no puede tomar valores negativos, por lo que el valor debe ser 0 o positivo. Cualquier fondo aplicado a tu elemento se mostrar\u00e1 detr\u00e1s del \u00e1rea de relleno y, generalmente, se usa para mantener el contenido alejado del borde.</p> <p>Podemos controlar el \u00e1rea de relleno para todos los lados de un mismo elemento usando la propiedad padding, o para cada lado uno de los lados usando las propiedades equivalentes.</p>"},{"location":"css_bbox/#desbordamiento","title":"Desbordamiento","text":"<p>Ya sabemos que todo en CSS est\u00e1 dentro de una caja, y que podemos restringir el tama\u00f1o de estas cajas asign\u00e1ndoles los valores width y height. El desbordamiento es lo que sucede cuando hay demasiado contenido en una caja, y no cabe c\u00f3modamente en ella.</p> <p>El CSS trata de evitar \u00abla p\u00e9rdida de datos\u00bb. Siempre que sea posible, el CSS no oculta su contenido; hacerlo provocar\u00eda la p\u00e9rdida de datos, que generalmente es un problema. As\u00ed que, en vez de esto, el CSS tiende a desbordarse de un modo que sea visible.</p> <p>La propiedad overflow es el modo como tomas el control del desbordamiento de un elemento y le dices al navegador c\u00f3mo desea que se comporte. El valor predeterminado para la propiedad overflow es visible, por lo que, de forma predeterminada vamos a poder ver cu\u00e1ndo se desborda nuestro contenido.</p> <p>Si deseas cortar el contenido (ocultar el desbordamiento) cuando se desborda, puedes establecer el valor overflow: hidden en tu caja. Si deseas que aparezcan barras de desplazamiento solo si hay m\u00e1s contenido del que cabe en la caja, utiliza overflow: auto.</p>"},{"location":"css_bbox/#fondos","title":"Fondos","text":"<p>La propiedad background de CSS es una propiedad abreviada de una serie de propiedades de fondo que vamos a ver a continuaci\u00f3n. Si descubres una propiedad de fondo compleja en una hoja de estilo, puede parecer un poco dif\u00edcil de entender porque pueden estarse pasando muchos valores a la vez.</p> <p>Ejemplo</p> <pre><code>.box { \n  background: linear-gradient(105deg, rgba(255,255,255,.2) 39%, rgba(51,56,57,1) 96%) center center / 400px 200px no-repeat, url(big-star.png) center no-repeat, rebeccapurple; \n} \n</code></pre> <p>Demos un vistazo a las diferentes cosas que puedes hacer con los fondos en CSS, a partir de observar las propiedades de fondo individuales.</p>"},{"location":"css_bbox/#colores-de-fondo","title":"Colores de fondo","text":"<p>La propiedad background-color define el color de fondo de cualquier elemento en CSS. La propiedad admite cualquier color v\u00e1lido. Un color de fondo se extiende por debajo del contenido y el relleno del elemento.</p> <p>Ejemplo</p> <pre><code>.box {\n  background-color: #567895;\n}\n\nh2 {\n  background-color: black;\n  color: white;\n}\nspan {\n  background-color: rgba(255,255,255,.5);\n}\n</code></pre> <pre><code>&lt;div class=\"box\"&gt;\n  &lt;h2&gt;Titulo con color de fondo&lt;/h2&gt;\n  &lt;p&gt;Cambiar el &lt;span&gt;color&lt;/span&gt; de fondo.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"css_bbox/#imagenes-de-fondo","title":"Im\u00e1genes de fondo","text":"<p>La propiedad background-image permite visualizar una imagen de fondo en un elemento. De forma predeterminada, si la imagen es mas grande que la caja que la contiene no se reduce para ajustarse a la caja, por lo que solo vemos una parte de esta, mientras que una imagen mas peque\u00f1a que la caja que la contiene aparece repetida en forma de mosaico hasta llenar la caja.</p> <pre><code>.box {\n  width: 200px;\n  height: 60px;\n} \n\n.a {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/balloons.jpg);\n}\n\n.b {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/star.png);\n}\n</code></pre> <pre><code>&lt;div class=\"wrapper\"&gt;\n  &lt;div class=\"box a\"&gt;&lt;/div&gt;\n  &lt;div class=\"box b\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"css_bbox/#controlar-el-comportamiento-de-la-imagen-de-fondo","title":"Controlar el comportamiento de la imagen de fondo","text":"<p>La propiedad background-repeat se usa para controlar el comportamiento de tipo mosaico de las im\u00e1genes. Los valores disponibles son:</p> <ul> <li>no-repeat: evita que el fondo se repita.</li> <li>repeat-x: repite horizontalmente.</li> <li>repeat-y: repite verticalmente.</li> <li>repeat: es el valor por defecto; repite en ambas direcciones.</li> </ul> <pre><code>.b {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/star.png);\n  background-repeat: no-repeat;\n}\n</code></pre>"},{"location":"css_bbox/#dimensionar-la-imagen-de-fondo","title":"Dimensionar la imagen de fondo","text":"<p>La propiedad background-size, que puede tomar valores de longitud o porcentaje, para ajustar el tama\u00f1o de la imagen para que quepa dentro del fondo.</p> <p>Tambi\u00e9n puedes utilizar palabras clave:</p> <ul> <li>cover: el navegador agrandar\u00e1 la imagen lo suficientemente grande como para que esta cubra por completo el \u00e1rea de la caja sin que pierda su relaci\u00f3n de aspecto. En este caso, es probable que parte de la imagen quede fuera de la caja.</li> <li>contain: el navegador adecuar\u00e1 el tama\u00f1o de la imagen para que quepa dentro de la caja. En este caso, pueden quedar huecos a ambos lados o en la parte superior e inferior de la imagen si la relaci\u00f3n de aspecto de la imagen es diferente de la de la caja.</li> </ul> <pre><code>.a {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/balloons.jpg);\n  background-size: cover;\n}\n</code></pre>"},{"location":"css_bbox/#posicionar-la-imagen-de-fondo","title":"Posicionar la imagen de fondo","text":"<p>La propiedad background-position te permite elegir la posici\u00f3n en la que aparece la imagen de fondo dentro de la caja a la que est\u00e1 asociada. Para ello se utiliza un sistema de coordenadas en el que la esquina superior izquierda de la caja es (0,0) valor por defecto, y la caja se coloca sobre los ejes horizontal (x) y vertical (y).</p> <p>Como valores puedes usar palabras clave como top y right y tambi\u00e9n longitudes y porcentajes o una combinaci\u00f3n de ambos</p> <pre><code>.b {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/star.png);\n  background-repeat: no-repeat;\n  background-position: center 20px;\n}\n</code></pre> <p>Por \u00faltimo, tambi\u00e9n puedes usar una sintaxis de 4 valores para indicar una distancia desde ciertos bordes del cuadro: la unidad de longitud en este caso es un desplazamiento del valor que la precede. Entonces, en el CSS siguiente, colocamos el fondo a 20 px desde la parte superior y a 10 px desde la derecha</p> <pre><code>.b {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/star.png);\n  background-repeat: no-repeat;\n  background-position: top 20px right 10px;\n}\n</code></pre>"},{"location":"css_bbox/#multiples-imagenes-de-fondo","title":"M\u00faltiples im\u00e1genes de fondo","text":"<p>Tambi\u00e9n es posible poner m\u00faltiples im\u00e1genes de fondo: puedes especificar m\u00faltiples valores background-image para un solo atributo, separados cada uno por una coma.</p> <p>Si haces esto, las im\u00e1genes de fondo pueden quedar superpuestas entre s\u00ed. Los fondos se superponen con la \u00faltima imagen de fondo que hay en la parte inferior de la lista, y cada imagen anterior se apila encima de la que sigue en el c\u00f3digo.</p> <p>Las otras propiedades background-* tambi\u00e9n pueden tener valores m\u00faltiples separados por comas, de la misma manera que background-image</p> <pre><code>background-image: url(image1.png), url(image2.png), url(image3.png), url(image1.png);\nbackground-repeat: no-repeat, repeat-x, repeat;\nbackground-position: 10px 20px,  top right;\n</code></pre> <p>Ejemplo </p> <pre><code>.b {\n  background-image: url(https://mdn.github.io/css-examples/learn/backgrounds-borders/star.png), url(https://mdn.github.io/css-examples/learn/backgrounds-borders/big-star.png);\n   background-repeat: no-repeat, repeat-x;\n  background-position: top 20px right 10px, center center;\n}\n</code></pre>"},{"location":"css_bbox/#degradados-de-fondo","title":"Degradados de fondo","text":"<p>Un degradado, cuando se usa para un fondo, act\u00faa como una imagen y tambi\u00e9n se establece usando la propiedad background-image.</p> <pre><code>.a {\n  background-image: linear-gradient(105deg, rgba(0,249,255,1) 39%, rgba(51,56,57,1) 96%);\n}\n\n.b {\n  background-image: radial-gradient(circle, rgba(0,249,255,1) 39%, rgba(51,56,57,1) 96%);\n  background-size: 100px 50px;\n}\n</code></pre>"},{"location":"css_bbox/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Learn/CSS/Building_blocks/El_modelo_de_caja \u21a9</p> </li> </ol>"},{"location":"css_diseno/","title":"Dise\u00f1o CSS","text":"<p>Hasta el momneto hemos visto los fundamentos b\u00e1sicos de CSS: c\u00f3mo dar estilo al texto, c\u00f3mo manipular las cajas que incluyen tu contenido, etc. Ahora vamos a explorar c\u00f3mo colocar tus cajas en el lugar que elijas con respecto a la ventana principal y el resto de cajas.</p> <p>En CSS existen diferentes t\u00e9cnicas b\u00e1sicas de maquetaci\u00f3n que veremos a continuaci\u00f3n</p>"},{"location":"css_diseno/#normal-flow","title":"Normal flow","text":"<p>Los elementos en las p\u00e1ginas web se presentan de acuerdo con el flujo normal, hasta que hacemos algo que cambie eso.</p> <p>En primer lugar, se toma de las cajas de cada uno de los elementos el contenido, luego se a\u00f1ade cualquier \u00e1rea de relleno, borde y margen alrededor de ellas; es el modelo de cajas que hemos visto antes.</p> <p>De manera predeterminada, el contenido de un elemento de nivel de bloque es el 100% del ancho de su elemento padre y su altura viene determinada por su contenido. Los elementos en l\u00ednea tienen su altura y anchura determinados por su contenido.</p>"},{"location":"css_diseno/#posicionamiento","title":"Posicionamiento","text":"<p>El posicionamiento permite sacar elementos del flujo normal del dise\u00f1o del documento, y hacer que se comporten de manera distinta, por ejemplo sentarse encima de otro o permanecer en el mismo lugar dentro de la ventana navegador. Veremos los diferentes valores position, y como usarlos.</p> <ul> <li>Posicionamiento normal o est\u00e1tico (position: static;): se trata del posicionamiento que utilizan los navegadores si no se indica lo contrario.</li> <li> <p>Posicionamiento relativo (position: relative;): variante del posicionamiento normal que consiste en posicionar una caja seg\u00fan el posicionamiento normal y despu\u00e9s desplazarla respecto de su posici\u00f3n original.</p> <p></p> </li> <li> <p>Posicionamiento absoluto (position: absolute;): la posici\u00f3n de una caja se establece de forma absoluta respecto de su elemento contenedor y el resto de elementos de la p\u00e1gina ignoran la nueva posici\u00f3n del elemento.</p> <p></p> </li> <li> <p>Posicionamiento fijo (position: fixed;): variante del posicionamiento absoluto que convierte una caja en un elemento inamovible, de forma que su posici\u00f3n en la pantalla siempre es la misma independientemente del resto de elementos e independientemente de si el usuario sube o baja la p\u00e1gina en la ventana del navegador.</p> </li> </ul> <p>La propiedad position s\u00f3lo indica c\u00f3mo se posiciona una caja, pero no la desplaza.</p> <p>Normalmente, cuando se posiciona una caja tambi\u00e9n es necesario desplazarla respecto de su posici\u00f3n original o respecto de otro origen de coordenadas. CSS define cuatro propiedades llamadas top, right, bottom y left para controlar el desplazamiento de las cajas posicionadas.</p>"},{"location":"css_diseno/#floats","title":"Floats","text":"<p>La propiedad float fue introducida para permitir a los desarrolladores implementar dise\u00f1os sencillos que incluyeran una imagen flotando dentro de una columna de texto, con el texto envolviendo la parte izquierda o derecha de la imagen. El tipo de cosa que encuentras habitualmente en el dise\u00f1o de un peri\u00f3dico. <sup>1</sup></p> <p>Pero los desarrolladores web pronto se dieron cuenta de que pod\u00edan flotar cualquier cosa, no solo im\u00e1genes, por lo que su uso se extendi\u00f3.</p> <p>Los elementos flotantes han sido usados com\u00fanmente para crear dise\u00f1os web completos con m\u00faltiples columnas situadas unas al lado de las otras (el comportamiento por defecto ser\u00eda que las columnas se situaran unas debajo de las otras, en el mismo orden en el que aparecen en el c\u00f3digo fuente). Ahora hay disponibles t\u00e9cnicas m\u00e1s modernas y mejores, que exploraremos m\u00e1s adelante en este m\u00f3dulo, por lo que el uso de float de este modo deber\u00eda contemplarse como una t\u00e9cnica anticuada.</p> <p>La siguiente imagen muestra el resultado de posicionar de forma flotante hacia la derecha la caja 1: float: right;</p> <p></p> <p>La siguiente imagen muestra el resultado de posicionar de forma flotante hacia la izquierda la caja 1: float: left;. Vemos que la caja 1 tapa a la caja 2.</p> <p></p> <p>La siguiente imagen muestra el resultado de posicionar de forma flotante hacia la izquierda todas las cajas: float: left;</p> <p></p>"},{"location":"css_diseno/#flexbox","title":"Flexbox","text":"<p>Flexbox es un m\u00e9todo de dise\u00f1o de p\u00e1gina unidimensional para compaginar elementos en filas o columnas. Los elementos de contenido se ensanchan para rellenar el espacio adicional y se encogen para caber en espacios m\u00e1s peque\u00f1os.</p> <p>Durante mucho tiempo, las \u00fanicas herramientas fiables con compatibilidad cruzada entre navegadores disponibles para crear dise\u00f1os CSS fueron cosas como la flotaci\u00f3n y el posicionamiento. Est\u00e1n bien y funcionan, pero de alguna manera tambi\u00e9n limitan bastante y frustran.</p> <p>Con tales herramientas resulta dif\u00edcil, si no imposible, lograr obtener en cualquier forma conveniente y flexible un dise\u00f1o de p\u00e1gina sencillo con unos requisitos como los siguientes:</p> <ul> <li>Centrar verticalmente un bloque de contenido dentro de su elemento padre.</li> <li>Hacer que todos los elementos secundarios de un contenedor ocupen una cantidad igual del ancho/alto disponible, independientemente del ancho/alto que haya disponible.</li> <li>Hacer que todas las columnas en una compaginaci\u00f3n en columnas m\u00faltiples adopten la misma altura incluso si contienen cantidades diferentes de contenido.</li> </ul> <p>Para seleccionar qu\u00e9 elementos se van a presentar como cajas flexibles establecemos un valor especial de display en el elemento padre de los elementos que deseas editar.</p> <p>Ejemplo</p> <pre><code>section {\n    display: flex;\n}\n</code></pre> <p>Esto hace que el elemento <code>&lt;section&gt;</code> se convierta en contenedor flex, y sus hijos en elementos flexibles.</p> <p>Para ver m\u00e1s detalles del modelo Flexbox pueden visitar https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Flexbox y https://css-tricks.com/snippets/css/a-guide-to-flexbox/</p> <p>Tambi\u00e9n pod\u00e9is practicar los estilos de flexbox con este juego https://flexboxfroggy.com/ </p>"},{"location":"css_diseno/#grids","title":"Grids","text":"<p>La compaginaci\u00f3n en cuadr\u00edcula con CSS es un m\u00e9todo de dise\u00f1o de p\u00e1ginas web en dos dimensiones. Te permite distribuir el contenido en filas y columnas, y tiene muchas caracter\u00edsticas que facilitan la creaci\u00f3n de dise\u00f1os complejos.</p> <p>Una cuadr\u00edcula es un conjunto de l\u00edneas horizontales y verticales que crean un patr\u00f3n sobre el que podemos alinear nuestros elementos de dise\u00f1o. Las cuadr\u00edculas nos ayudan a crear dise\u00f1os de p\u00e1gina en que los elementos no saltan ni cambian de ancho cuando nos movemos de una p\u00e1gina a otra, y as\u00ed proporcionan a nuestras p\u00e1ginas web un aspecto m\u00e1s coherente.</p> <p>Una cuadr\u00edcula en general tiene columnas, filas y luego espacios entre cada fila y cada columna, conocidos com\u00fanmente como canales.</p> <p>Para definir una cuadr\u00edcula utilizamos el valor grid de la propiedad display. Al igual que con el m\u00e9todo Flexbox, esto activa la compaginaci\u00f3n de cuadr\u00edcula y todos los elementos que son hijos directos del contenedor se convierten en elementos de cuadr\u00edcula.</p> <p>A diferencia del m\u00e9todo Flexbox, los elementos no se ven diferentes inmediatamente. La declaraci\u00f3n display: grid; te proporciona una cuadr\u00edcula de una sola columna, por lo que tus elementos contin\u00faan mostr\u00e1ndose uno debajo del otro, como lo hacen en el flujo normal.</p> <p>Para ver algo que se parezca m\u00e1s a una cuadr\u00edcula, necesitamos a\u00f1adir columnas a la cuadr\u00edcula. Para ello usamos el grid-template-columns</p> <pre><code>.container {\n    display: grid;\n    grid-template-columns: 200px 200px 200px;\n}\n</code></pre> <p>Para ver m\u00e1s detalle del modelo de Grid visitar https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Grids y https://css-tricks.com/snippets/css/complete-guide-grid/</p> <p>Tambi\u00e9n pod\u00e9is practicar los estilos de Grid con este juego https://cssgridgarden.com/</p>"},{"location":"css_diseno/#ejemplos-de-disenos-layouts","title":"Ejemplos de dise\u00f1os (Layouts)","text":"<p>https://1linelayouts.glitch.me/</p>"},{"location":"css_diseno/#maquetar-nuestra-calculadora-usando-flexbox","title":"Maquetar nuestra calculadora usando flexbox","text":""},{"location":"css_diseno/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el archivo estilo.css para agregar el modelo de flexbox</p> <pre><code>:root {\n    --light-blue: #8ecae6ff;\n    --blue-green: #219ebcff;\n    --prussian-blue: #023047ff;\n    --honey-yellow: #ffb703ff;\n    --orange: #fb8500ff;\n}\n\nhtml {\n    font-family: \"Roboto\", sans-serif;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n    color: var(--prussian-blue);\n}\n\nfooter {\n    color: var(--blue-green);\n}\n\n#origen, #destino {\n    color: var(--orange);\n}\n\naside {\n    border-left: 2px solid var(--prussian-blue);\n}\n\naside &gt; ul &gt; li {\n    color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n    background-color: var(--orange);\n    color: var(--prussian-blue);\n}\n</code></pre> </li> <li> <p>Modificar el estilo del elemento header para que el titulo aparezca junto a la imagen</p> <pre><code>:root {\n    --light-blue: #8ecae6ff;\n    --blue-green: #219ebcff;\n    --prussian-blue: #023047ff;\n    --honey-yellow: #ffb703ff;\n    --orange: #fb8500ff;\n}\n\nhtml {\n    font-family: \"Roboto\", sans-serif;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    display: flex;\n    background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n    color: var(--prussian-blue);\n}\n\nfooter {\n    color: var(--blue-green);\n}\n\n#origen, #destino {\n    color: var(--orange);\n}\n\naside {\n    border-left: 2px solid var(--prussian-blue);\n}\n\naside &gt; ul &gt; li {\n    color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n    background-color: var(--orange);\n    color: var(--prussian-blue);\n}\n</code></pre> </li> <li> <p>Agregar el estilo al elemento main</p> <pre><code>:root {\n    --light-blue: #8ecae6ff;\n    --blue-green: #219ebcff;\n    --prussian-blue: #023047ff;\n    --honey-yellow: #ffb703ff;\n    --orange: #fb8500ff;\n}\n\nhtml {\n    font-family: \"Roboto\", sans-serif;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    display: flex;\n    background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n    color: var(--prussian-blue);\n}\n\nfooter {\n    color: var(--blue-green);\n}\n\nmain {\n    display: flex;\n    flex: auto;\n}\n\nmain &gt; div {\n    flex: auto;\n}\n\n#origen, #destino {\n    color: var(--orange);\n}\n\naside {\n    border-left: 2px solid var(--prussian-blue);\n}\n\naside &gt; ul &gt; li {\n    color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n    background-color: var(--orange);\n    color: var(--prussian-blue);\n}\n</code></pre> </li> <li> <p>Modificar el elemento aside para que aparezca junto al main</p> <pre><code>:root {\n    --light-blue: #8ecae6ff;\n    --blue-green: #219ebcff;\n    --prussian-blue: #023047ff;\n    --honey-yellow: #ffb703ff;\n    --orange: #fb8500ff;\n}\n\nhtml {\n    font-family: \"Roboto\", sans-serif;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    display: flex;\n    background-color: var(--light-blue);\n}\n\nheader &gt; h1 {\n    color: var(--prussian-blue);\n}\n\nfooter {\n    color: var(--blue-green);\n}\n\nmain {\n    display: flex;\n    flex: auto;\n}\n\nmain &gt; div {\n    flex: auto;\n}\n\n#origen, #destino {\n    color: var(--orange);\n}\n\naside {\n    min-width: 150px;\n    flex: 1;\n    border-left: 2px solid var(--prussian-blue);\n}\n\naside &gt; ul &gt; li {\n    color: var(--honey-yellow);\n}\n\n.btn-tranformar {\n    background-color: var(--orange);\n    color: var(--prussian-blue);\n}\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver los cambios.</p> </li> </ol> <p>Ejercicio 3 pt</p> <ol> <li>Agregar un class al bot\u00f3n Enviar resultado creado en el ejercicio anterior y dar estilo al bot\u00f3n. 0.5 pt.</li> <li>Centrar horizontalmente el texto del elemento footer 0.5 pt.</li> <li>Eliminar el subrayado de los enlaces del listado de definiciciones de los diferentes EPSG 0.5 pt.</li> <li>Modificar el estilo del elemento header para que el texto del titulo quede alineado verticalmente en el centro de su contenedor 0.5 pt. Ayuda usar la propiedad align-items</li> <li>Modificar el estlio del elemento header para que la imagen y el titulo queden distribuidos de igual forma detro de su contenedor 0.5 pt. Ayuda usar la propiedad justify-content</li> <li>Modificar el estilo de la tabla para que los elementos se vean m\u00e1s ordenados dentro de la p\u00e1gina. Algunas ideas: centrar la tabla, dar mas espacio entre los elementos, agregar un estilo de borde para separar los elementos de la columna de origen de los de la columna de destino, etc. 0.5 pt.</li> </ol> <p>El resultado debe ser algo como esto </p>"},{"location":"css_diseno/#recursos","title":"Recursos","text":"<ul> <li>https://github.com/eludadev/css-docs</li> <li>https://layout.bradwoods.io/customize</li> <li>https://internetingishard.netlify.app/</li> </ul>"},{"location":"css_diseno/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout \u21a9</p> </li> </ol>"},{"location":"elementos_html/","title":"Elementos HTML","text":""},{"location":"elementos_html/#head","title":"head","text":"<p>El elemento HTML <code>&lt;head&gt;</code> provee informaci\u00f3n general (metadatos) acerca del documento, incluyendo su t\u00edtulo y enlaces a scripts y hojas de estilos. <sup>1</sup></p> <p>Es la cabecera y actua como contenedor para todos los par\u00e1metros que quieras incluir en el documento HTML que no ser\u00e1n visibles a los visitantes de la p\u00e1gina. Incluye cosas como palabras clave y la descripci\u00f3n de la p\u00e1gina que quieras mostrar en los resultados de b\u00fasqueda, as\u00ed como la hoja de estilo para formatear nuestro contenido, declaraciones de codificaci\u00f3n de caracteres y m\u00e1s.</p> <p>Algunos elementos que deber\u00edan estar presentes en la cabecera </p>"},{"location":"elementos_html/#title","title":"title","text":"<p>El elemento <code>&lt;title&gt;</code> se usa para poner el t\u00edtulo a la p\u00e1gina. Es lo que aparece en la barra del navegador</p>"},{"location":"elementos_html/#metadatos","title":"metadatos","text":"<p>Los metadatos son los datos que describen la p\u00e1gina. HTML tiene una forma \"oficial\" para introducir metadatos y para ello se usa el elemento <code>&lt;meta&gt;</code>. Hay muchos tipos diferentes de <code>&lt;meta&gt;</code> que se pueden incluir en el <code>&lt;head&gt;</code> de una p\u00e1gina.</p> <p>A continuaci\u00f3n veremos algunos de los <code>&lt;meta&gt;</code> m\u00e1s usados</p>"},{"location":"elementos_html/#codificacion-de-caracteres","title":"Codificaci\u00f3n de caracteres","text":"<p>Especifica especifica la codificaci\u00f3n de caracteres del documento, esto quiere decir el conjuto de car\u00e1cteres que se pueden usar en la p\u00e1gina. Esto es muy \u00fatil e importante para representar correctamente caracteres especiales como los acentos u caracteres de otros idioma. Por ejemplo japon\u00e9s </p> <p>Ejemplo</p> <pre><code>&lt;meta charset=\"utf-8\"&gt;\n</code></pre>"},{"location":"elementos_html/#autor","title":"Autor","text":"<p>Especificar un autor resulta ventajoso por diversos motivos: es \u00fatil saber qui\u00e9n escribi\u00f3 la p\u00e1gina para poder ponerte en contacto con el autor si tienes preguntas sobre el contenido. Algunos sistemas de gesti\u00f3n de contenido tienen herramientas para extraer autom\u00e1ticamente la informaci\u00f3n del autor de la p\u00e1gina y ponerla a disposici\u00f3n para tales fines. <sup>2</sup></p> <p>Ejemplo</p> <pre><code>&lt;meta name=\"author\" content=\"Pepe Perez\"&gt;\n</code></pre>"},{"location":"elementos_html/#descripcion","title":"Descripci\u00f3n","text":"<p>Especificar una descripci\u00f3n que incluya palabras clave relacionadas con el contenido de tu p\u00e1gina resulta \u00fatil porque tiene el potencial de hacer que la p\u00e1gina aparezca m\u00e1s arriba en las b\u00fasquedas relevantes que efect\u00faan los motores de b\u00fasqueda. Mejora el SEO</p> <p>SEO (Search Engine Optimization) tambi\u00e9n conocido como posicionamiento web, es el proceso de hacer un sitio web m\u00e1s visible en los resultados de b\u00fasqueda o mejorar el ranking de b\u00fasqueda.</p> <p>Ejemplo</p> <pre><code>&lt;meta name=\"description\" content=\"El \u00e1rea de aprendizaje de MDN pretende\nproporcionar a los reci\u00e9n llegados a la web todo lo que deben\nsaber para empezar a desarrollar p\u00e1ginas web y aplicaciones web.\"&gt;\n</code></pre>"},{"location":"elementos_html/#viewport","title":"Viewport","text":"<p>El viewport del navegador es el \u00e1rea de la ventana en donde el contenido web est\u00e1 visible. Generalmente no es del mismo tama\u00f1o que la p\u00e1gina renderizada, en donde se brindan barras de desplazamiento para que el usuario pueda acceder a todo el contenido.</p> <p>Dispositivos con pantallas angostas (p.e. m\u00f3viles) muestran la p\u00e1gina en una ventana virtual o viewport, que es usualmente m\u00e1s ancho que la pantalla y la comprimen de manera que pueda verse completa. El usuario podr\u00e1 recorrerla y hacer zoom para ver diferentes \u00e1reas de la p\u00e1gina. Por ejemplo, si una pantalla m\u00f3vil tiene un ancho 640px, las p\u00e1ginas pueden ser procesadas con un viewport de 980px, y despu\u00e9s comprimidas para que entren en 640px.</p> <p>Esto se hace porque muchas p\u00e1ginas no est\u00e1n optimizadas para dispositivos m\u00f3viles y se quiebran (o, al menos, se ven mal) cuando son procesadas a un ancho de viewport peque\u00f1o. El viewport virtual es una forma de resolver el problema de sitios no optimizados para m\u00f3viles, logrando que se vean mejor. <sup>3</sup></p> <p>El uso del viewport f\u00e1cilita el dise\u00f1o responsive de las p\u00e1ginas. </p> <p>La propiedad width controla el tama\u00f1o del viewport. Puede definirse con un n\u00famero en pixeles como width=600 o con un valor especial device-width que es el equivalente al ancho de la pantalla en p\u00edxeles CSS en una escala de 100%. </p> <p>La propiedad initial-scale controla el nivel de zoom cuando la p\u00e1gina se carga por primera vez.</p> <p>Ejemplo</p> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre>"},{"location":"elementos_html/#redes-sociales","title":"Redes sociales","text":"<p>Open Graph Data es un protocolo de metadatos que Facebook invent\u00f3 para proveer metadatos m\u00e1s ricos para los sitios web. Un efecto de esto es que cuando desde Facebook enlazas a una pa\u00e1gina, el enlace aparece con una imagen y una descripci\u00f3n, lo que resulta en una experiencia m\u00e1s enriquecedora para los usuarios.</p> <p>Ejemplo</p> <pre><code>&lt;meta property=\"og:image\" content=\"https://developer.cdn.mozilla.net/static/img/opengraph-logo.dc4e08e2f6af.png\"&gt;\n&lt;meta property=\"og:description\" content=\"The Mozilla Developer Network (MDN) proporciona informaci\u00f3n\nsobre tecnolog\u00edas Open Web, incluidas HTML, CSS y APIs para ambos sitios web\ny aplicaciones HTML5. Tambi\u00e9n documenta productos Mozilla, como el sistema operativo Firefox.\"&gt;\n&lt;meta property=\"og:title\" content=\"Mozilla Developer Network\"&gt;\n</code></pre> <p>Twitter tambi\u00e9n tiene sus metadatos propios, las Twitter Cards, que tienen un efecto similar cuando la URL del sitio se muestra en twitter.com.</p> <p>Ejemplo</p> <pre><code>&lt;meta name=\"twitter:title\" content=\"Mozilla Developer Network\"&gt;\n</code></pre>"},{"location":"elementos_html/#favicon","title":"favicon","text":"<p>Para enriquecer un poco m\u00e1s el dise\u00f1o de tu sitio puedes a\u00f1adir en tus metadatos referencias a iconos personalizados, que se mostrar\u00e1n en determinados contextos. El m\u00e1s com\u00fan de ellos es el favicon (abreviatura de favorite icon \u2014icono favorito, referido al uso que se le da en las listas de favoritos o de marcadores (bookmarks).</p> <p>El humilde favicon ha existido durante muchos a\u00f1os. Es el primer icono de este tipo: un icono cuadrado de 16 p\u00edxeles que se utiliza en varios lugares. Es posible que veas (seg\u00fan el navegador) favicons que se muestran en la pesta\u00f1a del navegador que contiene cada p\u00e1gina abierta y junto a las p\u00e1ginas marcadas en el panel de marcadores.</p> <p>Ejemplo</p> <pre><code>&lt;link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\"&gt;\n</code></pre>"},{"location":"elementos_html/#carga-de-css-y-javascript","title":"Carga de CSS y JavaScript","text":"<p>Pr\u00e1cticamente todos los sitios web usan CSS para darles un buen aspecto y JavaScript para a\u00f1adir funcionalidades interactivas, como reproductores de v\u00eddeo, mapas, juegos y dem\u00e1s. La manera m\u00e1s habitual de a\u00f1adir CSS y JavaScript a una p\u00e1gina web es con los elementos <code>&lt;link&gt;</code> y el elemento <code>&lt;script&gt;</code>, respectivamente.</p> <p>El elemento <code>&lt;link&gt;</code> siempre debe ir dentro del <code>&lt;head&gt;</code> de tu documento. Este toma dos atributos, rel=\"stylesheet\", que indica que es la hoja de estilo del documento, y href, que contiene la ruta al archivo de la hoja de estilo.</p> <p>Ejemplo</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"my-css-file.css\"&gt;\n</code></pre> <p>El elemento <code>&lt;script&gt;</code> tambi\u00e9n deber\u00eda ir en el head, y deber\u00eda incluir un atributo src con la ruta al JavaScript que quieres cargar, y defer, que b\u00e1sicamente le dice al navegador que cargue el JavaScript al mismo tiempo que el HTML de la p\u00e1gina. Esto es \u00fatil porque hace que todo el HTML se cargue antes de ejecutar el JavaScript, para que no haya errores porque el JavaScript ha intentado acceder a un elemento HTML que todav\u00eda no existe. De hecho hay m\u00faltiples formas de gestionar la carga del JavaScript en una p\u00e1gina por ejemplo poner el elemento <code>&lt;script&gt;</code> al final del body.</p> <p>Ejemplo</p> <pre><code>&lt;script src=\"my-js-file.js\" defer&gt;&lt;/script&gt;\n</code></pre>"},{"location":"elementos_html/#elementos-de-estructura-contenedores-o-envolturas","title":"Elementos de \"estructura\", \"contenedores\" o \"envolturas\"","text":"<p>Si bien la mayor\u00eda de los elementos del html se pueden anidar, exisiten algunos elementos que se usan para estructurar las distintas \u00e1ereas de la p\u00e1gina. Existen alungunos elementos que tienen un significado sem\u00e1ntico basado en su funcionalidad como por ejemplo <code>&lt;footer&gt;</code> que presentan sin ambig\u00fcedad los diferentes contenidos y otros elementos no-sem\u00e1nticos que tienen un uso generalista como por ejemplo <code>&lt;div&gt;</code> </p>"},{"location":"elementos_html/#elementos-semanticos","title":"Elementos sem\u00e1nticos","text":"<p>El conten\u00eddo sem\u00e1ntico permite que las tecnolog\u00edas de accesibilidad y los lectores de pantalla puedan reconocer esos elementos y asistir en tareas como encontrar el men\u00fa de navegaci\u00f3n, o encontrar el contenido principal. </p>"},{"location":"elementos_html/#body","title":"body","text":"<p>El elemento <code>&lt;body&gt;</code> contiene todo el contenido que se quiere mostrar en la p\u00e1gina y por lo tanto s\u00f3lo puede haber uno en cada p\u00e1gina.</p>"},{"location":"elementos_html/#header","title":"header","text":"<p>El elemento <code>&lt;header&gt;</code> representa un contenido introductorio del contenedor en el que se aloja. Si este es hijo de un elemento <code>&lt;body&gt;</code>, se convertir\u00e1 en el encabezado principal del sitio web, pero si es hijo de un elemento <code>&lt;article&gt;</code> o un elemento <code>&lt;section&gt;</code>, entonces simplemente ser\u00e1 el encabezado particular de cada secci\u00f3n.</p> <p>Al igual que ocurre con el footer, se suelen utilizar \u00fanicamente como la cabecera y pie de una p\u00e1gina (body) pero no se les da un uso habitual y debido en los article o section.</p> <p>Warning</p> <p>No confundir con el elemento <code>&lt;head&gt;</code> ni con t\u00edtulos y encabezados</p>"},{"location":"elementos_html/#footer","title":"footer","text":"<p>El elemento <code>&lt;footer&gt;</code> representa el contenido al pie de su elemento superior. Generalmente se usa como pie de p\u00e1gina. </p> <p>En general el footer incluye informaci\u00f3n del autor, enlaces a documentos relacionados, contacto, copyright y similares.</p>"},{"location":"elementos_html/#nav","title":"nav","text":"<p>El elemento <code>&lt;nav&gt;</code> o men\u00fa de navegaci\u00f3n contiene la funcionalidad de navegaci\u00f3n principal de la p\u00e1gina. Contiene enlaces a otras p\u00e1ginas o zonas de la p\u00e1gina. </p> <p>Hay que tener en cuenta que no deber\u00eda ser un listado de elementos, sino una zona de navegaci\u00f3n. Esto significa que no todos los enlaces de una p\u00e1gina han de encontrarse dentro de este elemento.</p>"},{"location":"elementos_html/#main","title":"main","text":"<p>El elemento <code>&lt;main&gt;</code> representa el contenido principal de la p\u00e1gina. Utilizaremos <code>&lt;main&gt;</code> solamente una vez para cada p\u00e1gina y lo situaremos directamente dentro del elemento <code>&lt;body&gt;</code>. Es mejor que no lo anidemos en otros elementos.</p> <p>Dentro del main encontraremos varias subsecciones (adem\u00e1s de la barra lateral <code>&lt;aside&gt;</code>) representadas por los elementos <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, y <code>&lt;div&gt;</code>.</p>"},{"location":"elementos_html/#aside","title":"aside","text":"<p>El elemento <code>&lt;aside&gt;</code> o barra lateral incluye contenido que no est\u00e1 directamente relacionado con el contenido principal, pero que puede aportar informaci\u00f3n adicional relacionada indirectamente con \u00e9l (res\u00famenes, enlaces relacionados, etc.). A menudo se coloca dentro de <code>&lt;main&gt;</code></p>"},{"location":"elementos_html/#elementos-no-semanticos","title":"Elementos no sem\u00e1nticos","text":""},{"location":"elementos_html/#div","title":"div","text":"<p>El elemento <code>&lt;div&gt;</code> es un elemento de bloque y que se utiliza cuando no se tenemos un elementos sem\u00e1ntico en el que indicar el contenido o en el caso de que no se quiera dar ning\u00fan significado concreto. Es \u00e9l elemento comod\u00edn por exelencia.</p>"},{"location":"elementos_html/#span","title":"span","text":"<p>El elemento <code>&lt;span&gt;</code> es un elemento de linea (que se utiliza en el interior de una l\u00ednea) y que al igual que el *div se utiliza cuando no se tenemos un elementos sem\u00e1ntico en el que indicar el contenido o en el caso de que no se quiera dar ning\u00fan significado espec\u00edfico.</p> <p>Se usa frecuentemente para dar estilo a un texto dentro de una l\u00ednea. Por ejemplo</p> <pre><code>&lt;p&gt;Tengo un perro &lt;span style=\"color:green\"&gt;verde&lt;/span&gt; que tiene los ojos &lt;span style=\"color:blue\"&gt;azules&lt;/span&gt;&lt;/p&gt; \n</code></pre> <p>Tengo un perro verde que tiene los ojos azules</p>"},{"location":"elementos_html/#dar-estructura-a-nuestra-pagina","title":"Dar estructura a nuestra p\u00e1gina","text":"<p>En el c\u00e1pitulo anterior crearmos una p\u00e1gina web sencilla con la estructura m\u00ednima donde solo aparec\u00eda el texto \"Mi calculadora geod\u00e9sica\". Modificaremos la p\u00e1gina y le daremos una mejor estructura.</p>"},{"location":"elementos_html/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Abrir en el editor de texto el archivo index.html que se encuentra en la carpeta web-mgeo</p> </li> <li> <p>Agregar el autor y la descripci\u00f3n en el head. Para ello escribir lo siguiente</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n    &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Agregar el viewport para que la p\u00e1gina sea \"responsive\". </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n    &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Agregar el favicon de la p\u00e1gina</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n    &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina, veremos que aprece nuestro favicon en la pesta\u00f1a del navegador pero que el resto de nuestra p\u00e1gina sigue igual. Esto es debido a que como ya hemos mencionado los metadatos de la p\u00e1gina no son visibles.</p> </li> <li> <p>Agregar el header y footer a la pagina. Para ello escribimos lo siguiente en nuestro archivo index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina, veremos que nuestro texto no ha cambiado y que aparece el texto del footer. Esto es debido a que los elementos header y footer dan contexto sem\u00e1ntico pero no aplic\u00e1n ning\u00fan estilo. </p> </li> <li> <p>Crear el elemento principal de la p\u00e1gina</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        Aqui ir\u00e1 mi calculadora\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver el contenido del elemento principal</p> </li> </ol>"},{"location":"elementos_html/#otros-elementos-importantes","title":"Otros elementos importantes","text":""},{"location":"elementos_html/#listas","title":"Listas","text":"<p>Existen dos elementos para definir las lista dependiendo de si es una lista ordenada o no ordenada. Las listas no ordenadas se usan para marcar listas de art\u00edculos cuyo orden no es importante. Ejemplo la lista de compras. Por el contrario las listas ordenadas son aquellas en las que el orden de los elementos s\u00ed importa. Ejemplo una lista de instrucciones para seguir.</p> <p>Ambos elementos funcionan de igual forma lo que cambias es el elemento principal que define o delimita la lista. Para las listas ordenadas se usa el elemento <code>&lt;ol&gt;</code> y para los no ordenadas el <code>&lt;ul&gt;</code>.</p> <p>Para indicar cada item de la lista se usa el elemento <code>&lt;li&gt;</code></p> <p>Se pueden crear listas anidadas, para tener subelementos. En las listas anidadas se pueden combinar los tipos de lista.</p> <p>Ejemplo de lista ordenada</p> <pre><code>&lt;ol&gt;\n  &lt;li&gt;Conduce hasta el final de la calle&lt;/li&gt;\n  &lt;li&gt;Gira a la derecha&lt;/li&gt;\n  &lt;li&gt;Sigue derecho por las dos primeras glorietas&lt;/li&gt;\n  &lt;li&gt;Gira a la izquierda en la tercer glorieta&lt;/li&gt;\n  &lt;li&gt;El colegio est\u00e1 a tu derecha, 300 metros m\u00e1s adelante&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <ol> <li>Conduce hasta el final de la calle</li> <li>Gira a la derecha</li> <li>Sigue derecho por las dos primeras glorietas</li> <li>Gira a la izquierda en la tercer glorieta</li> <li>El colegio est\u00e1 a tu derecha, 300 metros m\u00e1s adelante</li> </ol> <p>Ejemplo de lista no ordenada con lista ordenada anidada </p> <pre><code>&lt;ul&gt;\n  &lt;li&gt;leche&lt;/li&gt;\n  &lt;li&gt;hummus&lt;/li&gt;\n  &lt;ol&gt;\n      &lt;li&gt;ajo&lt;/li&gt;\n      &lt;li&gt;lim\u00f3n&lt;/li&gt;\n      &lt;li&gt;pimiento&lt;/li&gt;\n  &lt;/ol&gt;\n  &lt;li&gt;huevos&lt;/li&gt;\n  &lt;li&gt;pan&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <ul> <li>leche</li> <li>hummus</li> <ol> <li>ajo</li> <li>lim\u00f3n</li> <li>pimiento</li> </ol> <li>huevos</li> <li>pan</li> </ul>"},{"location":"elementos_html/#ejercicios-entregables_1","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el index.html para agregar un listado (no ordenado) de sistemas de referencia. Este listado lo crearemos en un barra lateral <code>&lt;aside&gt;</code>. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        Aqui ir\u00e1 mi calculadora\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;EPSG:4326&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para observar que aparece nuestro listado de sistemas de referencia.</p> </li> <li> <p>Modificar el index.html para agregar enlaces al listado de sistemas de referencia</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        Aqui ir\u00e1 mi calculadora\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para observar que aparece un enlace en el primer elemento del listado de sistemas de referencia.</p> </li> </ol>"},{"location":"elementos_html/#formularios","title":"Formularios","text":"<p>HTML provee un n\u00famero de elementos que pueden usarse conjuntamente para crear formularios los cuales el usuario puede completar y enviar informaci\u00f3n al sitio Web o a una aplicaci\u00f3n.</p> <p>El elemento form <code>&lt;form&gt;</code> representa una secci\u00f3n de un documento que contiene un formaulario con controles interactivos que permiten a un usuario enviar informaci\u00f3n a un servidor web. Es el contenedor del resto de elementos que forman el formulario.</p> <p>Sus principales atributos son:</p> <ul> <li>action: la URL a donde se va a enviar la informaci\u00f3n del formulario</li> <li>metod: el m\u00e9todo que el navegador usa para enviar el formulario. Sus valores posible son:<ul> <li>post: los datos del formulario son incluidos en el cuerpo del formulario y son enviados al servidor.</li> <li>get: los datos del formulario son adjuntados a la URI del atributo action , con un '?' como separador, y la URI resultante es enviada al servidor.</li> </ul> </li> <li>enctype: cuando el valor del atributo method es post, este atributo es el tipo MIME del contenido que es usado para enviar el formulario al servidor. Sus valores m\u00e1s usados son:<ul> <li>application/x-www-form-urlencoded: El valor por defecto si un atributo no est\u00e1 especificado.</li> <li>multipart/form-data: Usar este valor si se est\u00e1 enviando un archivo dentro del formulario</li> </ul> </li> </ul> <p>A continuaci\u00f3n veremos algunos de los elementos (o campos) m\u00e1s usados en los formularios</p>"},{"location":"elementos_html/#input","title":"input","text":"<p>El elemento <code>&lt;input&gt;</code> se usa para crear controles interactivos para formularios basados en la web con el fin de recibir datos del usuario. Hay disponible una amplia variedad de tipos de datos de entrada y widgets de control. Este elemento es uno de los m\u00e1s potentes y complejos en todo HTML debido a la gran cantidad de combinaciones de tipos y atributos de entrada.</p> <p>Los principales atributos de este elemento son:</p> <ul> <li>type: define el tipo de control a mostrar. Su valor predeterminado es text, si no se especifica este atributo. Los valores m\u00e1s frecuentes son:<ul> <li>checkbox: Casilla de selecci\u00f3n. Se debe usar el atributo value para definir el valor que se enviar\u00e1 por este elemento. Se usa el atributo checked para indicar si el elemento est\u00e1 seleccionado.</li> <li>color: Control para espicificar un color.</li> <li>date: Control para introducir una fecha (a\u00f1o, mes y d\u00eda, sin tiempo).</li> <li>datetime-local: Control para introducir fecha y hora, sin zona horaria espec\u00edfica.</li> <li>email: Campo para introducir una direcci\u00f3n de correo electr\u00f3nico. El valor introducido se valida para que contenga una cadena vac\u00eda o una direcci\u00f3n de correo v\u00e1lida antes de enviarse.</li> <li>file: Control que permite al usuario seleccionar un archivo. Se puede usar el atributo accept para definir los tipos de archivo que el control podr\u00e1 seleccionar</li> <li>hidden: Control que no es mostrado en pantalla, pero cuyo valor es enviado al servidor.</li> <li>number: Control para introducir un n\u00famero</li> <li>password: Control cuyo valor permanece oculto.</li> <li>radio: Bot\u00f3n radio. Se debe usar el atributo value para definir el valor que se enviar\u00e1 por este elemento. Se usa el atributo checked para indicar si el elemento est\u00e1 seleccionado de forma predeterminada. Los botones radio que tengan el mismo valor para su atributo name est\u00e1n dentro del mismo \"grupo de botones radio\". Solo un bot\u00f3n radio dentro de un grupo puede ser seleccionado a la vez</li> <li>submit: Bot\u00f3n que env\u00eda el formulario.</li> <li>text: Campo de texto de l\u00ednea simple. Los saltos de l\u00ednea son eliminados autom\u00e1ticamente del valor introducido.</li> <li>url: Campo para editar una URL. El valor introducido se valida para que contenga una cadena vac\u00eda o una ruta URL absoluta antes de enviarse</li> </ul> </li> <li>disabled: indica que el control no est\u00e1 disponible para interacci\u00f3n</li> <li>name: indica el nombre del control, el cual es enviado con los datos del formulario</li> <li>placeholder indica una pista para el usuario sobre lo que puede introducir en el control.</li> <li>value: indica el valor inicial del control</li> </ul> <p>Ejemplos de algunos controles</p> <pre><code>&lt;form action=\"\"&gt;\n    &lt;input type=\"text\" name=\"nombre\"&gt;\n    &lt;input type=\"email\" name=\"correo\" placeholder=\"introduce tu email\"&gt;\n    &lt;input type=\"hidden\" name=\"oculto\"&gt;\n    &lt;input type=\"password\" name=\"clave\" placeholder=\"introduce tu contrase\u00f1a\"&gt;\n    &lt;input type=\"radio\" name=\"sexo\" value=\"M\"&gt;\n    &lt;input type=\"radio\" name=\"sexo\" value=\"F\"&gt;\n    &lt;input type=\"checkbox\" name=\"condiciones\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"elementos_html/#textarea","title":"textarea","text":"<p>El elemento <code>&lt;textarea&gt;</code> representa un control para la edici\u00f3n mutil\u00ednea de texto sin formato. Para los entradas de texto de una sola l\u00ednea ya tenemos el <code>&lt;input type=\"text\"&gt;</code>.</p> <p>Sus principales atributos son:</p> <ul> <li>cols: indica la anchura visible del control de texto, en caracteres de anchura media. Si est\u00e1 definido debe ser positivo. Si no, por defecto, el valor es 20.</li> <li>rows: indica el n\u00famero de l\u00edneas visibles en el control</li> <li>maxlength: indica el n\u00famero m\u00e1ximo de caracteres que el usuario puede insertar. Si no est\u00e1 especificado entonces el usuario puede insertar un n\u00famero ilimitado de caracteres.</li> <li>disabled: indica que el control no est\u00e1 disponible para interacci\u00f3n</li> <li>name: indica el nombre del control, el cual es enviado con los datos del formulario</li> <li>placeholder indica una pista para el usuario sobre lo que puede introducir en el control.</li> </ul> <p>Note</p> <p>Este campo no tiene un atributo value</p> <p>Ejemplo</p> <pre><code>&lt;textarea name=\"textarea\" rows=\"10\" cols=\"50\"&gt;Escribe algo largo aqu\u00ed&lt;/textarea&gt;\n</code></pre> Escribe algo largo aqu\u00ed"},{"location":"elementos_html/#select","title":"select","text":"<p>El elemento select <code>&lt;select&gt;</code> representa un control que muestra un men\u00fa de opciones. Las opciones contenidas en el men\u00fa son representadas por elementos <code>&lt;option&gt;</code>, los cuales pueden ser agrupados por elementos <code>&lt;optgroup&gt;</code>.</p> <p>Ejemplo</p> <pre><code>&lt;select name=\"select\"&gt;\n  &lt;option value=\"value1\"&gt;Value 1&lt;/option&gt; \n  &lt;option value=\"value2\" selected&gt;Value 2&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Value 3&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p> Value 1 Value 2 Value 3 <p></p>"},{"location":"elementos_html/#button","title":"button","text":"<p>La etiqueta <code>&lt;button&gt;</code> representa un elemento cliqueable de tipo bot\u00f3n que puede ser utilizado en formularios o en cualquier parte de la p\u00e1gina que necesite un bot\u00f3n est\u00e1ndar y simple de aplicar.</p> <p>El atributo type se puede usar para indicar el tipo de bot\u00f3n. Esto se usa principalmente cuando se utiliza dentro de un formulario. Sus valores pueden ser: button, submit o reset</p> <p>Ejemplo</p> <pre><code>&lt;button name=\"button\"&gt;Click me&lt;/button&gt;\n</code></pre>"},{"location":"elementos_html/#label","title":"label","text":"<p>El elemento <code>&lt;label&gt;</code> representa una etiqueta para un elemento en una interfaz de usuario. Este puede estar asociado con un control ya sea mediante la utilizacion del atributo for, o ubicando el control dentro del elemento label.</p> <p>Ejemplos</p> <pre><code>&lt;!-- Un simple ejemplo de un label con el atributo for --&gt;\n&lt;label for=\"Name\"&gt;Click me&lt;/label&gt;\n&lt;input type=\"text\" id=\"Name\" name=\"Name\" /&gt;\n\n&lt;!-- Aun mas simple --&gt;\n&lt;label&gt;Click me &lt;input type=\"text\" id=\"Name\" name=\"Name\" /&gt;&lt;/label&gt;\n</code></pre> <p>Click me </p> <p>Click me </p>"},{"location":"elementos_html/#ejercicios-entregables_2","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el index.html para agregar un formulario en nuestra p\u00e1gina. Primero crear un par de controles <code>&lt;select&gt;</code> para seleccionar el sistema de referencia</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;\n            &lt;select id=\"origen\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;\n            &lt;select id=\"destino\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Crear un par de campos para introducir las coordenadas de origen</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;\n            &lt;select id=\"origen\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;\n            &lt;select id=\"destino\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;\n            &lt;input type=\"text\" id=\"lat\"&gt;\n\n            &lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;\n            &lt;input type=\"text\" id=\"lng\"&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Crear un bot\u00f3n para hacer la transformaci\u00f3n</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;\n            &lt;select id=\"origen\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;\n            &lt;select id=\"destino\"&gt;\n                &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;\n            &lt;input type=\"text\" id=\"lat\"&gt;\n\n            &lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;\n            &lt;input type=\"text\" id=\"lng\"&gt;\n\n            &lt;button&gt;Transformar coordenadas&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver que aparece el formulario.</p> </li> <li> <p>Modificar el index.html para agregar una tabla para ordenar los campos del formulario en nuestra p\u00e1gina.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver que aparece el formulario ordenado dentro de la tabla.</p> </li> </ol> <p>Ejercicio 2.5 pt</p> <ol> <li>Cambiar el resto de elementos del listado de sistemas de referencia por el enlace correspondiente 0.5 pt.</li> <li>Hacer que la imagen del logo de la UAB sea un enlace que lleve a la web https://www.uab.cat/es/ y que se abra en una pesta\u00f1a/ventana nueva. 0.5 pt.</li> <li>Agregar un elemento <code>&lt;label&gt;</code> con el texto Respuesta en la celda que est\u00e1 junto a las celdas con las etiquetas Latitud y Longiud 0.5 pt.</li> <li>Agregar un elemento <code>&lt;textarea&gt;</code> en la celda que est\u00e1 junto a las celdas de los input de lat y lng 0.5 pt.</li> <li>Modificar la estructura de la \u00faltima fila de la tabla para agregar un bot\u00f3n con el texto \"Enviar resultado\" junto al bot\u00f3n de transformar coordenadas 0,5 pt.</li> </ol> <p>El resultado debe ser algo como esto </p>"},{"location":"elementos_html/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Web/HTML/Elemento/head \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Learn/HTML/Introduccion_a_HTML/Metados_en \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/M%C3%B3vil/Viewport_meta_tag \u21a9</p> </li> <li> <p>https://www.htmlquick.com/es/tutorials/tables.html \u21a9</p> </li> </ol>"},{"location":"html/","title":"HTML - HyperText Markup Language - Lenguaje de Marcas de HipertextoHola Mundo!","text":"<p>HTML es un lenguaje de marcado que nos permite indicar la estructura de nuestro documento mediante etiquetas. Este lenguaje nos ofrece una gran adaptabilidad, una estructuraci\u00f3n l\u00f3gica y es f\u00e1cil de interpre\u00adtar tanto por humanos como por m\u00e1quinas<sup>1</sup>.  Permite definir elementos como t\u00edtulos, p\u00e1rrafos, im\u00e1genes, enlaces y m\u00e1s.</p> <p>Caracter\u00edsticas principales:</p> <ul> <li>Lenguaje de marcado: HTML utiliza etiquetas para estructurar la informaci\u00f3n.</li> <li>No es un lenguaje de programaci\u00f3n: No incluye l\u00f3gica como condiciones o bucles, solo define la estructura.</li> <li>Indispensable en la web: Es el est\u00e1ndar para crear documentos que los navegadores interpretan.</li> </ul> <p>El HTML se escribe en forma de etiquetas, rodeadas por corchetes angulares (&lt;,&gt;,/). Ejemplo si escribimos <code>&lt;h1&gt;Hola Mundo!&lt;/h1&gt;</code> en nuestra p\u00e1gina veremos</p>"},{"location":"html/#anatomia-de-un-html","title":"Anatom\u00eda de un HTML","text":""},{"location":"html/#estructura-basica-de-un-html","title":"Estructura b\u00e1sica de un HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Mi p\u00e1gina de prueba&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Esta es mi p\u00e1gina&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li><code>&lt;!DOCTYPE html&gt;</code>: anteriormente serv\u00eda para establecer el conjunto de reglas que la p\u00e1gina deb\u00eda seguir para que fuera considerado un buen HTML. En la actualidad se considera un legado hist\u00f3rico que hay que incluir para que todo funcione correctamente.</li> <li><code>&lt;html&gt;&lt;/html&gt;</code>: este elemento envuelve todo el contenido de la p\u00e1gina y se le conoce como elemento raiz.</li> <li><code>&lt;head&gt;&lt;/head&gt;</code>: es la cabecera y actua como contenedor para todos los par\u00e1metros que quieras incluir en el documento HTML que no ser\u00e1n visibles a los visitantes de la p\u00e1gina. Incluye cosas como palabras clave y la descripci\u00f3n de la p\u00e1gina que quieras mostrar en los resultados de b\u00fasqueda, as\u00ed como la hoja de estilo para formatear nuestro contenido, declaraciones de codificaci\u00f3n de caracteres y m\u00e1s.</li> <li><code>&lt;meta charset=\"utf-8\"&gt;</code>: estable la codificaci\u00f3n de caracteres que usar\u00e1 la p\u00e1gina. Ayuda a evitar problemas de caracteres especiales como los acentos</li> <li><code>&lt;title&gt;&lt;/title&gt;</code>: establece el t\u00edtulo de la p\u00e1gina, que es lo que aparece en la pesta\u00f1a del navegador.</li> <li><code>&lt;body&gt;&lt;/body&gt;</code>: contiene todo el contenido que se quiere mostrar en la p\u00e1gina</li> </ol>"},{"location":"html/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>DragonBall: (5 minutos)</p> <ol> <li> <p>Crear una carpeta llamada dragonball</p> </li> <li> <p>Crear un archivo llamado index.html dentro de la carpeta dragonball</p> </li> <li> <p>Crea un archivo HTML desde cero y escribe el mensaje Personajes de DragonBall en un elemento <code>&lt;h1&gt;</code></p> </li> <li> <p>Cambia el t\u00edtulo de la p\u00e1gina visible en la pesta\u00f1a del navegador por Personajes de DragonBall</p> </li> </ol>"},{"location":"html/#elementos","title":"Elementos","text":"<p>Los elementos son la estructura b\u00e1sica de HTML. Los elementos tienen dos propiedades b\u00e1sicas: atributos y contenido. Cada atributo y contenido tiene ciertas restricciones para que se considere v\u00e1lido al documento HTML. Un elemento generalmente tiene una etiqueta de inicio (por ejemplo, <code>&lt;nombre-de-elemento&gt;</code>) y una etiqueta de cierre (por ejemplo, <code>&lt;/nombre-de-elemento&gt;</code>). Los atributos del elemento est\u00e1n contenidos en la etiqueta de inicio y el contenido est\u00e1 ubicado entre las dos etiquetas (por ejemplo, <code>&lt;nombre-de-elemento atributo=\"valor\"&gt;Contenido&lt;/nombre-de-elemento&gt;</code>). Algunos elementos, tales como <code>&lt;br&gt;</code>, no tienen contenido ni llevan una etiqueta de cierre</p> <p>Una p\u00e1gina que siempre hay que tener como referencia a la hora de consultar los elementos HTML es https://developer.mozilla.org/es/docs/Web/HTML</p>"},{"location":"html/#elementos-anidados","title":"Elementos anidados","text":"<p>Se pueden poner elementos dentro de otros elementos. Esto se llama anidamiento. Si quisi\u00e9ramos decir que nuestro gato es muy gru\u00f1\u00f3n, podr\u00edamos encerrar la palabra muy en un elemento <code>&lt;strong&gt;</code> para que aparezca destacada. Ejemplo <code>&lt;p&gt;Mi gato es &lt;strong&gt;muy&lt;/strong&gt; gru\u00f1\u00f3n.&lt;/p&gt;</code> nos da como resultado</p> <p>Mi gato es muy gru\u00f1\u00f3n.</p> <p>Hay una forma correcta e incorrecta de anidar. En el ejemplo anterior, primero abrimos el elemento p, luego abrimos el elemento strong. Para un anidamiento adecuado, primero debemos cerrar el elemento strong, antes de cerrar el p.</p> <p>El siguiente es un ejemplo de la forma incorrecta de anidar:</p> <pre><code>&lt;p&gt;Mi gato es &lt;strong&gt;muy gru\u00f1\u00f3n.&lt;/p&gt;&lt;/strong&gt;\n</code></pre>"},{"location":"html/#elementos-vacios","title":"Elementos vac\u00edos","text":"<p>No todos los elementos siguen el patr\u00f3n de etiqueta de apertura, contenido y etiqueta de cierre. Algunos elementos consisten solo en una etiqueta \u00fanica, que se utiliza generalmente para insertar/incrustar algo en el documento en el lugar donde se le quiere incluir. Por ejemplo, el elemento <code>&lt;img&gt;</code> inserta una imagen en la p\u00e1gina:</p> <pre><code>&lt;img src=\"https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png\"&gt;\n</code></pre> <p>Este texto mostrar\u00e1 lo siguiente en tu p\u00e1gina:</p> <p></p>"},{"location":"html/#atributos","title":"Atributos","text":"<p>Los atributos contienen informaci\u00f3n extra sobre el elemento que no se mostrar\u00e1 en el contenido. En este caso, el atributo class asigna al elemento un identificador que se puede utilizar para dotarlo de informaci\u00f3n de estilo.</p> <p>Un atributo deber\u00eda tener:</p> <ul> <li>Un espacio entre este y el nombre del elemento. (Para un elemento con m\u00e1s de un atributo, los atributos tambi\u00e9n deben estar separados por espacios).</li> <li>El nombre del atributo, seguido por un signo igual.</li> <li>Un valor del atributo, rodeado de comillas de apertura y cierre.</li> </ul> <pre><code>&lt;a href=\"https://www.mozilla.org/\" title=\"La p\u00e1gina de inicio de Mozilla\" target=\"_blank\"&gt;Mozilla&lt;/a&gt;\n</code></pre>"},{"location":"html/#atributos-booleanos","title":"Atributos booleanos","text":"<p>En ocasiones puedes ver atributos escritos sin valor. Esto est\u00e1 permitido. Estos se denominan atributos booleanos. Los atributos booleanos solo pueden tener un valor, que generalmente es el mismo que el nombre del atributo.</p> <pre><code>&lt;input type=\"text\" disabled=\"disabled\"&gt;\n</code></pre> <p>Tambi\u00e9n se puede escribir de manera abreviada</p> <pre><code>&lt;input type=\"text\" disabled&gt;\n</code></pre>"},{"location":"html/#espacios-en-blanco-en-html","title":"Espacios en blanco en HTML","text":"<p>No importa cu\u00e1ntos espacios en blanco se utilicen (incluye tanto caracteres de espacio como saltos de l\u00ednea) el int\u00e9rprete de HTML reduce cada secuencia de espacio en blanco a un \u00fanico espacio al interpretar el c\u00f3digo. Entonces, \u00bfpor qu\u00e9 utilizar espacios en blanco? La respuesta est\u00e1 en la legibilidad.</p> <p>Los dos siguientes fragmentos de c\u00f3digo son equivalentes:</p> <pre><code>&lt;p&gt;M\u00e1ster Oficial en Geoinformaci\u00f3n.&lt;/p&gt;\n\n&lt;p&gt;M\u00e1ster    Oficial        en\n         Geoinformaci\u00f3n.&lt;/p&gt;\n</code></pre>"},{"location":"html/#caracteres-especiales-en-html","title":"Caracteres especiales en HTML","text":"<p>En HTML, los caracteres &lt;, &gt;,\",' y &amp; son caracteres especiales. Forman parte de la sintaxis HTML. Entonces, \u00bfc\u00f3mo incluye uno de estos caracteres especiales en tu texto? Por ejemplo, si deseas utilizar un menor que, y no hacer que se interprete como c\u00f3digo.</p> <p>Haces esto con referencias de caracteres. Estos son c\u00f3digos especiales que representan caracteres, para ser usados en estas circunstancias exactas. Cada referencia de caracter comienza con un signo de ampersand (&amp;) y finaliza con un punto y coma (;).</p> Caracter literal Equivalente de referencia de caracteres &lt; <code>&amp;lt;</code> &gt; <code>&amp;gt;</code> \" <code>&amp;quot;</code> ' <code>&amp;apos;</code> &amp; <code>&amp;amp;</code>"},{"location":"html/#comentarios-html","title":"Comentarios HTML","text":"<p>En HTML hay un mecanismo para escribir comentarios en el c\u00f3digo. Los comentarios son ignorados por el navegador y, por tanto, son invisibles para el usuario.</p> <p>Para convertir en un comentario una secci\u00f3n de contenido de tu archivo HTML, debes delimitarlo con los marcadores especiales <code>&lt;!--</code> y <code>--&gt;</code>. Por ejemplo:</p> <pre><code>&lt;p&gt;No soy un comentario&lt;/p&gt;\n\n&lt;!-- &lt;p&gt;\u00a1Yo s\u00ed!&lt;/p&gt; --&gt;\n</code></pre>"},{"location":"html/#idioma-principal","title":"Idioma principal","text":"<p>Merece la pena mencionar que puedes especificar el idioma de tu p\u00e1gina. Esto se puede hacer a\u00f1adiendo el atributo lang a la etiqueta de apertura del HTML. Para definir el idioma se usa el est\u00e1ndar ISO_639-1</p> <p>Esto resulta \u00fatil en muchos sentidos. Los motores de b\u00fasqueda indizar\u00e1n tu documento HTML de modo m\u00e1s efectivo si estableces el idioma, y resulta \u00fatil para que las personas con discapacidad visual que utilizan los lectores de pantalla.</p> <p>Ejemplo <pre><code>&lt;html lang=\"es\"&gt;\n</code></pre></p> <p>Tambi\u00e9n puedes establecer que las subsecciones de tu documento se reconozcan en diferentes idiomas. Por ejemplo, podemos establecer que nuestra secci\u00f3n de japon\u00e9s se reconozca como japon\u00e9s, de la siguiente manera:</p> <pre><code>&lt;p&gt;Ejemplo Japon\u00e9s: &lt;span lang=\"ja\"&gt;\u3054\u98ef\u304c\u71b1\u3044\u3002&lt;/span&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"html/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Crear una carpeta llamada web-mgeo</p> </li> <li> <p>Crear un archivo llamado index.html dentro de la carpeta web-mgeo</p> </li> <li> <p>Abrir el archivo con el editor de texto y escribir lo siguiente</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Mi calculadora geod\u00e9sica\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar el archivo y abrir la p\u00e1gina en el navegador para ver el resultado</p> </li> </ol>"},{"location":"html/#referencias","title":"Referencias","text":"<ol> <li> <p>https://es.wikipedia.org/wiki/HTML \u21a9</p> </li> </ol>"},{"location":"html_etiquetas_basicas/","title":"Estructura y Etiquetas B\u00e1sicas","text":""},{"location":"html_etiquetas_basicas/#elementos-de-bloque-vs-elementos-de-linea","title":"Elementos de bloque vs elementos de l\u00ednea","text":"<p>Un elemento de l\u00ednea es aquel que ocupa el espacio m\u00ednimo necesario en horizontal, y permite que otro elemento se coloque a su lado. Ejemplos: <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code>.</p> <p>En cambio un elemento de bloque, ocupa todo el ancho disponible y no permite que otro elemento se coloque a su lado (aunque tenga lugar suficiente). Ejemplos: <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>.</p> <p>Ejemplo de elementos de linea</p> <pre><code>&lt;span&gt;hola &lt;/span&gt;\n&lt;span&gt;estamos&lt;/span&gt;\n&lt;span&gt;en l\u00ednea&lt;/span&gt;\n</code></pre> <p>Produce la siguiente salida</p> <p>hola  estamos en l\u00ednea</p> <p>Ejemplo de elementos de bloque</p> <pre><code>&lt;div&gt;hola &lt;/div&gt;&lt;div&gt;no estamos&lt;/div&gt;&lt;div&gt;en l\u00ednea&lt;/div&gt;\n</code></pre> <p>Produce la siguiente salida</p> hola  no estamos en l\u00ednea"},{"location":"html_etiquetas_basicas/#principales-etiquetas-de-texto","title":"Principales etiquetas de texto:","text":""},{"location":"html_etiquetas_basicas/#encabezado-o-titulo-hx","title":"Encabezado o t\u00edtulo <code>&lt;h[X]&gt;</code>","text":"<p>Hay seis elementos de encabezado: <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code> y <code>&lt;h6&gt;</code>. Se usan para establecer los niveles de contenido de la p\u00e1gina. Por ejemplo el <code>&lt;h1&gt;</code> representa el t\u00edtulo principal, <code>&lt;h2&gt;</code> ser\u00eda un subt\u00edtulo y as\u00ed sucesivamente. Donde <code>&lt;h1&gt;</code> es el m\u00e1s importante y grande, y <code>&lt;h6&gt;</code> el m\u00e1s peque\u00f1o.</p> <p>Preferiblemente se debe usar un solo <code>&lt;h1&gt;</code> por p\u00e1gina. Y se debe procuarar no usar m\u00e1s de tres niveles por p\u00e1gina.</p> <p>El uso de los encabezados favorece al SEO de las p\u00e1ginas. Los motores de b\u00fasqueda que indexan tu p\u00e1gina consideran el contenido de los t\u00edtulos como palabras clave importantes e influyen en la puntuaci\u00f3n de b\u00fasqueda de la p\u00e1gina.</p>"},{"location":"html_etiquetas_basicas/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el index.html para agregar el titulo</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver como ha cambiado el estilo del t\u00edtulo de la p\u00e1gina</p> </li> </ol>"},{"location":"html_etiquetas_basicas/#parrafos","title":"P\u00e1rrafos","text":"<p>Usa la etiqueta <p> para crear bloques de texto.</p> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo de texto.&lt;/p&gt;\n</code></pre> <p>Este es un p\u00e1rrafo de texto.</p>"},{"location":"html_etiquetas_basicas/#enfasis-cursiva-negrita-subrayado","title":"\u00c9nfasis, Cursiva, negrita, subrayado...","text":"<p>En el lenguaje humano, a menudo enfatizamos ciertas palabras para alterar el significado de una frase, y a menudo queremos destacar ciertas palabras como importantes o diferentes en alg\u00fan sentido. HTML nos dota de diversos elementos sem\u00e1nticos que nos permiten destacar contenido textual con tales efectos, y en esta secci\u00f3n veremos los m\u00e1s comunes.</p> <pre><code>&lt;p&gt;Esto es &lt;strong&gt;negrita&lt;/strong&gt; y esto es &lt;em&gt;cursiva&lt;/em&gt;.&lt;/p&gt;\n</code></pre> <p>Esto es negrita y esto es cursiva.</p>"},{"location":"html_etiquetas_basicas/#negrita","title":"Negrita","text":"<p>Para el texto en negrita, use las etiquetas <code>&lt;strong&gt;</code> o <code>&lt;b&gt;</code>. La diferencia es sem\u00e1ntica, <code>&lt;strong&gt;</code> se utiliza para indicar que el texto es fundamental o sem\u00e1nticamente importante para el texto circundante, mientras que <code>&lt;b&gt;</code> no indica tal importancia y simplemente representa texto que debe estar en negrita.</p>"},{"location":"html_etiquetas_basicas/#cursiva","title":"Cursiva","text":"<p>Para poner el texto en cursiva, use las etiquetas <code>&lt;em&gt;</code> o <code>&lt;i&gt;</code>. Al igual que en las negritas la diferencia es sem\u00e1ntica. <code>&lt;em&gt;</code> se utiliza para indicar que el texto debe tener un \u00e9nfasis adicional que se debe resaltar, mientras que <code>&lt;i&gt;</code> simplemente representa el texto que se debe diferenciar del texto normal que lo rodea. </p>"},{"location":"html_etiquetas_basicas/#subrayado","title":"Subrayado","text":"<p>El elemento <code>&lt;u&gt;</code> se usa para representar una anotaci\u00f3n no textual no articulada (No es un hiperv\u00ednculo). Se usa para transmitir el significado que tradicionalmente conlleva el subrayado: nombres propios, errores ortogr\u00e1ficos...</p>"},{"location":"html_etiquetas_basicas/#hipervinculos-o-enlaces","title":"Hiperv\u00ednculos o enlaces","text":"<p>Los enlaces <code>&lt;a&gt;</code> son elementos verdaderamente importantes son los que hacen que la web sea web.</p> <p>Un enlace se crea incluyendo el texto o cualquier otro contenido que queramos convertir en un enlace usando un elemento <code>&lt;a&gt;</code>. Donde le daremos un atributo href que contendr\u00e1 la direcci\u00f3n web hacia d\u00f3nde queremos que apunte el enlace.</p> <p>Ejemplo</p> <p><pre><code>&lt;a href=\"https://www.mozilla.org/es-ES/\"&gt;la p\u00e1gina de inicio de Mozilla&lt;/a&gt;\n</code></pre> la p\u00e1gina de inicio de Mozilla</p> <p>Otro atributo que es recomendable agregar a los enlaces es el title. El t\u00edtulo contiene informaci\u00f3n adicional sobre el enlace. El t\u00edtulo se mostrar\u00e1 al pasar el rat\u00f3n sobre el texto del enlace.</p> <p>El atributo target es muy \u00fatil ya que en donde desplegar la URL enlazada. Por defecto si no se especifica los enlaces se abren en la ventana o pesta\u00f1a actual. Los valores mas usados para este atributo son:</p> <ul> <li>_self: Carga la URL en el mismo contexto de navegaci\u00f3n que el actual. Este es el comportamiento por defecto.</li> <li>_blank: Carga la URL en un nuevo contexto de navegaci\u00f3n. Usualmente es una pesta\u00f1a, sin embargo, los usuarios pueden configurar los navegadores para utilizar una ventana nueva en lugar de la pesta\u00f1a.</li> <li>_parent: Carga la URL en el contexto de navegaci\u00f3n padre (parent) del actual. Si no existe el padre, este se comporta del mismo modo que _self.</li> </ul> <p>Note</p> <p>Cuando se utiliza target, considera agregar rel=\"noopener noreferrer\" para evitar el uso de la API window.opener.</p> <p>Ejemplo</p> <p><pre><code>&lt;a href=\"https://www.mozilla.org/es-ES/\" title=\"El mejor lugar para encontrar m\u00e1s informaci\u00f3n acerca de la misi\u00f3n de Mozilla y c\u00f3mo contribuir\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;la p\u00e1gina de inicio de Mozilla&lt;/a&gt;\n</code></pre> la p\u00e1gina de inicio de Mozilla</p>"},{"location":"html_etiquetas_basicas/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>DragonBall: (10 minutos)</p> <ol> <li> <p>Mueve el elemento <code>&lt;h1&gt;</code> dentro de otro elemento que se va usar de encabezado de la pagina</p> </li> <li> <p>Selecciona un personaje de Dragonball y crea diferentes elementos donde poner la descripcion del personaje. Podeis sacar informacion de https://web.dragonball-api.com/</p> </li> </ol> Tip <pre><code>&lt;div&gt;&lt;h1&gt;Personajes de DragonBall&lt;/h1&gt;&lt;/div&gt;\n&lt;div&gt;\n    &lt;h2&gt;Goku&lt;/h2&gt;\n    &lt;div&gt;Saiyan - Male&lt;/div&gt;\n    &lt;div&gt;Base KI:&lt;/div&gt;\n    &lt;div&gt;60.000.000&lt;/div&gt;\n    &lt;div&gt;Total KI:&lt;/div&gt;\n    &lt;div&gt;90 Septillion&lt;/div&gt;\n    &lt;div&gt;Afilliation:&lt;/div&gt;\n    &lt;div&gt;Z Fighter&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html_imagenes_tablas/","title":"Im\u00e1genes y Tablas","text":""},{"location":"html_imagenes_tablas/#imagenes-y-multimedia","title":"Im\u00e1genes y multimedia","text":"<p>HTML soporta varios recursos multimedia como im\u00e1genes, audio, y video. En nuestro caso explicaremos \u00fanicamente las im\u00e1genes ya que son el elemento multimedia m\u00e1s utilizado.</p> <p>El elemento de imagen <code>&lt;img&gt;</code> representa una imagen en el documento.</p> <p>Una imagen se crea usando un elemento <code>&lt;img&gt;</code>. Donde le daremos un atributo src que contendr\u00e1 la direcci\u00f3n web donde est\u00e1 ubicada la imagen.</p> <p>Ejemplo </p> <p><pre><code>&lt;img src=\"https://upload.wikimedia.org/wikipedia/commons/7/77/Sistemas_de_proyeccion_con_xcalidraw.png\" /&gt;\n</code></pre> </p> <p>Un atributo que es recomendable agregar a las im\u00e1genes es el alt. Este atributo define el texto alternativo que describe la imagen, texto que los usuarios ver\u00e1n si la URL de la imagen es err\u00f3nea o la imagen tiene un formato no soportado o si la imagen a\u00fan no se ha descargado.</p> <p>Otros atributos comunes son el height (altura) y el width (ancho) para definir las dimensiones de la imagen.</p> <pre><code>&lt;img alt=\"Proyecciones geogr\u00e1ficas\" width=\"200\" height=\"100\" src=\"https://upload.wikimedia.org/wikipedia/commons/7/77/Sistemas_de_proyeccion_con_xcalidraw.png\" /&gt;\n</code></pre> <p></p>"},{"location":"html_imagenes_tablas/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar el index.html para agregar una imagen en nuestra p\u00e1gina.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://www.uab.cat/Xcelerate/WAI/img/UAB-2linies-verd.svg\" alt=\"UAB\" style=\"height: 100px;\"&gt;\n    &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar y recargar la p\u00e1gina para ver que aparece la imagen del logo de la UAB en nuestra p\u00e1gina.</p> </li> </ol>"},{"location":"html_imagenes_tablas/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>DragonBall: (10 minutos)</p> <ol> <li> <p>Agrega la imagen de tu personaje para que aparezca antes que la descripci\u00f3n</p> </li> <li> <p>Definir el tama\u00f1o de la imagen para que se vea bien junto con la descripci\u00f3n</p> </li> </ol> Tip <pre><code>&lt;div&gt;&lt;h1&gt;Personajes de DragonBall&lt;/h1&gt;&lt;/div&gt;\n&lt;div&gt;\n    &lt;img\n      src=\"https://dragonball-api.com/characters/goku_normal.webp\"\n      alt=\"Goku\"\n      width=\"200px\"\n    /&gt;\n    &lt;h2&gt;Goku&lt;/h2&gt;\n    &lt;div&gt;Saiyan - Male&lt;/div&gt;\n    &lt;div&gt;Base KI:&lt;/div&gt;\n    &lt;div&gt;60.000.000&lt;/div&gt;\n    &lt;div&gt;Total KI:&lt;/div&gt;\n    &lt;div&gt;90 Septillion&lt;/div&gt;\n    &lt;div&gt;Afilliation:&lt;/div&gt;\n    &lt;div&gt;Z Fighter&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html_imagenes_tablas/#tablas","title":"Tablas","text":"<p>El elemento <code>&lt;table&gt;</code> se usa para representar datos en dos o mas dimensiones. Permite organizar los datos en filas y columnas.  </p> <p>En documentos HTML una tabla puede ser considerada, como un grupo de filas donde cada una contiene a un grupo de celdas.</p> <p>Como muchas otras estructuras de HTML, las tablas son construidas utilizando elementos. En particular, una tabla b\u00e1sica puede ser declarada usando tres elementos, <code>&lt;table&gt;</code> (el contenedor principal), <code>&lt;tr&gt;</code> (representando a las filas contenedoras de las celdas) y <code>&lt;td&gt;</code> (representando a las celdas) [^4]</p> <p>Ejemplo</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 1&lt;/td&gt;\n    &lt;td&gt;Celda 2&lt;/td&gt;\n    &lt;td&gt;Celda 3&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 4&lt;/td&gt;\n    &lt;td&gt;Celda 5&lt;/td&gt;\n    &lt;td&gt;Celda 6&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> Celda 1 Celda 2 Celda 3 Celda 4 Celda 5 Celda 6 <p>Conjuntamente con los elementos b\u00e1sicos de la tabla existen otros tipos de elementos que permiten hacer tablas m\u00e1s avanzadas. A continuaci\u00f3n veremos algunos de ellos.</p> <ul> <li>El elemento <code>&lt;th&gt;</code> es un tipo especial de celda y se usa para los encabezados.</li> <li>El elemento <code>&lt;caption&gt;</code> de ser insertado justo despu\u00e9s de la etiquete de apertura de la tabla y antes que todos los dem\u00e1s elementos. Se usa para definir el t\u00edtulo de la tabla.</li> </ul> <p>Ejemplo</p> <pre><code>&lt;table&gt;\n  &lt;caption&gt;Titulo de la tabla&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Encabezado 1&lt;/th&gt;\n    &lt;th&gt;Encabezado 2&lt;/th&gt;\n    &lt;th&gt;Encabezado 3&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 1&lt;/td&gt;\n    &lt;td&gt;Celda 2&lt;/td&gt;\n    &lt;td&gt;Celda 3&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 4&lt;/td&gt;\n    &lt;td&gt;Celda 5&lt;/td&gt;\n    &lt;td&gt;Celda 6&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> Titulo de la tabla Encabezado 1 Encabezado 2 Encabezado 3 Celda 1 Celda 2 Celda 3 Celda 4 Celda 5 Celda 6 <p>La unificaci\u00f3n de celdas es un mecanismo mediante el cual se pueden combinar o fusionar dos o m\u00e1s celdas adyacentes en una tabla. Este efecto puede lograrse utilizando los atributos colspan, para unificaci\u00f3n horizontal, y rowspan, para unificaci\u00f3n vertical. Estos atributos pueden tomar un valor entero mayor a cero, que representa el n\u00famero de celdas que participar\u00e1n en la unificaci\u00f3n.</p> <p>Ejemplo</p> <pre><code>&lt;table&gt;\n  &lt;caption&gt;Titulo de la tabla&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Encabezado 1&lt;/th&gt;\n    &lt;th&gt;Encabezado 2&lt;/th&gt;\n    &lt;th&gt;Encabezado 3&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 1&lt;/td&gt;\n    &lt;td colspan=\"2\"&gt;Celda 2 y 3&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Celda 4&lt;/td&gt;\n    &lt;td&gt;Celda 5&lt;/td&gt;\n    &lt;td&gt;Celda 6&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> Titulo de la tabla Encabezado 1 Encabezado 2 Encabezado 3 Celda 1 Celda 2 y 3 Celda 4 Celda 5 Celda 6 <p>Tambi\u00e9n existen 3 elementos que pueden ayudar a organizar la informaci\u00f3n presentada en una tabla permitiendo una agrupaci\u00f3n sem\u00e1ntica de filas. \u00c9stos son: <code>&lt;thead&gt;</code> para agrupar las filas que presentan infromaci\u00f3n de encabezado; <code>&lt;tfoot&gt;</code> para contener a las filas que representan un pie o resumen; y <code>&lt;tbody&gt;</code> para representar un bloque de filas que consiste en un cuerpo de datos. Estos grupos tem\u00e1ticos son meramente sem\u00e1nticos, y se debe evitar su uso para temas de estilo.</p> <p>De igual forma existe un elemento <code>&lt;colgroup&gt;</code> para hacer agrupaciones sem\u00e1nticas de columnas.</p>"},{"location":"html_imagenes_tablas/#ejercicios-practicos_1","title":"Ejercicios Pr\u00e1cticos","text":"<p>DragonBall: (10 minutos)</p> <ol> <li>Crea una tabla donde mostrar los datos de la descripci\u00f3n del personaje. Donde se vea la raza, sexo, base KI, total KI, afiliaci\u00f3n </li> </ol>"},{"location":"introduccion_web/","title":"Introducci\u00f3n al desarrollo Web","text":""},{"location":"introduccion_web/#ciclo-peticionrespuesta","title":"Ciclo petici\u00f3n/respuesta","text":"<p>Cuando consultamos una p\u00e1gina Web existen tres elementos fundamentales que entran en juego: la propia red que hace de nexo entre sus elementos, nuestro ordenador que es el que realiza la petici\u00f3n de consulta, y la m\u00e1quina donde se encuentra almacenada esa p\u00e1gina que queremos consultar. <sup>1</sup></p> <p>Conocemos como servidor al elemento encargado de servir alg\u00fan tipo de contenido. En el ejemplo anterior, la m\u00e1quina que contiene la p\u00e1gina de inter\u00e9s es el servidor. Tambi\u00e9n se conoce como servidor el programa que, residiendo en esa m\u00e1quina, interpreta la petici\u00f3n y la procesa, sirviendo as\u00ed la p\u00e1gina.</p> <p>El cliente es responsable de pedir ese dato al servidor, tomarlo y trabajar con \u00e9l. Nuestro navegador Web es el cliente en este caso, ya que es el que realiza la petici\u00f3n.</p> <p>El proceso mediante el que podemos ver esa p\u00e1gina en un navegador Web comprende los cuatro pasos siguientes:</p> <ol> <li>El cliente realiza la petici\u00f3n.</li> <li>La petici\u00f3n se conduce a trav\u00e9s de la red hasta el servidor.</li> <li>El servidor busca la p\u00e1gina y la devuelve a trav\u00e9s de la red en caso de encontrarla, o devuelve una pagina de error en caso de no tenerla.</li> <li>El cliente recibe la p\u00e1gina y la representa.</li> </ol> <p> Ciclo petici\u00f3n/respuesta <sup>2</sup> <sub>Imagenes de Chaowalit Koetchuea, iconsmind.com, Alfredo @ IconsAlfredo.com.</sub></p>"},{"location":"introduccion_web/#front-end-y-back-end","title":"Front-End y Back-End","text":"<p>Front end y back end son t\u00e9rminos que se refieren a la separaci\u00f3n de intereses entre una capa de presentaci\u00f3n y una capa de acceso a datos, respectivamente. Seg\u00fan el contexto, para referirse a front end se usan otros t\u00e9rminos como frontal o interfaz de usuario,1\u200b mientras que a back end se le llama servidor, motor o modo administrador. <sup>3</sup></p>"},{"location":"introduccion_web/#programacion-por-capas","title":"Programaci\u00f3n por capas","text":"<p>La programaci\u00f3n por capas es un modelo de desarrollo software en el que el objetivo primordial es la separaci\u00f3n (desacoplamiento) de las partes que componen un sistema software o tambi\u00e9n una arquitectura cliente-servidor: l\u00f3gica de negocios, capa de presentaci\u00f3n y capa de datos. De esta forma, por ejemplo, es sencillo y mantenible crear diferentes interfaces sobre un mismo sistema sin requerirse cambio alguno en la capa de datos o l\u00f3gica. <sup>4</sup></p> <p>El m\u00e1s utilizado actualmente es el dise\u00f1o en tres niveles (o en tres capas).</p> <p> Arquitectura de tres capas</p>"},{"location":"introduccion_web/#capas","title":"Capas","text":"<ol> <li> <p>Capa de presentaci\u00f3n: la que ve el usuario, presenta el sistema al usuario, le comunica la informaci\u00f3n y captura la informaci\u00f3n del usuario. Tambi\u00e9n es conocida como interfaz gr\u00e1fica. Esta capa se comunica \u00fanicamente con la capa de negocio. (Front-End)</p> </li> <li> <p>Capa de negocio: es donde residen los programas que se ejecutan, se reciben las peticiones del usuario y se env\u00edan las respuestas tras el proceso. Se denomina capa de negocio o de l\u00f3gica del negocio porque es aqu\u00ed donde se establecen todas las reglas que deben cumplirse. Esta capa se comunica con la capa de presentaci\u00f3n, para recibir las solicitudes y presentar los resultados, y con la capa de datos, para solicitar al gestor de base de datos almacenar o recuperar datos de \u00e9l. (Back-End)</p> </li> <li> <p>Capa de datos: es donde residen los datos y es la encargada de acceder a los mismos. Est\u00e1 formada por uno o m\u00e1s gestores de bases de datos que realizan todo el almacenamiento de datos, reciben solicitudes de almacenamiento o recuperaci\u00f3n de informaci\u00f3n desde la capa de negocio. (Back-End)</p> </li> </ol> <p>Todas estas capas pueden residir en un \u00fanico ordenador, si bien lo m\u00e1s usual es que haya una multitud de ordenadores en donde reside la capa de presentaci\u00f3n (son los clientes de la arquitectura cliente/servidor). Las capas de negocio y de datos pueden residir en el mismo ordenador.</p>"},{"location":"introduccion_web/#que-hacen-htmlcssjs","title":"\u00bfQu\u00e9 hacen HTML/CSS/JS?","text":""},{"location":"introduccion_web/#the-white-cat-danced","title":"The White Cat Danced","text":"<p>The</p> <p>White = CSS - adjetivos/estilo</p> <p>Cat = HTML - sustantivos/estructura</p> <p>Danced = JS - verbos/acciones</p>"},{"location":"introduccion_web/#html","title":"HTML","text":"<p>HTML, siglas en ingl\u00e9s de HyperText Markup Language (\u2018lenguaje de marcas de hipertexto\u2019), hace referencia al lenguaje de marcado para la elaboraci\u00f3n de p\u00e1ginas web. Es un est\u00e1ndar que sirve de referencia del software que conecta con la elaboraci\u00f3n de p\u00e1ginas web en sus diferentes versiones, define una estructura b\u00e1sica y un c\u00f3digo (denominado c\u00f3digo HTML) para la definici\u00f3n de contenido de una p\u00e1gina web, como texto, im\u00e1genes, videos, juegos, entre otros.</p> <p>HTML es un lenguaje de marcado que nos permite indicar la estructura de nuestro documento mediante etiquetas. Este lenguaje nos ofrece una gran adaptabilidad, una estructuraci\u00f3n l\u00f3gica y es f\u00e1cil de interpre\u00adtar tanto por humanos como por m\u00e1quinas. <sup>5</sup></p> <p>\"Hipertexto\" se refiere a enlaces que conectan p\u00e1ginas web entre s\u00ed, ya sea dentro de un \u00fanico sitio web o entre sitios web. Los enlaces son un aspecto fundamental de la Web. <sup>6</sup></p>"},{"location":"introduccion_web/#css-o-hojas-de-estilo-en-cascada","title":"CSS o Hojas de estilo en cascada","text":"<p>CSS (siglas en ingl\u00e9s de Cascading Style Sheets), en espa\u00f1ol \u00abHojas de estilo en cascada\u00bb, es un lenguaje de dise\u00f1o gr\u00e1fico para definir y crear la presentaci\u00f3n de un documento estructurado escrito en un lenguaje de marcado.\u200b Es muy usado para establecer el dise\u00f1o visual de los documentos web, e interfaces de usuario escritas en HTML.</p> <p>CSS est\u00e1 dise\u00f1ado principalmente para marcar la separaci\u00f3n del contenido del documento y la forma de presentaci\u00f3n de este, caracter\u00edsticas tales como las capas o layouts, los colores y las fuentes. </p> <p>La especificaci\u00f3n CSS describe un esquema prioritario para determinar qu\u00e9 reglas de estilo se aplican si m\u00e1s de una regla coincide para un elemento en particular. Estas reglas son aplicadas con un sistema llamado de cascada, de modo que las prioridades son calculadas y asignadas a las reglas, as\u00ed que los resultados son predecibles. <sup>7</sup></p>"},{"location":"introduccion_web/#js-javascript","title":"JS (JavaScript)","text":"<p>JavaScript (abreviado com\u00fanmente JS) es un lenguaje de programaci\u00f3n interpretado, dialecto del est\u00e1ndar ECMAScript. Se define como orientado a objetos,\u200b basado en prototipos, imperativo, d\u00e9bilmente tipado y din\u00e1mico.</p> <p>Se utiliza principalmente del lado del cliente, implementado como parte de un navegador web permitiendo mejoras en la interfaz de usuario y p\u00e1ginas web din\u00e1micas y JavaScript del lado del servidor (Server-side JavaScript o SSJS). Su uso en aplicaciones externas a la web, por ejemplo en documentos PDF, aplicaciones de escritorio (mayoritariamente widgets) es tambi\u00e9n significativo. </p> <p>Note</p> <p>Java y JavaScript tienen sem\u00e1nticas y prop\u00f3sitos diferentes. </p> <p>Todos los navegadores modernos interpretan el c\u00f3digo JavaScript integrado en las p\u00e1ginas web. Para interactuar con una p\u00e1gina web se provee al lenguaje JavaScript de una implementaci\u00f3n del Document Object Model (DOM). <sup>8</sup></p>"},{"location":"introduccion_web/#document-object-model-dom","title":"Document Object Model (DOM)","text":"<p>Document Object Model o DOM ('Modelo de Objetos del Documento' o 'Modelo en Objetos para la Representaci\u00f3n de Documentos') es esencialmente una interfaz de plataforma que proporciona un conjunto est\u00e1ndar de objetos para representar documentos HTML, XHTML y XML, un modelo est\u00e1ndar sobre c\u00f3mo pueden combinarse dichos objetos, y una interfaz est\u00e1ndar para acceder a ellos y manipularlos. A trav\u00e9s del DOM, los programas pueden acceder y modificar el contenido, estructura y estilo de los documentos HTML y XML, que es para lo que se dise\u00f1\u00f3 principalmente. <sup>9</sup></p>"},{"location":"introduccion_web/#referencias","title":"Referencias","text":"<ol> <li> <p>https://volaya.github.io/libro-sig/chapters/Cliente_servidor.html \u21a9</p> </li> <li> <p>https://thenounproject.com \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/Front_end_y_back_end \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/Programaci%C3%B3n_por_capas \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/HTML \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/HTML \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/Hoja_de_estilos_en_cascada \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/JavaScript \u21a9</p> </li> <li> <p>https://es.wikipedia.org/wiki/Document_Object_Model \u21a9</p> </li> </ol>"},{"location":"js/","title":"JS - JavaScript","text":"<p>JavaScript (JS) es un lenguaje de programaci\u00f3n ligero, interpretado, o compilado justo-a-tiempo (just-in-time) con funciones de primera clase. Si bien es m\u00e1s conocido como un lenguaje de scripting (secuencias de comandos) para p\u00e1ginas web, y es usado en muchos entornos fuera del navegador, tal como Node.js, Apache CouchDB y Adobe Acrobat. JavaScript es un lenguaje de programaci\u00f3n basada en prototipos, multiparadigma, de un solo hilo, din\u00e1mico, con soporte para programaci\u00f3n orientada a objetos, imperativa y declarativa (por ejemplo programaci\u00f3n funcional). <sup>1</sup></p> <p>El est\u00e1ndar para JavaScript es ECMAScript. En 2015, ECMA International publico la sexta versi\u00f3n principal de ECMAScript, que oficialmente se llama ECMAScript 2015, y que inicialmente se denomin\u00f3 ECMAScript 6 o ES6. Desde entonces, los est\u00e1ndares ECMAScript est\u00e1n en ciclos de lanzamiento anuales. </p> <p>Note</p> <ul> <li>ECMAScript y JavaScript, a efectos pr\u00e1cticos son lo mismo</li> <li>La versi\u00f3n tradicional de JavaScript soportada por todos los navegadores, incluso los de hace 10 0 15 a\u00f1os, es ECMAScript 5.</li> <li>El gran cambio en el lenguaje se produjo con ECMAScript 2015 (que alguna gente llama ES6 aunque no es su nombre oficial).</li> <li>Sus n\u00fameros de versi\u00f3n que no coinciden con su nombre oficial. Por ejemplo la versi\u00f3n 7 ES7 su nombre oficial es ECMAScript 2016.</li> </ul> <p>Warning</p> <p>No confundas JavaScript con el lenguaje de programaci\u00f3n Java. Son dos lenguajes de programaci\u00f3n que tienen sintaxis, sem\u00e1ntica y usos muy diferentes.</p>"},{"location":"js/#que-podemos-hacer-con-javascript-en-el-navegador","title":"\u00bfQu\u00e9 podemos hacer con JavaScript en el navegador?","text":"<ul> <li>Almacenar valores \u00fatiles dentro de variables.</li> <li>Operaciones sobre fragmentos de texto, n\u00fameros, etc.</li> <li>Ejecutar c\u00f3digo en respuesta a ciertos eventos que ocurren en una p\u00e1gina web. Por ejemplo cu\u00e1ndo se hace click sobre un bot\u00f3n.</li> <li>Usar las APIs del navegador. Principalmente la API del DOM (Document Object Model) que te permite manipular HTML y CSS, crear, eliminar y cambiar el HTML, aplicar din\u00e1micamente nuevos estilos a tu p\u00e1gina, etc.</li> <li>Usar APIS de terceros. Por ejemplo la API de Google Maps, la API de Twitter, etc.</li> </ul> <p>Las API (interfaces de programaci\u00f3n de aplicaciones) son conjuntos de bloques de construcci\u00f3n de c\u00f3digo listos para usar que permiten a un desarrollador implementar programas que de otro modo ser\u00edan dif\u00edciles o imposibles de implementar. Hacen lo mismo para la programaci\u00f3n que los kits de muebles prefabricados para la construcci\u00f3n de viviendas \u2014 es mucho m\u00e1s f\u00e1cil tomar paneles precortados y atornillarlos para hacer una estanter\u00eda que elaborar el dise\u00f1o t\u00fa mismo, que ir y encontrar la madera correcta, cortar todos los paneles del tama\u00f1o y la forma correctos, buscar los tornillos del tama\u00f1o correcto y luego j\u00fantalos para hacer una estanter\u00eda.</p> <p>Un uso muy com\u00fan de JavaScript es modificar din\u00e1micamente HTML y CSS para actualizar una interfaz de usuario, a trav\u00e9s de la API del modelo de objetos del documento. Hay que tener en cuenta que el c\u00f3digo de tus documentos web generalmente se cargan y ejecutan en el orden en que aparece en la p\u00e1gina. Si JavaScript se carga e intenta ejecutarse antes de que se hayan cargado el HTML y el CSS al que afecta, pueden producirse errores, igualmente se produciran errores si queremos llamar a una API de terceros antes de cargarla. </p> <p>Note</p> <p>Cuando el navegador encuentra un bloque de JavaScript, generalmente lo ejecuta en orden, de arriba a abajo. Esto significa que debes tener cuidado con el orden en el que colocas las cosas.</p>"},{"location":"js/#como-agregas-javascript-a-tu-pagina","title":"\u00bfC\u00f3mo agregas JavaScript a tu p\u00e1gina?","text":"<p>JavaScript se aplica a tu p\u00e1gina HTML de manera similar a CSS. Mientras que CSS usa elementos <code>&lt;link&gt;</code> para aplicar hojas de estilo externas y elementos <code>&lt;style&gt;</code> para aplicar hojas de estilo internas a HTML, JavaScript solo necesita el elemento <code>&lt;script&gt;</code> tanto para la carga de JavaScript externo como el interno.</p> <p>Otra diferencia con respecto al CSS que se debe agregar en el <code>&lt;head&gt;</code> es que los elementos <code>&lt;script&gt;</code> se pueden agregar en cualquier parte de nuestra p\u00e1gina ya sea dentro del <code>&lt;head&gt;</code> o del <code>&lt;body&gt;</code>. Por norma general se agrega en el head al final de todo justo antes de la etiqueta de cierre <code>&lt;/head&gt;</code>, esto es despues de las declaraciones de estilo y/o al final del elemento body despues de todo nuestro codigo html justo antes de la etiqueta de cierre <code>&lt;/body&gt;</code>.   </p>"},{"location":"js/#javascript-interno","title":"JavaScript interno","text":"<p>Es el m\u00e9todo de ejecutar scripts m\u00e1s b\u00e1sico. En este caso se incluyen las instrucciones de c\u00f3digo dentro de la etiqueta <code>&lt;script&gt;</code>. Cuando el navegador lee la p\u00e1gina y encuentra un script va interpretando las l\u00edneas de c\u00f3digo y las va ejecutando una despu\u00e9s de otra.</p> <p>Ejemplo </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejemplo ejecuci\u00f3n directa&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;P\u00e1gina con Javascript&lt;/h1&gt;\n    &lt;p&gt;Esta p\u00e1gina tiene un cuadro de di\u00e1logo, que se mostrar\u00e1 nada m\u00e1s el navegador la procese.&lt;/p&gt;\n\n    &lt;script&gt;\n      var personas = 4;\n      var importeEntradas = 9.50;\n      alert('Necesitas ' + personas * importeEntradas + ' euros para que entren todos al cine');\n    &lt;/script&gt;\n\n    &lt;p&gt;Cuando el usuario pulse aceptar en el cuadro de di\u00e1logo, el navegador mostrar\u00e1 la p\u00e1gina completa.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo vemos como la ejecuci\u00f3n del c\u00f3digo bloquea la cargar de la p\u00e1gina.</p>"},{"location":"js/#javascript-externo","title":"JavaScript externo","text":"<p>La ventaja de utilizar un archivo externo de JavaScript reside en la posibilidad de compartir ese archivo entre un gran n\u00famero de documentos. Cuando un documento es cargado, el navegador detecta la referencia al archivo JavaScript y lo carga como si fueran parte del documento.</p> <p>Un archivo externo de c\u00f3digo puede ser insertando en el documento con el elemento <code>&lt;script&gt;</code>, teniendo el valor \"text/javascript\" en el atributo type (esto no es obligatorio en versiones modernas pero su uso es muy com\u00fan), y el URI del archivo JavaScript en el atributo src.</p> <pre><code>&lt;script src=\"archivo_externo.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"js/#estategias-para-la-carga-de-scripts","title":"Estategias para la carga de scripts","text":"<p>Hay una serie de problemas relacionados con la carga de los scripts en el momento adecuado. Un problema com\u00fan es que todo el HTML de una p\u00e1gina se carga en el orden en que aparece. Si est\u00e1s utilizando JavaScript para manipular elementos en la p\u00e1gina, tu c\u00f3digo no funcionar\u00e1 si el JavaScript se carga y procesa antes que el HTML que est\u00e1s intentando haga algo.</p> <p>Como vimos en el ejemplo anterior la ejecuci\u00f3n del c\u00f3digo Js bloquea la cargar de la p\u00e1gina. Por ejemplo si ponemos el JavaScript en el head el c\u00f3digo se carga y se ejecuta en el encabezado del documento, antes de analizar el cuerpo HTML, por lo que podr\u00edamos causar un error si intentamos acceder a alg\u00fan elemento del HTML.</p> <p>Una soluci\u00f3n pasada de moda (aunque se suele seguir usando) a este problema sol\u00eda ser colocar tu elemento script justo en la parte inferior del cuerpo (por ejemplo, justo antes de la etiqueta ), para que se cargara despu\u00e9s de haber procesado todo el HTML. El problema con esta soluci\u00f3n es que la carga/procesamiento del script est\u00e1 completamente bloqueado hasta que se haya cargado el DOM HTML. En sitios muy grandes con mucho JavaScript, esto puede causar un importante problema de rendimiento y ralentizar tu sitio.</p> <p>En realidad, hay dos formas \"modernas\" que podemos usar para evitar el problema del bloqueo de script: async y defer</p> <p>Los scripts cargados con el atributo async (ve m\u00e1s abajo) descargar\u00e1n el script sin bloquear el renderizado de la p\u00e1gina y lo ejecutar\u00e1 tan pronto como el script se termine de descargar. No tienes garant\u00eda de que los scripts se ejecuten en un orden espec\u00edfico, solo que no detendr\u00e1n la visualizaci\u00f3n del resto de la p\u00e1gina. Es mejor usar async cuando los scripts de la p\u00e1gina se ejecutan de forma independiente y no dependen de ning\u00fan otro script de la p\u00e1gina.</p> <pre><code>&lt;script async src=\"js/vendor/jquery.js\"&gt;&lt;/script&gt;\n\n&lt;script async src=\"js/script2.js\"&gt;&lt;/script&gt;\n\n&lt;script async src=\"js/script3.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Usando async no puedes confiar en el orden en que se cargar\u00e1n los scripts. jquery.js se puede cargar antes o despu\u00e9s de script2.js y script3.js y si este es el caso, cualquier funci\u00f3n en esos scripts depende de jquery producir\u00e1 un error porque jquery no se ha cargado en el momento en que se ejecute el script.</p> <p>Los scripts cargados con el atributo defer se ejecutar\u00e1n en el orden en que aparecen en la p\u00e1gina y los ejecutar\u00e1 tan pronto como se descarguen el script y el contenido.</p> <pre><code>&lt;script defer src=\"js/vendor/jquery.js\"&gt;&lt;/script&gt;\n\n&lt;script defer src=\"js/script2.js\"&gt;&lt;/script&gt;\n\n&lt;script defer src=\"js/script3.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Todos los scripts con el atributo defer se cargar\u00e1n en el orden en que aparecen en la p\u00e1gina. Entonces, en el segundo ejemplo, podemos estar seguros de que jquery.js se cargar\u00e1 antes que script2.js y script3.js y que script2.js se cargar\u00e1 antes de script3.js. No se ejecutar\u00e1n hasta que se haya cargado todo el contenido de la p\u00e1gina, lo cual es \u00fatil si tus scripts dependen de que el DOM est\u00e9 en su lugar (por ejemplo, modifican uno o m\u00e1s elementos de la p\u00e1gina).</p> <ul> <li>async y defer indican al navegador que descargue los scripts en un hilo separado, mientras que el resto de la p\u00e1gina (el DOM, etc.) se descarga, por lo que los scripts no bloquean la carga de la p\u00e1gina.</li> <li>Si tus scripts se deben ejecutar inmediatamente y no tienen ninguna dependencia, utiliza async.</li> <li>Si tus scripts necesitan esperar a ser procesados y dependen de otros scripts y/o del DOM en su lugar, c\u00e1rgalos usando defer y coloca tus elementos <code>&lt;script&gt;</code> correspondientes en el orden que desees que el navegador los ejecute.</li> </ul>"},{"location":"js/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <p>A continuaci\u00f3n vamos a agregar un archivo JavaScript (de momento vac\u00edo - sin c\u00f3digo) a nuestra calculadora</p> <ol> <li> <p>Crear una carpeta llamada js dentro de la carpeta web-mgeo</p> </li> <li> <p>Crear un archivo llamado script.js dentro de la carpeta js</p> </li> <li> <p>Modificar el index.html para agregar una JavaScript externo a nuestra calculadora</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n    &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button class=\"btn-tranformar\"&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Guardar el archivo index.html</p> </li> </ol>"},{"location":"js/#comentarios","title":"Comentarios","text":"<p>Al igual que con HTML y CSS, es posible escribir comentarios en tu c\u00f3digo JavaScript que el navegador ignorar\u00e1 y que existen simplemente para proporcionar instrucciones a tus compa\u00f1eros desarrolladores sobre c\u00f3mo funciona el c\u00f3digo (y a ti, si regresas a tu c\u00f3digo despu\u00e9s de seis meses y no puedes recordar lo que hiciste). Los comentarios son muy \u00fatiles y deber\u00edas utilizarlos con frecuencia, especialmente para aplicaciones grandes. Hay dos tipos:</p> <ul> <li> <p>Un comentario de una sola l\u00ednea se escribe despu\u00e9s de una doble barra inclinada (//)</p> <pre><code>// soy un comentario\n</code></pre> </li> <li> <p>Un comentario de varias l\u00edneas se escribe entre las cadenas / y /</p> <pre><code>/*\nYo tambi\u00e9n soy\nun comentario\nde varias \nl\u00edneas\n*/\n</code></pre> </li> </ul>"},{"location":"js/#mayusculas-y-minusculas","title":"May\u00fasculas y min\u00fasculas","text":"<p>En Javascript se han de respetar las may\u00fasculas y las min\u00fasculas. Si nos equivocamos al utilizarlas el navegador responder\u00e1 con un mensaje de error, ya sea de sintaxis o de referencia indefinida. <sup>2</sup></p> <p>Por ejemplo, no es lo mismo la funci\u00f3n alert() que la funci\u00f3n Alert(). La primera muestra un texto en una caja de di\u00e1logo y la segunda (con la primera A may\u00fascula) simplemente no existe, a no ser que la definamos nosotros. Como se puede comprobar, para que la funci\u00f3n la reconozca JavaScript, se tiene que escribir toda en min\u00fascula. Otro claro ejemplo lo veremos cuando tratemos con variables, puesto que los nombres que damos a las variables tambi\u00e9n son sensibles a las may\u00fasculas y min\u00fasculas.</p>"},{"location":"js/#separacion-de-instrucciones","title":"Separaci\u00f3n de instrucciones","text":"<p>Las distintas instrucciones que contienen nuestros scripts se han de separar convenientemente para que el navegador no indique los correspondientes errores de sintaxis. Javascript tiene dos maneras de separar instrucciones. La primera es a trav\u00e9s del car\u00e1cter punto y coma (;) y la segunda es a trav\u00e9s de un salto de l\u00ednea.</p> <p>Por esta raz\u00f3n Las sentencias Javascript no necesitan acabar en punto y coma a no ser que coloquemos dos instrucciones en la misma l\u00ednea. No es una mala idea (principalmente cuando se est\u00e1 comenzando), acostumbrarse a utilizar el punto y coma despu\u00e9s de cada instrucci\u00f3n.</p>"},{"location":"js/#variables","title":"Variables","text":"<p>Una variable es un contenedor para un valor, como un n\u00famero que podr\u00edamos usar en una suma, o una cadena que podr\u00edamos usar como parte de una oraci\u00f3n. Pero una cosa especial acerca de las variables es que los valores que contienen pueden cambiar. Las variables pueden contener casi cualquier cosa, no solo cadenas y n\u00fameros. Las variables tambi\u00e9n pueden contener datos complejos e incluso funciones completas.</p> <p>Para usar una variable, primero debes crearla \u2014 precisamente, a esto lo llamamos declarar la variable. Para hacerlo, escribimos la palabra clave var o let seguida del nombre con el que deseas llamar a tu variable.</p> <pre><code>var miNombre;\nlet miEdad;\n</code></pre> <p>Una vez que hayas declarado una variable, la puedes iniciar con un valor. Para ello, escribe el nombre de la variable, seguido de un signo igual (=), seguido del valor que deseas darle.</p> <pre><code>miNombre = \"Pedro\";\nmiEdad = 39;\n</code></pre> <p>Puedes declarar e iniciar una variable al mismo tiempo. Esto es lo que har\u00e1s la mayor parte del tiempo, ya que es m\u00e1s r\u00e1pido que realizar las dos acciones en dos l\u00edneas separadas.</p> <pre><code>let miCoche = \"Toyota\";\n</code></pre> <p>JavaScript es un \"lenguaje tipado din\u00e1micamente\", lo cual significa que, a diferencia de otros lenguajes, no es necesario especificar qu\u00e9 tipo de datos contendr\u00e1 una variable (n\u00fameros, cadenas, matrices, etc.).</p> <p>Por ejemplo, si declaras una variable y le das un valor entre comillas, el navegador trata a la variable como una cadena (string), pero en cualquier momento se puede asignar otro valor.</p> <pre><code>let miVariable = \"Toyota\";\n...\n...\n...\nmiVariable = 400;\n</code></pre> <p>Se le llama \u00e1mbito de las variables al lugar donde estas est\u00e1n disponibles. Por lo general, cuando declaramos una variable hacemos que est\u00e9 disponible en el lugar donde se ha declarado. </p>"},{"location":"js/#variables-globales-y-locales","title":"Variables globales y locales","text":"<p>Las variables globales son las que est\u00e1n declaradas en el \u00e1mbito m\u00e1s amplio posible, que en Javascript es una p\u00e1gina web. Son accesibles desde cualquier lugar de la p\u00e1gina, es decir, desde el script donde se han declarado y todos los dem\u00e1s scripts de la p\u00e1gina.</p> <p>Tambi\u00e9n podremos declarar variables en lugares m\u00e1s acotados, como por ejemplo una funci\u00f3n. A estas variables les llamaremos locales. Cuando se declaren variables locales s\u00f3lo podremos acceder a ellas dentro del lugar donde se ha declarado, es decir, si la hab\u00edamos declarado en una funci\u00f3n solo podremos acceder a ella cuando estemos en esa funci\u00f3n. En general, son \u00e1mbitos locales cualquier lugar acotado por llaves.</p> <p>No hay problema en declarar una variable local con el mismo nombre que una global (aunque no es buena idea repetir nombres de variables), en este caso la variable global ser\u00e1 visible desde toda la p\u00e1gina, excepto en el \u00e1mbito donde est\u00e1 declarada la variable local ya que en este sitio ese nombre de variable est\u00e1 ocupado por la local.</p>"},{"location":"js/#diferencia-entre-var-y-let","title":"Diferencia entre var y let","text":"<p>Cuando se cre\u00f3 JavaScript por primera vez, solo exist\u00eda var que funciona bien en la mayor\u00eda de los casos, pero tiene algunos problemas en la forma en que trabaja. En versiones modernas de JavaScript ES6 se crea la nueva palabra clave let que funciona de manera algo diferente a var y soluciona los problemas que esta presenta.</p> <p>Algunas diferencias</p> <ul> <li>La elevaci\u00f3n (hoisting). Si usas var puedes acceder a la variable andes de declararla. Con let esto no funciona y da un error.</li> <li>Cuando usas var, puedes declarar la misma variable tantas veces como desees, pero con let no puedes.</li> <li>El scope (alcance) de la declaraci\u00f3n. Con var puedes terminar creando variables globales y reasignando valores sin darte cuenta.</li> </ul> <p>El uso de let mantendr\u00e1 tus funciones limpias y claras. Se dice que let es el nuevo var por lo tanto a partir de ES6 no hay razones para usar var.</p>"},{"location":"js/#constantes","title":"Constantes","text":"<p>Muchos lenguajes de programaci\u00f3n tienen el concepto de una constante \u2014 un valor que, una vez declarado no se puede cambiar. Hay muchas razones por las que querr\u00edas hacer esto, desde la seguridad (si un script de un tercero cambia dichos valores, podr\u00eda causar problemas) hasta la depuraci\u00f3n y la comprensi\u00f3n del c\u00f3digo (es m\u00e1s dif\u00edcil cambiar accidentalmente valores que no se deben cambiar y estropear cosas claras).</p> <p>En los primeros d\u00edas de JavaScript, las constantes no exist\u00edan. En JavaScript moderno ES6, tenemos la palabra clave const, que nos permite almacenar valores que nunca se pueden cambiar; funciona exactamente de la misma manera que let, excepto que a const no le puedes dar un nuevo valor.</p> <p>Si intentamos asignar un nuevo valor a una variable const nos dar\u00eda el siguiente error: \"Error Message : Uncaught TypeError: Assignment to constant variable.\".</p> <pre><code>const miCoche = \"Toyota\";\nmiCoche = \"Seat\";\n</code></pre> <p>Note</p> <p>Que no se puedan reasignar valores no significa que sean inmutables. Si el valor de una variable constante es \u00abalgo\u00bb mutable, como un array o un objeto, se pueden cambiar los valores de sus elementos.</p> <pre><code>const coches = [\"Toyota\", \"Seat\"];\ncoches[2] = \"Fiat\"; // es valido\ncoches = [\"Mercedes\", \"BMW\"]; // da error\n</code></pre>"},{"location":"js/#reglas-de-nombres-de-variables","title":"Reglas de nombres de variables","text":"<ul> <li>No pueden empezar con n\u00fameros</li> <li>No pueden contener espacios ni caracteres especiales (excepto <code>_</code>y <code>$</code>)</li> <li>Usar <code>camelCase</code> es una buena pr\u00e1ctica (<code>miVariableEjemplo</code>)</li> </ul>"},{"location":"js/#tipos-de-datos","title":"Tipos de datos","text":""},{"location":"js/#numerico","title":"Num\u00e9rico","text":"<p>S\u00f3lo existe un tipo de datos num\u00e9rico, al contrario que ocurre en la mayor\u00eda de los lenguajes m\u00e1s conocidos. Todos los n\u00fameros son por tanto del tipo num\u00e9rico, independientemente de la precisi\u00f3n que tengan o si son n\u00fameros reales o enteros.</p> <pre><code>let miEdad = 50;\n</code></pre>"},{"location":"js/#boleano","title":"Boleano","text":"<p>El tipo bolean, boolean en ingl\u00e9s, sirve para guardar un si o un no o dicho de otro modo, un verdadero o un falso. Se utiliza para realizar operaciones l\u00f3gicas, generalmente para realizar acciones si el contenido de una variable es verdadero (true) o falso (false). </p> <pre><code>let soyVerdadero = true;\n</code></pre>"},{"location":"js/#cadena-de-caracteres","title":"Cadena de caracteres","text":"<p>Javascript s\u00f3lo tiene un tipo de datos para guardar texto string y en el se pueden introducir cualquier n\u00famero de caracteres. Un texto puede estar compuesto de n\u00fameros, letras y cualquier otro tipo de caracteres y signos. Los textos se escriben entre comillas, dobles o simples.</p> <p>Todo lo que se coloca entre comillas es tratado como una cadena de caracteres independientemente de lo que coloquemos en el interior de las comillas. Por ejemplo, en una variable de texto podemos guardar n\u00fameros y en ese caso tenemos que tener en cuenta que las variables de tipo texto y las num\u00e9ricas no son la misma cosa y mientras que las de num\u00e9ricas nos sirven para hacer c\u00e1lculos matem\u00e1ticos las de texto no. </p> <pre><code>let soyTexto = \"500\";\nlet yoTambienTexto = \"Hola soy un texto compuesto por 41 letras\";\n</code></pre>"},{"location":"js/#caracteres-especiales","title":"Caracteres especiales","text":"<p>Hay una serie de caracteres especiales que sirven para expresar en una cadena de texto determinados controles como puede ser un salto de l\u00ednea o un tabulador. Estos son los caracteres de escape y se escriben con una notaci\u00f3n especial que comienza por una contra barra (una barra inclinada al rev\u00e9s de la normal '') y luego se coloca el c\u00f3digo del car\u00e1cter a mostrar.</p> <p>Un car\u00e1cter muy com\u00fan es el salto de l\u00ednea, que se consigue escribiendo \\n. Otro car\u00e1cter muy habitual es colocar unas comillas \\\", pues si colocamos unas comillas sin su car\u00e1cter especial nos cerrar\u00edan las comillas que colocamos para iniciar la cadena de caracteres.</p> <pre><code>let textoComillas = \"Hola soy un \\\"texto con comillas\\\"\";\nlet saltoDeLinea = \"Soy texto en \\n 2 l\u00edneas\";\n</code></pre>"},{"location":"js/#concatenar-cadenas","title":"Concatenar cadenas","text":"<p>Para unir cadenas en JavaScript el s\u00edmbolo de m\u00e1s (+), el mismo operador que usamos para sumar n\u00fameros, pero en este contexto hace algo diferente. Puedes unir texto con variables ya sean de texto o num\u00e9ricas.</p> <pre><code>let one = 'Hola, ';\nlet two = 'como est\u00e1s?';\nlet joined = one + two;\nlet miEdad = 45;\nlet miNombre = \"Carlos\";\nlet esMiEdad = \"Me llamo \" + miNombre + \" y tengo \" + miEdad + \" a\u00f1os.\";\nlet myFecha = \"19\" + \"67\"; //resultado \"1967\"\n</code></pre>"},{"location":"js/#plantillas-literales","title":"Plantillas literales","text":"<p>Las plantillas literales son cadenas literales que habilitan el uso de expresiones incrustadas. Con ellas, es posible utilizar cadenas de caracteres de m\u00e1s de una l\u00ednea, y funcionalidades de interpolaci\u00f3n de cadenas de caracteres. Las plantillas literales se delimitan con el caracter de comillas o tildes invertidas () (grave accent), en lugar de las comillas sencillas o dobles.</p> <p>Las plantillas de cadena de caracteres pueden contener marcadores, identificados por el signo de d\u00f3lar y envueltos en llaves (${expresi\u00f3n}). Las expresiones contenidas en los marcadores, junto con el texto entre ellas, son enviados como argumentos a una funci\u00f3n. La funci\u00f3n por defecto sencillamente concatena las partes para formar una \u00fanica cadena de caracteres. Para m\u00e1s informaci\u00f3n sobre plantilla etiquetadas, anidadas, etc. ver template_strings <sup>3</sup> </p> <pre><code>let expresion = \"literales\";\nlet cadena = `texto de cadena de caracteres ${expresion} texto adicional`;\n</code></pre> <p>Los caracteres de fin de l\u00ednea encontrados forman parte de la plantilla literal. Utilizando cadenas de caracteres normales, ser\u00eda necesario utilizar la siguiente sintaxes para producir cadenas de m\u00e1s de una l\u00ednea:</p> <pre><code>let multiLinea = 'l\u00ednea 1 de cadena de texto\\n' +\n'l\u00ednea 2 de cadena de texto');\n</code></pre> <p>Utilizando plantillas literales, se puede obtener el mismo resultado de la siguiente forma:</p> <pre><code>let multiLinea = `l\u00ednea 1 de la cadena de texto\nl\u00ednea 2 de la cadena de texto`);\n</code></pre> <p>Se pueden insetar expresiones dentro de cadenas de caracteres normales como por ejemplo:</p> <pre><code>let a = 5;\nlet b = 10;\nlet repuesta = `Quince es ${a + b} y\nno ${2 * a + b}.`;\n</code></pre> <p>En lineas generales es recomentable usar plantillas literales en lugar de la concatenaci\u00f3n de cadenas de caracteres.</p>"},{"location":"js/#operadores","title":"Operadores","text":"<p>Los operadores permiten manipular el valor de las variables, realizar operaciones matem\u00e1ticas con sus valores y comparar diferentes variables. De esta forma, los operadores permiten a los programas realizar c\u00e1lculos complejos y tomar decisiones l\u00f3gicas en funci\u00f3n de comparaciones y otros tipos de condiciones. <sup>3</sup></p> <p>JavaScript tiene una serie de operadores entre los m\u00e1s com\u00fanes est\u00e1n: operadores de asignaci\u00f3n, de comparaci\u00f3n, aritm\u00e9ticos y l\u00f3gicos. Se puede ver el listado completo de los operadores en https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators </p> <p>Al igual que en las mat\u00e9maaticas los operadores tiene un orden de preferencia a la hora de evaluar una expresi\u00f3n. <sup>4</sup></p>"},{"location":"js/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>Un operador de asignaci\u00f3n asigna un valor a su operando izquierdo bas\u00e1ndose en el valor de su operando derecho. El operador de asignaci\u00f3n simple es igual (=), que asigna el valor de su operando derecho a su operando izquierdo. Es decir, x = y asigna el valor de y a x.</p> <p>Ejemplos</p> <pre><code>var color = \"rojo\";\nlet count = 23;\n</code></pre>"},{"location":"js/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>Un operador de comparaci\u00f3n compara sus operandos y devuelve un valor l\u00f3gico en funci\u00f3n de si la comparaci\u00f3n es verdadera (true) o falsa (false).</p> <p>Ejemplos</p> <pre><code>var var1 = 3;\nvar var2 = 4;\n\n//igual\n3 == var1;\n\"3\" == var1;\n//no igual\nvar1 != 4\nvar2 != var1\n//estrictamente igual\n3 === var1\n//estricatamente no igual\nvar1 !== \"3\"\n//mayor que\nvar2 &gt; var1\n//menor igual que\nvar1 &lt;= var2\n</code></pre>"},{"location":"js/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Un operador aritm\u00e9tico toma valores num\u00e9ricos como sus operandos y devuelve un solo valor num\u00e9rico. Los operadores aritm\u00e9ticos est\u00e1ndar son suma (+), resta (-), multiplicaci\u00f3n (*) y divisi\u00f3n (/).</p> <p>Ejemplos</p> <pre><code>var var1 = 3;\nvar var2 = 4;\n\nvar1 + var2;\nvar2 * var1;\n</code></pre>"},{"location":"js/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos se utilizan normalmente con valores booleanos (l\u00f3gicos); cuando lo son, devuelven un valor booleano.</p> Operador Uso Descripci\u00f3n AND L\u00f3gico (&amp;&amp;) expr1 &amp;&amp; expr2 Devuelve expr1 si se puede convertir a false; de lo contrario, devuelve expr2. Por lo tanto, cuando se usa con valores booleanos, &amp;&amp; devuelve true si ambos operandos son true; de lo contrario, devuelve false. OR l\u00f3gico (||) expr1 || expr2 Devuelve expr1 si se puede convertir a true; de lo contrario, devuelve expr2. Por lo tanto, cuando se usa con valores booleanos, || devuelve true si alguno de los operandos es true; si ambos son falsos, devuelve false. NOT l\u00f3gico (!) !expr Devuelve false si su \u00fanico operando se puede convertir a true; de lo contrario, devuelve true. <p>Ejemplos</p> <pre><code>var a1 =  true &amp;&amp; true;     // t &amp;&amp; t devuelve true\nvar a2 =  true &amp;&amp; false;    // t &amp;&amp; f devuelve false\nvar o1 =  true || true;     // t || t devuelve true\nvar o2 = false || true;     // f || t devuelve true\nvar o3 = false || false;     // f || f devuelve false\nvar n1 = !true;  // !t devuelve false\nvar n2 = !false; // !f devuelve true\n</code></pre>"},{"location":"js/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript \u21a9</p> </li> <li> <p>https://desarrolloweb.com/articulos/507.php \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/template_strings \u21a9\u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Funciones \u21a9</p> </li> </ol>"},{"location":"js_almacenamiento/","title":"Almacenamiento en el Navegador","text":"<p>El almacenamiento en el navegador permite guardar datos localmente sin necesidad de usar un servidor. </p> <p>Existen tres opciones principales:</p> Tipo de Almacenamiento Caracter\u00edsticas Local Storage Guarda datos de forma permanente (hasta que se eliminen manualmente o con c\u00f3digo). Session Storage Guarda datos solo mientras la pesta\u00f1a est\u00e9 abierta. Cookies Peque\u00f1os archivos que pueden persistir y enviarse a un servidor."},{"location":"js_almacenamiento/#uso-de-local-storage","title":"Uso de Local Storage","text":"<p>Local Storage es \u00fatil para guardar informaci\u00f3n como preferencias del usuario o configuraci\u00f3n de una app.</p> <pre><code>// Guardar un dato\nlocalStorage.setItem(\"usuario\", \"Juan P\u00e9rez\");\n\n// Obtener el dato guardado\nlet usuario = localStorage.getItem(\"usuario\");\nconsole.log(usuario); // \"Juan P\u00e9rez\"\n\n// Eliminar un dato\nlocalStorage.removeItem(\"usuario\");\n\n// Limpiar todo el almacenamiento\nlocalStorage.clear();\n</code></pre> <p>Usamos <code>JSON.stringify()</code> para guardar objetos en Local Storage:</p> <pre><code>let usuario = {\n    nombre: \"Ana\",\n    edad: 25,\n    ciudad: \"Madrid\"\n};\n\nlocalStorage.setItem(\"datosUsuario\", JSON.stringify(usuario));\n</code></pre> <p>Ejemplo Pr\u00e1ctico: Guardar el Nombre del Usuario</p> <pre><code>&lt;input type=\"text\" id=\"nombre\" placeholder=\"Escribe tu nombre\"&gt;\n&lt;button onclick=\"guardarNombre()\"&gt;Guardar&lt;/button&gt;\n&lt;p id=\"mensaje\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nfunction guardarNombre() {\n    let nombre = document.getElementById(\"nombre\").value;\n    localStorage.setItem(\"nombreUsuario\", nombre);\n    document.getElementById(\"mensaje\").textContent = \"\u00a1Nombre guardado!\";\n}\n\n// Recuperar el nombre al cargar la p\u00e1gina\nwindow.addEventListener(\"load\", function() {\n    let nombreGuardado = localStorage.getItem(\"nombreUsuario\");\n    if (nombreGuardado) {\n        document.getElementById(\"mensaje\").textContent = \"Bienvenido de nuevo, \" + nombreGuardado;\n    }\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"js_almacenamiento/#uso-de-session-storage","title":"Uso de Session Storage","text":"<p>Session Storage funciona igual que Local Storage, pero los datos se eliminan al cerrar la pesta\u00f1a.</p> <pre><code>// Guardar en sessionStorage\nsessionStorage.setItem(\"tema\", \"oscuro\");\n\n// Obtener el dato\nlet tema = sessionStorage.getItem(\"tema\");\nconsole.log(tema); // \"oscuro\"\n\n// Eliminar el dato\nsessionStorage.removeItem(\"tema\");\n\n// Limpiar toda la sesi\u00f3n\nsessionStorage.clear();\n</code></pre>"},{"location":"js_almacenamiento/#uso-de-cookies-en-javascript","title":"Uso de Cookies en JavaScript","text":"<p>Las cookies son peque\u00f1os archivos que se pueden enviar al servidor.</p> <pre><code>// Crear una cookie con duraci\u00f3n de 7 d\u00edas\ndocument.cookie = \"usuario=Juan; expires=\" + new Date(2025, 0, 1).toUTCString();\n\n// Leer cookies\nconsole.log(document.cookie);\n</code></pre>"},{"location":"js_almacenamiento/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Contador de Visitas con Local Storage</p> <ol> <li>Contar cu\u00e1ntas veces el usuario ha visitado la p\u00e1gina. Mostrar el contador en la pagina</li> </ol> <p>Modo Oscuro con Local Storage</p> <ol> <li>Guardar la preferencia del usuario sobre el tema oscuro.</li> <li>Crear un boton para cambiar de modo (claro/oscuro)</li> <li>Cambiar el color de fondo y de la letra al cambiar de modo.</li> </ol> <p>Guardar y Cargar una Lista de Tareas</p> <ol> <li>Guardar una lista de tareas en localStorage y recuperarlas al recargar la p\u00e1gina.</li> <li>Crear un boton para agregar tareas a la lista</li> </ol>"},{"location":"js_arrays/","title":"Matrices o Arreglos","text":"<p>Las matrices Array son una manera ordenada de almacenar una lista de elementos de datos bajo un solo nombre de variable. Las matrices se describen como \"objetos tipo lista\"; b\u00e1sicamente son objetos individuales que contienen m\u00faltiples valores almacenados en una lista. Si no tuvieramos matrices, tendr\u00edamos que almacenar cada elemento en una variable separada.</p> <p>Las matrices se construyen con corchetes, que contiene una lista de elementos separdos por comas. Puedes almacenar cualquier elemento en una matriz \u2014 cadena, n\u00famero, objeto, otra variable, incluso otra matriz.</p> <ul> <li>Los arrays usan <code>[]</code>.</li> <li>Los elementos est\u00e1n separados por <code>,</code>.</li> </ul> <pre><code>let compra = [\"pan\", \"leche\", \"queso\", \"hummus\", \"noodles\"];\nlet sequence = [1, 1, 2, 3, 5, 8, 13];\nlet random = [\"tree\", 795, [0, 1, 2]];\nlet colores = [\"Rojo\", \"Verde\", \"Azul\"];\n</code></pre>"},{"location":"js_arrays/#acceder-y-modificar-elementos-de-la-matriz","title":"Acceder y modificar elementos de la matriz","text":"<p>Se puede acceder a elementos individuales en la matriz mediante la notaci\u00f3n de corchetes, indicando la posici\u00f3n del elemento que se quiera acceder</p> <p>Warning</p> <p>Las posiciones dentro de las matrices se comienzan a contar desde 0. El primer elementos de la matriz tiene la posici\u00f3n 0. </p> <pre><code>let compra = [\"pan\", \"leche\", \"jam\u00f3n\", \"hummus\", \"noodles\"];\nlet pan = compra[0];\nlet charcuteria = compra[2];\n</code></pre> <p>Puedes modificar un elemento en una matriz simplemente dando a un item de la matriz un nuevo valor.</p> <pre><code>let compra = [\"pan\", \"leche\", \"jam\u00f3n\", \"hummus\", \"noodles\"];\ncompra[0] = \"tomates\";\n</code></pre> <p>Ten en cuenta que una matriz dentro de otra matriz se llama matriz multidimensional. Puedes acceder a los elementos de una matriz que est\u00e9n dentro de otra, encadenando dos pares de corchetes.</p> <pre><code>let random = [\"tree\", 795, [0, 3, 2]];\nlet tres = random[2][1];\n</code></pre>"},{"location":"js_arrays/#agregar-elementos","title":"Agregar elementos","text":"<p>Veremos algunos m\u00e9todos bastante \u00fatiles relacionados con matrices</p> M\u00e9todo Descripci\u00f3n <code>push(valor)</code> Agrega al final <code>pop()</code> Elimina el \u00faltimo <code>unshift(valor)</code> Agrega al inicio <code>shift()</code> Elimina el primero <pre><code>let numeros = [1, 2, 3];\nnumeros.pop(); // [1, 2]\nnumeros.unshift(0); // [0, 1, 2]\n</code></pre> <p>Para a\u00f1adir o eliminar un elemento al final de una matriz podemos usar push() y pop() respectivamente.</p> <p>Ejemplo</p> <pre><code>let myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle'];\n//agregar un elemento\nmyArray.push('Cardiff');\nconsole.log(myArray);\n\n//eliminar el \u00faltimo elemento\nmyArray.pop();\nconsole.log(myArray);\n</code></pre> <p>Los m\u00e9todos unshift() y shift() funcionan exactamente igual de push() y pop(), respectivamente, excepto que funcionan al principio de la matriz, no al final.</p> <p>Ejemplo</p> <pre><code>let myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle'];\n//agregar un elemento\nmyArray.unshift('Cardiff');\nconsole.log(myArray);\n\n//eliminar el \u00faltimo elemento\nmyArray.shift();\nconsole.log(myArray);\n</code></pre> <p>Para var m\u00e1s metodos de agregar o eliminar elementos en una matriz ver https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array#operaciones_habituales</p>"},{"location":"js_arrays/#recorrer-un-array-con-for","title":"Recorrer un array con <code>for</code>","text":"<p><code>.length</code> devuelve el n\u00famero de elementos del array.</p> <pre><code>for (let i = 0; i &lt; colores.length; i++) {\n    console.log(colores[i]);\n}\n</code></pre>"},{"location":"js_arrays/#recorrer-un-array-con-foreach-mas-moderno","title":"Recorrer un array con <code>forEach</code> (m\u00e1s moderno)","text":"<p><code>forEach</code> aplica una funci\u00f3n a cada elemento del array.</p> <pre><code>colores.forEach(color =&gt; console.log(color));\n</code></pre>"},{"location":"js_arrays/#metodos-utiles-para-arrays","title":"M\u00e9todos \u00fatiles para Arrays","text":"<p>A menudo, nos encontramos en la necesidad de tomar un array y modificar cada elemento de la misma manera o filtrar los elementos de un array, etc. Para eso tenemos los siguientes m\u00e9todos. <sup>1</sup></p>"},{"location":"js_arrays/#map-crear-un-nuevo-array-modificando-los-valores","title":"<code>map()</code>: Crear un nuevo array modificando los valores","text":"<p><code>map()</code> devuelve un nuevo array con los valores transformado de cada uno de sus elementos.</p> <pre><code>let numeros = [1, 2, 3, 4];\nlet dobles = numeros.map(n =&gt; n * 2);\nconsole.log(dobles); // [2, 4, 6, 8]\n</code></pre>"},{"location":"js_arrays/#filter-filtrar-elementos-de-un-array","title":"<code>filter()</code>: Filtrar elementos de un array","text":"<p><code>filter()</code> devuelve un nuevo array con los elementos que cumplen la condici\u00f3n.</p> <pre><code>let mayoresDeDos = numeros.filter(n =&gt; n &gt; 2);\nconsole.log(mayoresDeDos); // [3, 4]\n</code></pre>"},{"location":"js_arrays/#reduce-reducir-un-array-a-un-solo-valor","title":"<code>reduce()</code>: Reducir un array a un solo valor","text":"<p><code>reduce()</code> toma un acumulador y lo actualiza con cada elemento.</p> <pre><code>let suma = numeros.reduce((acumulador, n) =&gt; acumulador + n, 0);\nconsole.log(suma); // 10\n</code></pre>"},{"location":"js_arrays/#find-buscar-un-elemento-en-el-array","title":"<code>find()</code>: Buscar un elemento en el array","text":"<p>Devuelve el primer elemento que cumple la condici\u00f3n.</p> <pre><code>let encontrado = numeros.find(n =&gt; n &gt; 2);\nconsole.log(encontrado); // 3\n</code></pre>"},{"location":"js_arrays/#ordenar-arrays-con-sort","title":"Ordenar arrays con <code>sort()</code>","text":"<pre><code>let numerosDesordenados = [3, 1, 4, 2, 6, 10];\nnumerosDesordenados.sort();\nconsole.log(numerosDesordenados); // [1, 10, 2, 3, 4, 6]\n</code></pre> <p>Info</p> <p>Para ordenar n\u00fameros correctamente, usa:</p> <pre><code>numerosDesordenados.sort((a, b) =&gt; a - b);\n</code></pre> <p>Para ver m\u00e1s m\u00e9todos de las matrices ir a https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array#m%C3%A9todos_de_instancia</p>"},{"location":"js_arrays/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Sumar todos los n\u00fameros de un array</p> <ol> <li>Crea una funci\u00f3n <code>sumarNumeros</code> que reciba un array de n\u00fameros y devuelva la suma de todos sus elementos.</li> </ol> <pre><code>console.log(sumarNumeros([1, 2, 3, 4])); // 10\nconsole.log(sumarNumeros([10, 20, 30])); // 60\n</code></pre> <p>Filtrar n\u00fameros mayores a un valor</p> <ol> <li>Escribe una funci\u00f3n que reciba un array de n\u00fameros y un n\u00famero limite. La funci\u00f3n debe devolver un nuevo array con los n\u00fameros mayores al limite.</li> </ol> <pre><code>console.log(filtrarMayores([10, 20, 5, 30, 40], 15)); // [20, 30, 40]\nconsole.log(filtrarMayores([1, 5, 8, 12], 6)); // [8, 12]\n</code></pre> <p>Gesti\u00f3n de Inventario de Productos</p> <p>Crea un sistema que permita realizar las siguientes tareas:</p> <ol> <li>Agregar un producto al inventario por su nombre.</li> <li>Eliminar un producto del inventario por su nombre.</li> <li>Mostrar todos los productos en inventario con su nombre.</li> <li>Filtrar productos que tengan un nombre cuya primera letra sea mayor a un valor dado.</li> <li>Ordenar el inventario por el nombre de los productos de menor a mayor.</li> </ol> <pre><code>// Pruebas de ejemplo:\nagregarProducto(\"Chaqueta\");\neliminarProducto(\"Gorra\");\nmostrarInventario();\nconsole.log(filtrarPorNombre(\"M\"));  // Productos con nombre mayor M\nordenarPorNombre();\n</code></pre>"},{"location":"js_arrays/#forof","title":"for...of","text":"<p>La sentencia for...of ejecuta un bloque de c\u00f3digo para cada elemento de un objeto iterable, como lo son: String, Array, TypedArray, Map, Set e iterables definidos por el usuario. La sintaxis de  for...of es espec\u00edfica para las colecciones, y no para todos los objetos. Esta Iterar\u00e1 sobre cualquiera de los elementos de una colecci\u00f3n. <sup>1</sup></p> <p>La sintaxis es la siguiente</p> <pre><code>for (variable of objeto) { \n    //sentencias a ejecutar en cada iteraci\u00f3n \n}\n</code></pre> <p>Ejemplo <pre><code>const iterable = [10, 20, 30];\n\nfor (const value of iterable) {\n  console.log(value);\n}\n</code></pre></p>"},{"location":"js_arrays/#referencias","title":"Referencias","text":"<ol> <li> <p>https://code.tutsplus.com/es/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209 \u21a9\u21a9</p> </li> </ol>"},{"location":"js_async/","title":"Programaci\u00f3n as\u00edncrona con JS","text":"<p>Normalmente, el c\u00f3digo de un programa determinado se ejecuta directamente, y solo sucede una cosa a la vez. Si una funci\u00f3n se basa en el resultado de otra funci\u00f3n, tiene que esperar a que la otra funci\u00f3n termine y regrese, y hasta que eso suceda, todo el programa se detiene esencialmente desde la perspectiva del usuario. </p> <p>Cuando una app web se ejecuta en el navegador y ejecuta un gran bloque de c\u00f3digo sin retornar el control al navegador, este mismo puede parecer que se congela. Esto es llamado blocking; el navegador es bloqueado para que el usuario no pueda seguir interactuando y realizando otras tareas hasta que la app web retorne el control sobre el procesador. <sup>1</sup></p> <p>JavaScript es tradicionalmente single-threaded. A\u00fan con m\u00faltiples procesadores, solo se puede ejecutar tareas en un solo hilo, llamado el hilo principal (main thread). Actualmente existen herramientas de JavaScript como los Web workers que permiten enviar parte del procesamiento a un hilo separado.</p> <p>Los web workers son muy \u00fatiles, pero tienen limitaciones. La mayor es que no pueden acceder al DOM \u2014 no se puede logar que un worker modifique directamente algo de la UI. El segundo problema es que a pesar de que el c\u00f3digo se ejecuta en un worker no es bloqueador, es simplemente sincr\u00f3nico. Esto se convierte en un problema cuando una funci\u00f3n depender en los resultados de m\u00faltiples procesos previos para funcionar.</p> <p>Para arreglar dichos problemas, los navegadores nos permiten ejecutar ciertas operaciones asincr\u00f3nicamente. Caracter\u00edsticas como las Promises permiten establecer la ejecuci\u00f3n de una operaci\u00f3n (por ejemplo, buscar una imagen desde un servidor), y luego esperar hasta que el resultado sea retornado antes de ejecutar otra operaci\u00f3n. Como la operaci\u00f3n est\u00e1 sucediendo en otro lugar, el hilo principal no est\u00e1 bloqueado mientras la operaci\u00f3n asincr\u00f3nica est\u00e1 siendo procesada.</p> <p>Podemos pensar en S\u00edncrono como algo bloqueante en donde toda la operaci\u00f3n se ejecuta de forma secuencial y por lo tanto, debemos esperar a que se complete para procesar el resultado. Por el contrario algo As\u00edncrono es no bloqueante donde la finalizaci\u00f3n de la operaci\u00f3n se se\u00f1ala m\u00e1s tarde lo que hace posible que la respuesta sea procesada en diferido. <sup>2</sup></p> <p>Ejemplo</p> <pre><code>function myGreeting() {\n\n   console.log(\"Antes\");\n\n  setTimeout(function() {\n    console.log('Hello, Mr. Universe!');\n  }, 2000);\n\n  console.log(\"Despues\");\n\n}\n\nmyGreeting();\n</code></pre>"},{"location":"js_async/#patrones-asincronos-en-js","title":"Patrones as\u00edncronos en JS","text":""},{"location":"js_async/#callbacks","title":"Callbacks","text":"<p>Los callbacks son la pieza clave para que Javascript pueda funcionar de forma as\u00edncrona. De hecho, el resto de patrones as\u00edncronos en Javascript est\u00e1 basado en callbacks de un modo u otro, simplemente cambian la sintaxis para trabajar con ellos m\u00e1s c\u00f3modamente.</p> <p>Un callback no es m\u00e1s que una funci\u00f3n que se pasa como argumento de otra funci\u00f3n, y que ser\u00e1 invocada para completar alg\u00fan tipo de acci\u00f3n. Generalmente la funci\u00f3n callback se ejecuta cuando la funci\u00f3n principal termina y normalmente hacemos uso de los valores que resultan de la funci\u00f3n principal.</p> <p>Ejemplo</p> <pre><code>setTimeout(function(){\n  console.log(\"Hola Mundo con retraso!\");\n}, 1000)\n\n//Tambi\u00e9n podemos pasar una variable que contenga una funci\u00f3n\nconst myCallback = () =&gt; console.log(\"Hola Mundo con retraso!\");\nsetTimeout(myCallback, 1000);\n</code></pre> <p>Otro ejemplo</p> <pre><code>function saludar(nombre, callback) {\n    const saludo = `Hola ${nombre}`;\n    callback(saludo); \n}\n\nsaludar(\"Pepe\", function(resultado){\n    console.log(resultado);\n});\n</code></pre>"},{"location":"js_async/#callback-hell","title":"Callback Hell","text":"<p>Los callbacks tambi\u00e9n pueden lanzar a su vez llamadas as\u00edncronas, asi que pueden anidarse tanto como se desee. Inconveniente, podemos acabar con c\u00f3digo como este:</p> <pre><code>setTimeout(function(){\n  console.log(\"Etapa 1 completada\");\n  setTimeout(function(){\n    console.log(\"Etapa 2 completada\");\n    setTimeout(function(){\n      console.log(\"Etapa 3 completada\");\n      setTimeout(function(){\n        console.log(\"Etapa 4 completada\");\n        // Podr\u00edamos continuar hasta el infinito...\n      }, 4000);\n    }, 3000);\n  }, 2000);\n}, 1000);\n</code></pre> <p>\u00c9ste es uno de los inconvenientes cl\u00e1sicos de los callbacks, adem\u00e1s de la indentaci\u00f3n, resta legibilidad, dificulta su mantenimiento y a\u00f1ade complejidad ciclom\u00e1tica. Al Callback Hell tambi\u00e9n se le conoce como Pyramid of Doom o Hadouken.</p> <p>Es muy com\u00fan caer en el Callback Hell cuando tenemos que usar valores calculados previamente por diferentes funciones as\u00edncronas.</p> <p>Ejemplo</p> <pre><code>function comprarTaquito(taquitosActuales, callback){\n  const taquitos = taquitosActuales + 1\n  callback(taquitos) \n}\n\nfunction comprarTresTaquitos(taquitosActuales, callback){\n  const taquitos = taquitosActuales + 3\n  callback(taquitos) \n}\n\nfunction comprarCincoTaquitos(taquitosActuales, callback){\n  const taquitos = taquitosActuales + 5\n  callback(taquitos) \n}\n\n// no tengo taquitos :( \nlet tacos = 0\n\n//compro 1 taco\ncomprarTaquito(tacos, function(primeraCompra){\n  console.log('taquitos: ' + primeraCompra)\n    //una vez compre mi primer taco, compro 3 m\u00e1s !\n    comprarTresTaquitos(primeraCompra, function(segundaCompra){\n      console.log('taquitos: ' + segundaCompra)\n        //una vez compre mi primer taco y 3 m\u00e1s, compro 5 extra :o\n        comprarCincoTaquitos(segundaCompra, function(tercerCompra){\n          console.log('taquitos: '+ tercerCompra)\n    })\n  })\n});\n</code></pre>"},{"location":"js_async/#promises","title":"Promises","text":"<p>Una promise (promesa) es un objeto que representa el resultado de una operaci\u00f3n as\u00edncrona, como comentamos anteriormente las promesas se basan en callbacks pero mejora la sintaxis. Cuando llamamos a una funci\u00f3n implementada con este patr\u00f3n, dicha funci\u00f3n nos retornar\u00e1 inmediatamente una promesa como garant\u00eda de que la operaci\u00f3n as\u00edncrona finalizara en alg\u00fan momento, ya sea con \u00e9xito o con un fallo. </p> <p>Una vez tenemos la promesa debemos usar un pas de callback: uno para el caso en el que todo va bien (resoluci\u00f3n de la promesa resolve) y otro para el caso en el que hay un fallo (rechazo de la promesa reject).</p> <p>Sintaxis</p> <pre><code>const promise = new Promise(function(resolve, reject) {\n  // codigo\n  if (/*si todo sale bien*/) {\n    resolve(\"Promesa resuelta\");\n  }\n  else {\n    reject(Error(\"Algo sali\u00f3 mal\"));\n  }\n});\n</code></pre> <p>Ejemplo</p> <pre><code>const promise = new Promise((resolve, reject) =&gt; {\n    const number = Math.floor(Math.random() * 10);\n\n    setTimeout(\n        () =&gt; number &gt; 5\n            ? resolve(number)\n            : reject(new Error('Menor a 5')),\n        1000\n    );\n});\n\npromise\n    .then(number =&gt; console.log(number))\n    .catch(error =&gt; console.error(error));\n</code></pre> <p>Una caracter\u00edstica interesante de las promesas es que pueden ser encadenadas. Esto es posible gracias a que la llamada .then() tambi\u00e9n devuelve una promesa. Esta nueva promesa devuelta ser\u00e1 resuelta con el valor que retorne el callback de resoluci\u00f3n original (el que hemos pasado al primer then()). Con esto evitamos el Callback Hell.</p> <p>Para evitar verbosidad, podemos encadenar las promesas de un modo mas corto, empleando el m\u00e9todo .catch(rejectCallback) para catpurar cualquier rechazo que ocurra en cualesquiera de las promesas encadenadas. Solo se necesita una \u00fanica sentencia catch() al final de una cadena de promesas.</p> <p>Ejemplo</p> <pre><code>fetch(document.URL.toString())\n  .then(result =&gt; {\n    console.log(result);\n    return \"Primer Then\"\n  })\n  .then((result) =&gt; console.log(`Fetch completado, p\u00e1gina mostrada despues de ${result}`))\n  .catch(e =&gt; console.log(`Error capturado:  ${e}`));\n</code></pre> <p>La plantilla t\u00edpica para crear funciones as\u00edncronas usando promesas es la siguiente:</p> <pre><code>const myAsyncFunction = () =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n\n    // Carga de la promesa (normalmente tareas as\u00edncronas).\n\n    if ( /* eval\u00faa condici\u00f3n */ ) {\n      resolve(`\u00c9xito!`);\n    } else {\n      reject(`Fallo!`);\n    }\n  });\n}\n</code></pre> <p>Ejemplo</p> <pre><code>const checkServer = (url) =&gt; {\n  return new Promise((resolve, reject) =&gt; { \n    fetch(url)\n      .then(response =&gt; resolve(`Estado del Servidor: ${response.status === 200 ? \"OK\" : \"NOT OK\"}`))\n      .catch(() =&gt; reject(`Error al localizar URL`));\n  });\n}\n\ncheckServer(document.URL.toString())\n  .then(result =&gt; console.log(result))\n  .catch(e =&gt; console.log(e));\n</code></pre> <p>Es muy frecuente consumir m\u00e1s de una promesa a la vez y habitualmente es deseable que se ejecuten en paralelo. Es decir, lanzamos varias tareas as\u00edncronas al mismo tiempo y recogemos sus correspondientes promesas a la espera de que una, o todas, se resuelvan. Para estos casos contamos con dos herramientas de composici\u00f3n de gran utilidad: Promise.all() y Promise.race().</p>"},{"location":"js_async/#promiseall","title":"Promise.all()","text":"<p>Promise.all() acepta un array de promesas y devuelve una nueva promesa cuya resoluci\u00f3n se completar\u00e1 con \u00e9xito una vez que todas las promesas originales se hayan resuelto satisfactoriamente, o en caso de fallo, ser\u00e1 rechazada en cuanto una de las promesas originales sea rechazada. Esta promesa compuesta, adem\u00e1s, nos devolver\u00e1 un array con los resultados de cada una de las promesas originales.</p> <p>Ejemplo </p> <pre><code>const p1 = Promise.resolve(3);\nconst p2 = 1337;\nconst p3 = new Promise((resolve, reject) =&gt; {\n  setTimeout(resolve, 100, \"foo\");\n});\n\nPromise.all([p1, p2, p3]).then(values =&gt; {\n  console.log(values); // [3, 1337, \"foo\"]\n}).catch(reason =&gt; {\n  console.log(reason)\n});\n</code></pre>"},{"location":"js_async/#promiserace","title":"Promise.race()","text":"<p>Promise.race() es similar con la diferencia ser\u00e1 resuelta tan pronto como se resuelva alguna de las promesas originales, ya sea con \u00e9xito o fallo. De ah\u00ed el nombre del m\u00e9todo, es una competici\u00f3n, la primera en terminar gana.</p> <p>Ejemplo</p> <pre><code>const p1 = new Promise( (resolve, reject) =&gt; {\n    setTimeout(resolve, 500, \"uno\");\n});\nconst p2 = new Promise( (resolve, reject) =&gt; {\n    setTimeout(resolve, 100, \"dos\");\n});\n\nPromise.race([p1, p2]).then( value =&gt; {\n  console.log(value); // \"dos\"\n  // Ambas se resuelven, pero la p2 antes.\n}).catch(reason =&gt; {\n  console.log(reason)\n});\n</code></pre>"},{"location":"js_async/#async-await","title":"Async / Await","text":"<p>Las promesas supusieron un gran salto en Javascript al introducir una mejora sustancial sobre los callbacks y un manejo m\u00e1s elegante de nuestras tareas as\u00edncronas. Sin embargo, tambi\u00e9n pueden llegar a ser tediosas. Las funciones async y la palabra clave await surgieron para simplificar el manejo de las promesas. Son puro az\u00facar para hacer las promesas m\u00e1s amigables, escribir c\u00f3digo m\u00e1s sencillo, reducir el anidamiento y mejorar la trazabilidad al depurar. Pero recuerda, async \\ await y las promesas son lo mismo en el fondo.</p> <p>La palabra clave async declara una funci\u00f3n como as\u00edncrona e indica que una promesa ser\u00e1 autom\u00e1ticamente devuelta, se a\u00f1ade a las funciones para decirles que devuelvan una promesa en lugar de devolver directamente el valor.</p> <p>Ejemplo</p> <pre><code>async function hello() { return \"Hello\" };\n\nhello().then((value) =&gt; console.log(value));\n</code></pre> <p>La ventaja real de las funciones asincronas aparecen cuando las combinas con la palabra clave await, el await debe ser usado siempre dentro de una funci\u00f3n declarada como async. </p> <p>await esperar\u00e1 autom\u00e1ticamente (de forma as\u00edncrona y no bloqueante) a que una promesa se resuelva. await puede ser puesta frente a cualquier funcion async basada en una promesa para pausar tu codigo en esa linea hasta que se cumpla la promesa, entonces retorna el valor resultante. Mientras tanto, otro c\u00f3digo que puede estar esperando una oportunidad para ejecutarse, puede hacerlo.</p> <p>Ejemplo</p> <pre><code>const checkServerWithSugar = async (url) =&gt; {\n  const response = await fetch(url);\n  return `Estado del Servidor: ${response.status === 200 ? \"OK\" : \"NOT OK\"}`;\n}\n\ncheckServerWithSugar(document.URL.toString())\n  .then(result =&gt; console.log(result));\n</code></pre>"},{"location":"js_async/#multiples-awaits","title":"Multiples awaits","text":"<p>Presta mucha atenci\u00f3n cuando trabajes con m\u00faltiples promesas con el operador await. La mayor\u00eda de las veces querr\u00e1s evitar apilar sentencias await, a menos que una dependa de la otra. Apilar m\u00faltiples await es equivalente a lanzar una promesa cuando la anterior haya sido resuelta. Es decir, ejecutar las promesas encadenadamente, de forma secuencial. Y esto no siempre es lo deseable.</p> <p>Ejemplo de llamadas en serie (el segundo await tiene que esperar a que termine el primero)</p> <pre><code>const delay = time =&gt; new Promise(resolveCallback =&gt; setTimeout(resolveCallback, time));\n\nasync function wait() {\n  await delay(500);\n  await delay(500);\n  return \"Ha transcurrido, como m\u00ednimo, 1 segundo.\";\n};\n\nwait().then(result =&gt; console.log(result));\n</code></pre> <p>Sin embargo, podemos hacer una espera en paralelo del siguiente modo:</p> <pre><code>const delay = time =&gt; new Promise(resolveCallback =&gt; setTimeout(resolveCallback, time));\n\nasync function wait() {\n  const d1 = delay(500);\n  const d2 = delay(500);\n  await d1;\n  await d2;\n  return \"Ha transcurrido, como m\u00ednimo, 500ms.\";\n};\n\nwait().then(result =&gt; console.log(result));\n</code></pre> <p>Ejemplo de usar el valor de un await en la siguente funci\u00f3n</p> <pre><code>const p1 = function() {\n  return new Promise( (resolve, reject) =&gt; {\n    setTimeout(resolve, 500, \"uno\");\n  });\n}\n\nconst p2 = function (texto) {\n  return new Promise( (resolve, reject) =&gt; {\n    setTimeout(resolve, 100, `${texto}, dos`);\n  });\n}\n\nasync function contarEnTexto() {\n  const t1 = await p1();\n  const t2 = await p2(t1);\n  return t2;\n}\n\ncontarEnTexto().then(result =&gt; console.log(result));\n</code></pre> <p>Podemos ver un ejemplo de como usarlo en una clase https://developer.mozilla.org/es/docs/Learn/JavaScript/Asynchronous/Async_await#asyncawait_class_methods</p>"},{"location":"js_async/#manejo-de-errores","title":"Manejo de errores","text":""},{"location":"js_async/#try-catch","title":"TRY ... CATCH","text":"<p>La declaraci\u00f3n try...catch se\u00f1ala un bloque de instrucciones a intentar (try), y especifica una respuesta si se produce una excepci\u00f3n (catch).</p> <p>La sentencia try consiste en un bloque try que contiene una o m\u00e1s sentencias. Las llaves {} se deben utilizar siempre, incluso para una bloques de una sola sentencia. Al menos un bloque catch o un bloque finally debe estar presente. Esto nos da tres formas posibles para la sentencia try:</p> <pre><code>try...catch\ntry...finally\ntry...catch...finally\n</code></pre> <p>Un bloque catch contiene sentencias que especifican que hacer si una excepci\u00f3n es lanzada en el bloque try. Si cualquier sentencia dentro del bloque try (o en una funcion llamada desde dentro del bloque try) lanza una excepci\u00f3n, el control cambia inmediatamente al bloque catch . Si no se lanza ninguna excepcion en el bloque try, el bloque catch se omite.</p> <p>La bloque finally se ejecuta despues del bloque try y el/los bloque(s) catch hayan finalizado su ejecuci\u00f3n. \u00c9ste bloque siempre se ejecuta, independientemente de si una excepci\u00f3n fue lanzada o capturada</p> <p>Ejemplo</p> <pre><code>try {\n   throw \"myException\"; // genera una excepci\u00f3n\n}\ncatch (e) {\n   // sentencias para manejar cualquier excepci\u00f3n\n   logMyErrors(e); // pasa el objeto de la excepci\u00f3n al manejador de errores\n}\n</code></pre> <p>Si una promesa gestionada por await es rechazada o un error se dispara dentro de la funci\u00f3n declarada como async, la promesa que autom\u00e1ticamente devuelve la funci\u00f3n async tambi\u00e9n ser\u00e1 rechazada. En este caso, podemos encadenar un .catch() para notificar el error</p> <pre><code>checkServerWithSugar(document.URL.toString())\n  .then(result =&gt; console.log(result))\n  .catch(e =&gt; console.log(`Error Capturado Fuera de la funci\u00f3n async: ${e}`));\n</code></pre> <p>Pero si necesit\u00e1ramos gestionar estos erroes internamente, en la propia funci\u00f3n async, deberemos envolver nuestro c\u00f3digo con un try / catch del siguiente modo</p> <pre><code>const checkServerWithSugar = async (url) =&gt; {\n  try {\n    const response = await fetch(url);\n    return `Estado del servidor: ${response.status === 200 ? \"OK\" : \"NOT OK\"}`;\n  } catch (e) {\n    throw `Manejo intero del error. Error original: ${e}`;\n  }\n}\n\ncheckServerWithSugar(document.URL.toString())\n  .then(result =&gt; console.log(result))\n  .catch(e =&gt; console.log(`Error Capturado Fuera de la funci\u00f3n async: ${e}`));\n</code></pre>"},{"location":"js_async/#fetch","title":"fetch","text":"<p>En algunos ejemplos anteriores hemos usado la funci\u00f3n fetch. Ahora veremos con m\u00e1s detalles para que se usa y su funcionamiento.</p> <p>La API Fetch proporciona una interfaz para recuperar recursos (incluso a trav\u00e9s de la red). Resultar\u00e1 familiar a cualquiera que haya usado XMLHttpRequest, pero la nueva API ofrece un conjunto de caracter\u00edsticas m\u00e1s potente y flexible. <sup>4</sup></p> <p>Una de las caracter\u00edsticas m\u00e1s importantes del API fetch es que utiliza promesas, es decir, devuelve un objeto con dos m\u00e9todos, uno then() y otro catch() a la que pasaremos una funci\u00f3n que ser\u00e1 invocada cuando se obtenga la respuesta o se produzca un error. <sup>5</sup></p> <p>Note</p> <p>Aqu\u00ed hay que aclarar un punto con los errores: si se devuelve un c\u00f3digo HTTP correspondiente a un error no se ejecutar\u00e1 el catch(), ya que se ha obtenido una respuesta v\u00e1lida, por lo que se ejecutar\u00e1 el then(). S\u00f3lo si hay un error de red o de otro tipo se ejecutar\u00e1 el catch().</p> <p>Otro aspecto importante que hay que comprender es que para obtener el body o cuerpo del mensaje devuelto por el servidor deberemos obtener una segunda promesa por medio de los m\u00e9todos del objeto Response. Por ello ser\u00e1 muy habitual ver dos promesas encadenadas, una para el fetch() y otra con el retorno del m\u00e9todo que utilicemos para obtener el body.</p> <p>Ejemplo</p> <pre><code>fetch('https://httpbin.org/ip')\n    .then(function(response) {\n        return response.text();\n    })\n    .then(function(data) {\n        console.log('data = ', data);\n    })\n    .catch(function(err) {\n        console.error(err);\n    });\n</code></pre>"},{"location":"js_async/#opciones-de-la-peticion","title":"Opciones de la petici\u00f3n","text":"<p>A la funci\u00f3n fetch(url, options) se le pasa por par\u00e1metro la url de la petici\u00f3n y, de forma opcional, un objeto options con opciones de la petici\u00f3n HTTP. En este objeto de opciones podemos definir varios detalles:</p> <p>Los valores m\u00e1s usados son:</p> <ul> <li>method: M\u00e9todo HTTP de la petici\u00f3n. Por defecto, GET. Otras opciones: HEAD, POST, etc.</li> <li>body: Cuerpo de la petici\u00f3n HTTP. Puede ser de varios tipos: String, FormData, Blob, etc.</li> <li>headers: Cabeceras HTTP. Por defecto, {}.</li> <li>credentials: Modo de credenciales. Por defecto, omit. Otras opciones: same-origin e include.</li> </ul> <p>Otros valores que podemos definir son:</p> <ul> <li>mode: modo del la solicitud: \u2018cors\u2019, \u2018no-cors\u2019, \u2018same-origin\u2019, \u2018navigate\u2019.</li> <li>cache: forma de utilizaci\u00f3n de la cach\u00e9: \u2018default\u2019, \u2018no-store\u2019, \u2018reload\u2019, \u2018no-cache\u2019, \u2018force-cache\u2019, \u2018only-if-cached\u2019.</li> <li>redirect: forma de gestionar la redirecci\u00f3n: \u2018follow\u2019, \u2018error\u2019, \u2018manual\u2019.</li> <li>referrer: valor utilizado como referrer: \u2018client\u2019, \u2018no-referrer\u2019 una URL.</li> <li>referrerPolicy: especifica el valor de la cabecera referer: \u2018no-referrer\u2019, \u2018no-referrer-when-downgrade\u2019, \u2018origin\u2019, \u2018origin-when-cross-origin\u2019, \u2018unsafe-url\u2019.</li> <li>integrity: valor de integridad de la solicitud.</li> </ul> <p>Ejemplo de enviar detos en formato JSON</p> <pre><code>fetch('https://httpbin.org/post',{\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\"a\": 1, \"b\": 2}),\n        cache: 'no-cache'\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('data = ', data);\n    })\n    .catch(function(err) {\n        console.error(err);\n    });\n</code></pre>"},{"location":"js_async/#propieadades-de-la-respuesta","title":"Propieadades de la respuesta","text":"<p>En la funci\u00f3n que pasamos a then() vamos a recibir un objeto Response. Este objeto contiene la respuesta que hace el servidor y dispone de una serie de propiedades con los valores de esa respuesta y m\u00e9todos que pueden resultarnos \u00fatiles al implementar nuestro c\u00f3digo.</p> <p>Por el lado de las propiedades, tenemos las siguientes:</p> <ul> <li>status: C\u00f3digo HTTP de la respuesta (100-599).</li> <li>statusText: Texto representativo del c\u00f3digo HTTP anterior.</li> <li>ok: Devuelve true si el c\u00f3digo HTTP es 200 (o empieza por 2).</li> <li>headers: Cabeceras de la respuesta.</li> <li>url: URL de la petici\u00f3n HTTP.</li> </ul> <p>Por el lado de los m\u00e9todos, tenemos los siguientes:</p> <ul> <li>response.text(): Devuelve el contenido en formato texto</li> <li>response.json(): Devuelve el contenido como objeto Javascript</li> <li>response.arrayBuffer(): Devuelve el contenido como ArrayBuffer</li> <li>response.blob(): Devuelve el contenido como valor que podemos manejar con URL.createObjectURL()</li> <li>response.formData(): Devuelve el contenido como FormData</li> <li>response.clone(): Crea y devuelve un clon de la instancia en cuesti\u00f3n.</li> </ul> <p>Note</p> <p>Una caracter\u00edstica que tenemos que tener en cuenta es que s\u00f3lo podemos hacer una obtenci\u00f3n de body, tras la cual ya no podemos volver solicitar otra conversi\u00f3n. Para resolver esta situaci\u00f3n el objeto Response tiene el m\u00e9todo clone() que nos permite duplicar el objeto y hacer m\u00faltiples gestiones de body. <sup>6</sup></p> <p>Ejemplo</p> <pre><code>fetch('https://httpbin.org/ip')\n    .then(function(response) {\n        console.log('response.body =', response.body);\n        console.log('response.bodyUsed =', response.bodyUsed);\n        console.log('response.headers =', response.headers);\n        console.log('response.ok =', response.ok);\n        console.log('response.status =', response.status);\n        console.log('response.statusText =', response.statusText);\n        console.log('response.type =', response.type);\n        console.log('response.url =', response.url);\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('data = ', data);\n    })\n    .catch(function(err) {\n        console.error(err);\n    });\n</code></pre> <p>Es muy com\u00fan usar las arrow function con el fetch</p> <p>Ejemplo</p> <pre><code>fetch('https://httpbin.org/ip')\n    .then(response =&gt; response.text())\n    .then(data =&gt; {\n        /** Procesar los datos **/\n        console.log('data = ', data);\n    })\n    .catch(err =&gt; {\n        console.error(err);\n    });\n</code></pre> <p>Tambi\u00e9n lo podemos usar con async/await</p> <p>Ejemplo</p> <pre><code>const request = async (url) =&gt; {\n  const response = await fetch(url);\n  if (!response.ok)\n    throw new Error(\"WARN\", response.status);\n  const data = await response.json();\n  return data;\n}\n\nrequest('https://httpbin.org/ip').then(data =&gt; {\n    /** Procesar los datos **/\n    console.log(data);\n}).catch(err =&gt; {\n    console.error(err);\n});\n</code></pre>"},{"location":"js_async/#ejemplo-practico-mostrar-usuarios-de-una-api","title":"Ejemplo pr\u00e1ctico. Mostrar Usuarios de una API","text":"<p>Objetivos:</p> <ul> <li>Consumir datos desde la API Random User Generato</li> <li>Mostrar los usuarios en la p\u00e1gina con template literals (string con backticks)</li> <li>Renderizar los datos din\u00e1micamente en HTML</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Usuarios de API&lt;/title&gt;\n  &lt;style&gt;\n    body { font-family: Arial, sans-serif; }\n    #usuarios {\n      display: flex;\n    }\n    .usuario { \n      border: 1px solid #ddd; \n      padding: 10px; \n      margin: 10px; \n      border-radius: 5px;\n      background-color: #f9f9f9;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Lista de Usuarios&lt;/h1&gt;\n  &lt;button id=\"cargar\"&gt;Cargar Usuarios&lt;/button&gt;\n  &lt;div id=\"usuarios\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n  document.getElementById(\"cargar\").addEventListener(\"click\", cargarUsuarios);\n\n  async function cargarUsuarios() {\n    let respuesta = await fetch(\"https://randomuser.me/api/?results=5\");\n    let datos = await respuesta.json();\n    mostrarUsuarios(datos);\n  }\n\n  function mostrarUsuarios(usuarios) {\n    let contenedor = document.getElementById(\"usuarios\");\n    contenedor.innerHTML = \"\"; // Limpiar contenido anterior\n\n    usuarios.results.forEach(usuario =&gt; {\n      let htmlUsuario = `\n        &lt;div style=\"border: 1px solid #ddd; padding: 10px; width: 250px; text-align: center;\"&gt;\n          &lt;img src=\"${usuario.picture.large}\" alt=\"Foto de ${usuario.name.first}\" style=\"border-radius: 50%; width: 100px;\"&gt;\n          &lt;h3&gt;${usuario.name.first} ${usuario.name.last}&lt;/h3&gt;\n          &lt;p&gt;&lt;strong&gt;Edad:&lt;/strong&gt; ${usuario.dob.age}&lt;/p&gt;\n          &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; ${usuario.email}&lt;/p&gt;\n          &lt;p&gt;&lt;strong&gt;Pa\u00eds:&lt;/strong&gt; ${usuario.location.country}&lt;/p&gt;\n        &lt;/div&gt;\n      `;\n      contenedor.innerHTML += htmlUsuario; // Agregar cada usuario al contenedor\n    });\n  }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"js_async/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Obtener datos de una API con <code>fetch</code></p> <ol> <li> <p>Usa fetch para obtener informaci\u00f3n de la API p\u00fablica JSONPlaceholder y mostrar los t\u00edtulos de los primeros 5 posts.</p> <p>URL de la API <code>https://jsonplaceholder.typicode.com/posts</code>. Usar fetch dentro de async/await.</p> <p>Aqui teneis muchas APIs gratuitas para practicar https://publicapis.dev/</p> </li> </ol> <p>Simulaci\u00f3n de compra en l\u00ednea</p> <p>Crea una funci\u00f3n realizarCompra() que reciba un producto y un precio, y simule una compra en l\u00ednea con los siguientes pasos:</p> <ol> <li>Esperar 2 segundos simulando el procesamiento del pago.</li> <li>Si el precio es mayor a 1000, rechazar la compra con un mensaje de error.</li> <li>Si el pago es exitoso, mostrar \"Compra de [producto] realizada por $[precio]\".</li> </ol> <pre><code>// Pruebas\nrealizarCompra(\"Laptop\", 1200);  // Error: El precio supera el l\u00edmite permitido.\nrealizarCompra(\"Teclado\", 50);    // Compra de Teclado realizada por $50\n</code></pre> <p>DragonBall</p> <ol> <li>Crea una funcion que llame a la API de DragonBall para obtener el listado de personajes. Documentacion de la API. https://web.dragonball-api.com/documentation</li> <li> <p>Modifica tu pagina web para que muestre el listado de personajes.</p> <p>Ejemplo: (mantener el estilo creado en el ejercicio de CSS)  </p> </li> </ol>"},{"location":"js_async/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Learn/JavaScript/Asynchronous \u21a9</p> </li> <li> <p>https://lemoncode.net/lemoncode-blog/2018/1/29/javascript-asincrono \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Learn/JavaScript/Asynchronous/Async_await \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch \u21a9</p> </li> <li> <p>https://www.todojs.com/api-fetch-el-nuevo-estandar-que-permite-hacer-llamadas-http/ \u21a9</p> </li> <li> <p>https://lenguajejs.com/javascript/peticiones-http/fetch/ \u21a9</p> </li> </ol>"},{"location":"js_clases/","title":"Clases","text":"<p>Las clases de JavaScript proveen una sintaxis mucho m\u00e1s clara y simple para crear objetos y lidiar con la herencia. Las clases son \"funciones especiales\".</p>"},{"location":"js_clases/#declaracion-de-clases","title":"Declaraci\u00f3n de clases","text":"<p>Una manera de definir una clase es mediante una declaraci\u00f3n de clase. Para declarar una clase, se utiliza la palabra reservada class y un nombre para la clase</p> <p>Ejemplo</p> <pre><code>class Rectangulo {\n  constructor(alto, ancho) {\n    this.alto = alto;\n    this.ancho = ancho;\n  }\n}\n</code></pre> <p>Warning</p> <p>Una importante diferencia entre las declaraciones de funciones y las declaraciones de clases es que las declaraciones de funciones son alojadas y las declaraciones de clases no lo son. En primer lugar necesitas declarar tu clase y luego acceder a ella, de otro modo el c\u00f3digo arrojar\u00e1 un error.</p> <p>Otra manera de definir una clase es mediante las expresiones de clase que pueden ser nombradas o an\u00f3nimas.</p> <p>Ejemplo</p> <pre><code>// Anonima\nlet Rectangulo = class {\n  constructor(alto, ancho) {\n    this.alto = alto;\n    this.ancho = ancho;\n  }\n};\n\nconsole.log(Rectangulo.name);\n// output: \"Rectangulo\"\n\n// Nombrada\nlet Rectangulo = class Rectangulo2 {\n  constructor(alto, ancho) {\n    this.alto = alto;\n    this.ancho = ancho;\n  }\n};\nconsole.log(Rectangulo.name);\n// output: \"Rectangulo2\"\n</code></pre>"},{"location":"js_clases/#cuerpo-de-la-clase-y-definicion-de-metodos","title":"Cuerpo de la clase y definici\u00f3n de m\u00e9todos","text":"<p>El contenido de una clase es la parte que se encuentra entre las llaves {}. Este es el lugar se definen los miembros de clase, como los m\u00e9todos o constructores.</p> <p>El m\u00e9todo constructor es un m\u00e9todo especial para crear e inicializar un objeto creado con una clase. Solo puede haber un m\u00e9todo especial con el nombre \"constructor\" en una clase. Un constructor puede usar la palabra reservada super para llamar al constructor de una superclase.</p> <p>Ejemplo </p> <pre><code>class Rectangulo {\n  constructor (alto, ancho) {\n    this.alto = alto;\n    this.ancho = ancho;\n  }\n  // Getter\n  get area() {\n     return this.calcArea();\n   }\n  // M\u00e9todo\n  calcArea () {\n    return this.alto * this.ancho;\n  }\n}\n\nconst cuadrado = new Rectangulo(10, 10);\n\nconsole.log(cuadrado.area); // 100\nconsole.log(cuadrado.calcArea()); // 100\n</code></pre> <p>La palabra clave static define un m\u00e9todo est\u00e1tico para una clase. Los m\u00e9todos est\u00e1ticos son llamados sin instanciar su clase y no pueden ser llamados mediante una instancia de clase. Los m\u00e9todos est\u00e1ticos son a menudo usados para crear funciones de utilidad para una aplicaci\u00f3n.</p> <p>Ejemplo</p> <pre><code>class Calcula {\n\n    static suma (a, b) {\n        return a + b;\n    }\n\n    static resta (a, b) {\n        return a - b;\n    }\n}\n\nconsole.log (Calcula.suma(2, 3));\nconsole.log (Calcula.resta(20, 7));\n</code></pre>"},{"location":"js_clases/#subclases","title":"Subclases","text":"<p>La palabra clave extends es usada en declaraciones de clase o expresiones de clase para crear una clase hija.</p> <p>Ejemplo</p> <pre><code>class Animal {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  hablar() {\n    console.log(this.nombre + ' hace un ruido.');\n  }\n}\n\nclass Perro extends Animal {\n  hablar() {\n    console.log(this.nombre + ' ladra.');\n  }\n}\n\nconst p = new Perro('Mitzie');\np.hablar();\n</code></pre>"},{"location":"js_clases/#superclases","title":"S\u00faperclases","text":"<p>La palabra clave super es usada para llamar funciones del objeto padre.</p> <p>Ejemplo</p> <pre><code>class Animal {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  hablar() {\n    console.log(this.nombre + ' hace un ruido.');\n  }\n}\n\nclass Perro extends Animal {\n  hablar() {\n    super.hablar();\n    console.log(this.nombre + ' ladra.');\n  }\n}\n\nconst p = new Perro('Mitzie');\np.hablar();\n</code></pre>"},{"location":"js_dom/","title":"API del DOM","text":""},{"location":"js_dom/#que-es-el-dom","title":"\u00bfQu\u00e9 es el DOM?","text":"<p>El DOM (Document Object Model) es la estructura en forma de \u00e1rbol que representa una p\u00e1gina web en el navegador. Cada etiqueta HTML es un nodo dentro del DOM y podemos manipularlo con JavaScript para modificar el contenido, el estilo o la estructura de la p\u00e1gina.</p> <p>El modelo de objeto de documento (DOM) es una interfaz de programaci\u00f3n para los documentos HTML y XML. Facilita una representaci\u00f3n estructurada del documento y define de qu\u00e9 manera los programas pueden acceder, al fin de modificar, tanto su estructura, estilo y contenido. El DOM da una representaci\u00f3n del documento como un grupo de nodos y objetos estructurados que tienen propiedades y m\u00e9todos. Esencialmente, conecta las p\u00e1ginas web a scripts o lenguajes de programaci\u00f3n. <sup>1</sup></p> <p>El DOM no es un lenguaje de programaci\u00f3n pero sin \u00e9l, el lenguaje JavaScript no tiene ning\u00fan modelo o noci\u00f3n de las p\u00e1ginas web, de la p\u00e1ginas XML ni de los elementos con los cuales es usualmente relacionado.</p> <p>No se tiene que hacer nada especial para empezar a utilizar el DOM. Todos los navegadores web usan el modelo de objeto de documento para hacer accesibles las p\u00e1ginas web al script. Cuando se crea o se carga un script o inmediatamente est\u00e1 disponible para usarlo con el API del DOM.</p>"},{"location":"js_dom/#interfaces-esenciales-en-el-dom","title":"Interfaces esenciales en el DOM","text":"<p>document y window son objetos cuya interfaces son generalmente muy usadas en la programaci\u00f3n de DOM. En t\u00e9rmino simple, el objeto window representa algo como podr\u00eda ser el navegador, y el objeto document es la ra\u00edz del documento en s\u00ed. Element se refiere a un elemento o a un nodo de tipo de elemento \"element\" devuelto por un miembro del API de DOM, por ejemplo un <code>&lt;div&gt;</code></p>"},{"location":"js_dom/#seleccionar-elementos-en-el-dom","title":"Seleccionar Elementos en el DOM","text":"<p>Para interactuar con los elementos de una p\u00e1gina, primero debemos seleccionarlos con JavaScript.</p>"},{"location":"js_dom/#getelementbyid-seleccionar-un-elemento-por-su-id","title":"<code>getElementById()</code> \u2192 Seleccionar un elemento por su <code>id</code>","text":"<pre><code>&lt;p id=\"mensaje\"&gt;Hola, mundo!&lt;/p&gt;\n&lt;button onclick=\"cambiarTexto()\"&gt;Cambiar Texto&lt;/button&gt;\n\n&lt;script&gt;\nfunction cambiarTexto() {\n    let elemento = document.getElementById(\"mensaje\");  // Seleccionamos el elemento\n    elemento.textContent = \"Texto cambiado con JavaScript!\";\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"js_dom/#queryselector-y-queryselectorall-seleccionar-elementos-con-selectores-css","title":"<code>querySelector()</code> y <code>querySelectorAll()</code> \u2192 Seleccionar elementos con selectores CSS","text":"<ul> <li><code>querySelector()</code> selecciona solo el primer elemento que coincida con el selector CSS.</li> <li><code>querySelectorAll()</code> selecciona todos los elementos coincidentes y devuelve una lista.</li> </ul> <pre><code>&lt;p class=\"parrafo\"&gt;Este es un p\u00e1rrafo.&lt;/p&gt;\n&lt;p class=\"parrafo\"&gt;Este es un p\u00e1rrafo 2.&lt;/p&gt;\n&lt;button onclick=\"cambiarColor()\"&gt;Cambiar Color&lt;/button&gt;\n\n&lt;script&gt;\nfunction cambiarColor() {\n    let elemento = document.querySelector(\".parrafo\");  // Selecciona el primer elemento con la clase \"parrafo\"\n    elemento.style.color = \"red\";  // Cambia el color del texto a rojo\n}\n&lt;/script&gt;\n</code></pre> <p>Ejemplo con <code>querySelectorAll()</code>:</p> <pre><code>let elementos = document.querySelectorAll(\".parrafo\");\nelementos.forEach(p =&gt; p.style.fontSize = \"20px\");  // Cambia el tama\u00f1o de todos los p\u00e1rrafos\n</code></pre>"},{"location":"js_dom/#otros-metodos-de-acceso-a-elementos-del-dom","title":"Otros metodos de acceso a elementos del DOM","text":"<p>Para acceder a los diferentes elementos de una p\u00e1gina web podemos usar los siguientes m\u00e9todos</p> <pre><code>// Obtiene una lista con los elementos que tienen esa clase\ndocument.getElementsByClassName('algunaclase');\n\n// Obtiene una HTMLCollection con los todos los elementos 'li'\ndocument.getElementsByTagName('li');\n</code></pre> <p>Una vez tenemos un elemento seleccionado podemos acceder a sus padres/hijos</p> <pre><code>var elem = document.getElementById('someid');\n// Obtener los hijos de un elemento\nvar hijos = elem.childNodes;\n\n// Su nodo padre\nvar padre = elem.parentNode;\n</code></pre>"},{"location":"js_dom/#crear-nuevos-elementos","title":"Crear nuevos elementos","text":"<p>Para crear elementos llamamos a createElement con el nombre del elemento</p> <pre><code>var nuevoH1 = document.createElement('h1');\nvar nuevoParrafo = document.createElement('p');\n</code></pre> <p>Para a\u00f1adir texto a los elementos podemos usar el m\u00e9todo createTextNode o tambi\u00e9n podemos asignar directamente el valor a la propiedad innerHTML</p> <pre><code>var nuevoH1 = document.createElement('h1');\nvar nuevoParrafo = document.createElement('p');\n\nvar textoH1 = document.createTextNode('Hola mundo!');\n// A\u00f1adir el texto a los elementos\nnuevoH1.appendChild(textoH1);\nnuevoParrafo.innerHTML = 'lorem ipsum...';\n</code></pre> <p>Nota</p> <p>Crear un elemento con el createElement no agrega directamente el elemento en nuestra p\u00e1gina. Para ello debemos agregarlo a alg\u00fan otro elemento con el m\u00e9doto appendChild</p> <pre><code>&lt;ul id=\"lista\"&gt;&lt;/ul&gt;\n&lt;button onclick=\"agregarElemento()\"&gt;Agregar Elemento&lt;/button&gt;\n\n&lt;script&gt;\nfunction agregarElemento() {\n    let nuevoElemento = document.createElement(\"li\");  // Creamos un nuevo &lt;li&gt;\n    nuevoElemento.textContent = \"Nuevo \u00edtem\";  // Agregamos texto al &lt;li&gt;\n\n    let lista = document.getElementById(\"lista\");\n    lista.appendChild(nuevoElemento);  // Agregamos el &lt;li&gt; a la lista &lt;ul&gt;\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"js_dom/#anadireliminarmodificar-clases","title":"A\u00f1adir/eliminar/modificar Clases","text":"<p>Podemos acceder a las clases de un elemento y manipularas para cambiar el estilo del elememto</p> <pre><code>// Tomamos un elemento\nvar cabecera = document.getElementById('cabecera');\n\n// elimina una clase del elemento\ncabecera.classList.remove('foo');\n\n// A\u00f1ade una clase si no existe\ncabecera.classList.add('otra');\n\n// a\u00f1ade o elimina varias clases a la vez\ncabecera.classList.add('foo', 'bar');\ncabecera.classList.remove('foo', 'bar');\n\n// Si la clase existe la elimina, si no existe, la crea\ncabecera.classList.toggle('visible');\n\n// Devuelve true si el elemento contiene esa clase\ncabecera.classList.contains('foo');\n</code></pre>"},{"location":"js_dom/#manipular-el-estilo","title":"Manipular el estilo","text":"<p>Podemos agregar estilos en linea directamente a los elementos</p> <pre><code>// Tomamos un elemento\nvar cabecera = document.getElementById('cabecera');\n// Modificamos su estilo\ncabecera.style.color = 'white';\ncabecera.style.backgroundColor = 'black';\ncabecera.style.padding = '10px';\ncabecera.style.width = '250px';\ncabecera.style.textAlign = 'center';\n</code></pre>"},{"location":"js_dom/#eventos","title":"Eventos","text":"<p>Los eventos en JavaScript permiten ejecutar c\u00f3digo cuando el usuario hace clic, pasa el mouse, escribe en un input, etc.</p> <p>Hay tres formas de registrar gestores de eventos para un elemento. <sup>2</sup></p>"},{"location":"js_dom/#atributo-html","title":"Atributo HTML","text":"<p>Debe evitarse esta forma. Hace que el HTMl sea m\u00e1s grande y menos legible. El contenido/estructura y el comportamiento no est\u00e1n bien separados, por lo que es m\u00e1s dif\u00edcil encontrar un error.</p> <p>Ejemplo</p> <pre><code>&lt;button onclick=\"alert('Hello world!')\"&gt;\n</code></pre>"},{"location":"js_dom/#propiedades-del-elemento","title":"Propiedades del elemento","text":"<p>El problema con este m\u00e9todo es que solo se puede establecer un gestor por elemento y por evento.</p> <p>Ejemplo</p> <pre><code>// Se supone que myButton es un elemento de bot\u00f3n\nmyButton.onclick = function(event){alert('Hello world');};\n</code></pre>"},{"location":"js_dom/#addeventlistener","title":"addEventListener","text":"<p>Este es el m\u00e9todo que debemos usar preferiblemente en lugar de los otros 2 m\u00e9todos</p> <p>Ejemplo</p> <pre><code>&lt;button id=\"boton\"&gt;Haz clic&lt;/button&gt;\n\n&lt;script&gt;\nlet boton = document.getElementById(\"boton\");\n\nboton.addEventListener(\"click\", function() {\n    alert(\"\u00a1Has hecho clic!\");\n});\n&lt;/script&gt;\n</code></pre> <p>La sintaxis m\u00e1s usada es la siguiente <sup>3</sup></p> <pre><code>// Se supone que target es un elemento\ntarget.addEventListener(tipo, funcion listener [, opciones] );\n</code></pre> <p>Donde tipo es una cadena que representa un tipo de evento a escuchar. Algunos de los eventos m\u00e1s comunes son click, load, change, keypress. Para ver un listado de los eventos ir a https://developer.mozilla.org/es/docs/Web/Events</p> <p>Donde funcion listener es una funci\u00f3n que recibe como par\u00e1metro un evento. Si queremos pasar par\u00e1metros a la funci\u00f3n del listener, debes utilizar funciones an\u00f3nimas.</p> <p>Donde opciones es opcional y puede servir para indicar el useCapture indica que el usuario desea iniciar en evento en la captura o tamb\u00eden para especificar las caracter\u00edsticas del evento. </p> <p>Ejemplo</p> <pre><code>// Funcion para cambiar el contenido de t2\nfunction modifyText(new_text) {\n  var t2 = document.getElementById(\"t2\");\n  t2.firstChild.nodeValue = new_text;\n}\n\n// Funcion para agregar el evento a t\nfunction load() {\n  var el = document.getElementById(\"t\");\n  el.addEventListener(\"click\", function(){modifyText(\"four\")}, false);\n}\n</code></pre>"},{"location":"js_dom/#eventos-de-mouse","title":"Eventos de Mouse","text":"<p>Podemos detectar cuando el usuario mueve el mouse o pasa sobre un elemento.</p> <pre><code>&lt;p id=\"mensaje\"&gt;Pasa el mouse aqu\u00ed&lt;/p&gt;\n\n&lt;script&gt;\nlet mensaje = document.getElementById(\"mensaje\");\n\nmensaje.addEventListener(\"mouseover\", function() {\n    mensaje.style.color = \"blue\";  // Cambia el color cuando el mouse pasa\n});\n\nmensaje.addEventListener(\"mouseout\", function() {\n    mensaje.style.color = \"black\";  // Vuelve al color original cuando el mouse se va\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"js_dom/#eventos-de-teclado","title":"Eventos de Teclado","text":"<p>Podemos capturar lo que el usuario escribe en un input.</p> <pre><code>&lt;input type=\"text\" id=\"nombre\" placeholder=\"Escribe algo\"&gt;\n&lt;p id=\"resultado\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nlet input = document.getElementById(\"nombre\");\nlet resultado = document.getElementById(\"resultado\");\n\ninput.addEventListener(\"input\", function() {\n    resultado.textContent = \"Escribiste: \" + input.value;\n});\n&lt;/script&gt;\n</code></pre> <ul> <li>input \u2192 Se activa cuando el usuario escribe en un input.</li> <li>keydown \u2192 Detecta cuando el usuario presiona una tecla.</li> <li>keyup \u2192 Detecta cuando el usuario suelta una tecla.</li> </ul>"},{"location":"js_dom/#removeeventlistener","title":"removeEventListener","text":"<p>Si queremos quitar un evento previamente registrado debemos usar el m\u00e9todo removeEventListener. La sintaxis es igual a la del addEventListener</p> <p>Ejemplo</p> <pre><code>&lt;button id=\"detener\"&gt;Detener evento&lt;/button&gt;\n&lt;button id=\"clickMe\"&gt;Haz clic&lt;/button&gt;\n\n&lt;script&gt;\nfunction mostrarAlerta() {\n    alert(\"Evento activo\");\n}\n\nlet boton = document.getElementById(\"clickMe\");\nboton.addEventListener(\"click\", mostrarAlerta);\n\ndocument.getElementById(\"detener\").addEventListener(\"click\", function() {\n    boton.removeEventListener(\"click\", mostrarAlerta);\n    alert(\"Evento eliminado\");\n});\n&lt;/script&gt;\n</code></pre> <p>Solo se puede quitar si la funci\u00f3n est\u00e1 declarada aparte (no como funci\u00f3n an\u00f3nima).</p>"},{"location":"js_dom/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Contador de clics</p> <ol> <li>Crear un contador de clics que aumente cada vez que el usuario haga clic en un bot\u00f3n y se pueda reiniciar mediante otro boton.</li> </ol> <p>Cambiar el fondo de la p\u00e1gina con botones</p> <ol> <li>Crea tres botones que permitan cambiar el fondo de la p\u00e1gina a rojo, verde o azul al hacer clic en ellos.</li> </ol> <p>Contador con tecla Enter</p> <ol> <li>Crea un contador que aumente en 1 cada vez que el usuario presione la tecla Enter.</li> </ol> <p>Mostrar/Ocultar un p\u00e1rrafo</p> <ol> <li>Crea un bot\u00f3n que muestre u oculte un p\u00e1rrafo al hacer clic en \u00e9l.</li> </ol> <p>Validaci\u00f3n de formulario en tiempo real</p> <ol> <li>Crea un input donde el usuario escriba su nombre. Si el nombre tiene menos de 3 caracteres, muestra un mensaje de error en rojo.     </li> </ol>"},{"location":"js_dom/#dispatchevent","title":"dispatchEvent","text":"<p>Lanza un evento en el sistema de eventos. El evento est\u00e1 sujeto al mismo comportamiento y capacidades que si fuera un evento de lanzamiento directo.</p> <p><code>dispatchEvent</code> es un m\u00e9todo que nos permite disparar eventos \"manualmente\" en cualquier elemento del DOM. Esto es \u00fatil cuando queremos simular eventos o desencadenar acciones de manera controlada.</p> <p>La sintaxis es la siguiente</p> <pre><code>element.dispatchEvent(event)\n</code></pre> <p>Event es un objeto de tipo evento.</p> <p>Ejemplo</p> <pre><code>&lt;button id=\"miBoton\"&gt;Haz clic&lt;/button&gt;\n\n&lt;script&gt;\nlet boton = document.getElementById(\"miBoton\");\n\n// Evento real\nboton.addEventListener(\"click\", function() {\n    alert(\"\u00a1Bot\u00f3n clickeado!\");\n});\n\n// Disparar el evento despu\u00e9s de 2 segundos\nsetTimeout(() =&gt; {\n    let eventoClick = new Event(\"click\");\n    boton.dispatchEvent(eventoClick);\n}, 2000);\n&lt;/script&gt;\n</code></pre>"},{"location":"js_dom/#eventos-personalizados","title":"Eventos personalizados","text":"<p>Podemos crear eventos personalizados usando el constructor CustomEvent.</p> <p>Los eventos personalizados permiten enviar datos cuando se activan.</p> <p>Ejemplo</p> <pre><code>let eventoPersonalizado = new CustomEvent(\"saludo\", {\n    detail: { mensaje: \"Hola desde un evento personalizado!\" }\n});\n\ndocument.addEventListener(\"saludo\", function(event) {\n    console.log(event.detail.mensaje);\n});\n\ndocument.dispatchEvent(eventoPersonalizado);\n</code></pre>"},{"location":"js_dom/#propagacion-de-eventos","title":"Propagaci\u00f3n de eventos","text":"<p>Cuando hay dos elementos superpuestos, y ambos tienen asociadas acciones para responder a un mismo evento, surge la duda de en qu\u00e9 orden se ejecutan las acciones. Por defecto el evento se va propagando desde el elemento m\u00e1s interno hacia afuera, hasta alcanzar el elemento m\u00e1s externo (fase bubble). Si queremos realizar alguna acci\u00f3n durante las dos fases anteriores deberemos declararlo del siguiente modo: <sup>4</sup></p> <pre><code>// Se supone que myButton es un elemento de bot\u00f3n\nmyButton.removeEventListener('click', function(){alert('Hello world');}, true);\n</code></pre> <p>Ejemplo </p> <pre><code>const body = document.querySelector('body');\nconst container = document.querySelector('#container'); \nconst button = document.querySelector('#dataSender');\nbody.addEventListener('click', function(event) { \n  console.log('body clicked');\n});\ncontainer.addEventListener('click', function(event) { \n  console.log('container clicked');\n});\nbutton.addEventListener('click', function(event) { \n  console.log('button clicked');\n});\nbutton.addEventListener('click', function(event) { \n  console.log('button clicked 2');\n});\n</code></pre> <p></p>"},{"location":"js_dom/#detener-la-propagacion","title":"Detener la propagaci\u00f3n","text":"<p>En el caso de que queramos detener la propagaci\u00f3n del evento en alg\u00fan punto determinado del DOM podremos emplear los m\u00e9todos event.stopPropagation() o event.stopImmediatePropagation()</p> <p>El event.stopPropagation() evita que el evento \"suba en burbuja\" pero si permite que se ejecuten m\u00e1s eventos asociados a ese elemento.</p> <p>Ejemplo. En este caso se ejecutarian el button clicked y el button clicked 2</p> <pre><code>const body = document.querySelector('body');\nconst container = document.querySelector('#container'); \nconst button = document.querySelector('#dataSender');\nbody.addEventListener('click', function(event) { \n  console.log('body clicked');\n});\ncontainer.addEventListener('click', function(event) { \n  console.log('container clicked');\n});\nbutton.addEventListener('click', function(event) {\n  event.stopPropagation();\n  console.log('button clicked');\n});\nbutton.addEventListener('click', function(event) { \n  console.log('button clicked 2');\n});\n</code></pre> <p>Sin embargo si queremos prevenir que se ejecuten otros eventos asociados al mismo elemento podemos emplear el m\u00e9todo event.stopImmediatePropagation().</p> <p>Ejemplo. En este caso s\u00f3lo se ejecutarian el button clicked</p> <pre><code>const body = document.querySelector('body');\nconst container = document.querySelector('#container'); \nconst button = document.querySelector('#dataSender');\nbody.addEventListener('click', function(event) { \n  console.log('body clicked');\n});\ncontainer.addEventListener('click', function(event) { \n  console.log('container clicked');\n});\nbutton.addEventListener('click', function(event) {\n  event.stopImmediatePropagation();\n  console.log('button clicked');\n});\nbutton.addEventListener('click', function(event) { \n  console.log('button clicked 2');\n});\n</code></pre> <p>Otro m\u00e9todo com\u00fan es el event.preventDefault() que se usa para evitar que el navegador ejecute el comportamiento por defecto del evento recibido. El caso m\u00e1s com\u00fan es en los elementos de enlaces <code>&lt;a&gt;</code> cuando queremos usarlos como botones en vez de como enlaces.</p> <p>Ejemplo. Prevenir que el navegador vaya hacia la url del enlace cuando el usuario haga click sobre \u00e9l</p> <pre><code>const link = document.querySelector('#myLink');\nlink.addEventListener('click', function(event) {\n  event.preventDefault();\n  // do something cool\n});\n</code></pre>"},{"location":"js_dom/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <p>A continuaci\u00f3n vamos a modificar nuestro archivo script.js que se encuentra dentro de la carpeta js para agregar alguna funcionalidad a nuestra calculadora</p> <ol> <li> <p>Agregar un evento click al bot\u00f3n de tranformar coordenadas</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n});\n</code></pre> </li> <li> <p>Crear una funci\u00f3n para transformar coordenadas</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n        console.log(`Tranformar la coordenada ${lat},${lon} del ${epsg_in} al ${epsg_out}`);\n\n}\n</code></pre> </li> <li> <p>Llamar a la funci\u00f3n transformarCoordenadas cuando se hace click en el bot\u00f3n</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n        transformarCoordenadas(41.5, 2, \"EPSG:4326\", \"EPSG:25831\");\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n        console.log(`Tranformar la coordenada ${lat},${lon} del ${epsg_in} al ${epsg_out}`);\n\n}\n</code></pre> </li> <li> <p>Leer el valor del sistema de referencia de origen seleccionado</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n        const srs_origen = document.getElementById(\"origen\").value;\n        transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:25831\");\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n        console.log(`Tranformar la coordenada ${lat},${lon} del ${epsg_in} al ${epsg_out}`);\n\n}\n</code></pre> </li> <li> <p>Modificar el archivo index.html para agregar un div donde mostrar el resultado de la transformaci\u00f3n</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n    &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;div id=\"respuesta\"&gt;&lt;/div&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button class=\"btn-tranformar\"&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Mostrar la repuesta de la transformaci\u00f3n</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n        const srs_origen = document.getElementById(\"origen\").value;\n        const coordTransformada = transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:25831\");\n        document.getElementById(\"respuesta\").innerHTML = coordTransformada;\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n        return `Tranformar la coordenada ${lat},${lon} del ${epsg_in} al ${epsg_out}`;\n\n}\n</code></pre> </li> <li> <p>Guardar los archivos modificados y recargar la p\u00e1gina. Al presionar el bot\u00f3n de Transformar coordenadas debemos ver que nos aparece el texto con el valor del SRS de origen seleccionado.</p> </li> <li> <p>Cargar la librer\u00eda proj4 <sup>5</sup>. Esta librer\u00eda permite transformar coordenadas entre diferentes sistemas de referencia. Modificar el archivo index.html y agregar la librer\u00eda.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.3/proj4.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;div id=\"respuesta\"&gt;&lt;/div&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\"&gt;&lt;button class=\"btn-tranformar\"&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Utilizar la librer\u00eda de proj4 para transformar coordenadas al EPSG:3857</p> <pre><code>const btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n        console.log(\"Transformar coordenadas\");\n        const srs_origen = document.getElementById(\"origen\").value;\n        const coordTransformada = transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:3857\");\n        document.getElementById(\"respuesta\").innerHTML = coordTransformada;\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n        const coordTransformada = proj4(epsg_in, epsg_out, [lon, lat]);\n\n    return `La coordenada ${lat},${lon} en ${epsg_in} corresponde a la coordenada ${coordTransformada[1]},${coordTransformada[0]} en ${epsg_out} `;\n\n}\n</code></pre> </li> <li> <p>Recargar la p\u00e1gina y seleccionar como origen el EPSG:4326 y presionar el bot\u00f3n de Transformar coordenadas. Nos debe aparecer el texto con la coordenada transformada. Si seleccionamos otro SRS de origen nos dar\u00e1 un error. Esto es debido a la librer\u00eda proj4 no tiene definidos todos los SRS.</p> <p>Note</p> <p>Por defecto el proj4 tiene definidos los siguientes SRS: EPSG:4326, EPSG:4269 y EPSG:3857</p> </li> <li> <p>Definir un nuevo SRS. Para encontrar la definici\u00f3n de un SRS podemos ir a https://epsg.io/ y buscar el SRS que queremos definir (Ej. https://epsg.io/25831). Vamos al apartado de Export de la p\u00e1gina y seleccionamos la opci\u00f3n de Proj4js. Copiamos el texto y lo agregamos a nuestra aplicaci\u00f3n.</p> <pre><code>proj4.defs(\"EPSG:25831\",\"+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\nconst btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n    console.log(\"Transformar coordenadas\");\n    const srs_origen = document.getElementById(\"origen\").value;\n    const coordTransformada = transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:3857\");\n    document.getElementById(\"respuesta\").innerHTML = coordTransformada;\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n    const coordTransformada = proj4(epsg_in, epsg_out, [lon, lat]);\n\n    return `La coordenada ${lat},${lon} en ${epsg_in} corresponde a la coordenada ${coordTransformada[1]},${coordTransformada[0]} en ${epsg_out} `;\n\n}\n</code></pre> </li> </ol> <p>Ejercicio 2.5 pt</p> <ol> <li>Agregar un nuevo SRS a los selectores y al listado de la barra lateral y agregar la definici\u00f3n de proj4 de los SRS restantes para que la calculadora funcione. 0.5 pt</li> <li>Usar los valores de los campos Latitud y Longitud como coordendad de origen en lugar de la coordenada de origen que tenemos fijada en 41.5,2. y Usar el valor del selector de SRS de destino para hacer la transformaci\u00f3n en lugar del EPSG:3857 que tenemos fijado como destino. 0.5 pt </li> <li>Modificar la funci\u00f3n transformarCoordenadas para que retorne la coordenada transformada en lugar de texto actual. 0.5 pt</li> <li>Validar que el SRS de origen no sea igual al SRS de destino. En el caso de ser iguales mostrar un mensaje al usuario. El mensaje de error se debe mostrar en un nuevo div. En el caso de ser diferentes ocultar el div con el mensaje de error. 0.5 pt</li> <li>Agregar a la tabla un nuevo campo en la columna de origin del tipo textarea donde el usuario podra poner multiples coordenadas de origen separadas por \";\" (punto y comar) por Ejemplo 45.34,1.25;41.78,2.456. Al presionar el bot\u00f3n de transformar coordenadas validar si el nuevo campo tiene valores tambien realizar la transformaci\u00f3n de estos valores y retornarlos en la respuesta. 0.5 pt</li> </ol> <p>El resultado debe ser algo como esto </p>"},{"location":"js_dom/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Referencia_DOM_de_Gecko/Introducci%C3%B3n \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Referencia_DOM_de_Gecko/Eventos \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/API/EventTarget/addEventListener \u21a9</p> </li> <li> <p>https://latteandcode.medium.com/javascript-y-eventos-todo-lo-que-necesitas-saber-8b8ba4a2d4d4 \u21a9</p> </li> <li> <p>http://proj4js.org/ \u21a9</p> </li> </ol>"},{"location":"js_estructuras/","title":"Estructuras de control en JS","text":"<p>Para realizar cosas m\u00e1s complejas en nuestros scripts se utilizan las estructuras de control. Con ellas podemos realizar tomas de decisiones y bucles. <sup>1</sup></p>"},{"location":"js_estructuras/#toma-de-decisiones-control-de-flujo","title":"Toma de decisiones - control de flujo","text":"<p>Nos sirven para realizar unas acciones u otras en funci\u00f3n del estado de las variables. Es decir, tomar decisiones para ejecutar unas instrucciones u otras dependiendo de lo que est\u00e9 ocurriendo en ese instante en nuestros programas. Por ejemplo podemos mostrar cierta informaci\u00f3n dependiento del valor de una variable.</p> <p>En Javascript podemos tomar decisiones utilizando dos estructuras distintas. </p>"},{"location":"js_estructuras/#if-else","title":"if ... else","text":"<p>if es una estructura de control utilizada para tomar decisiones. Es un condicional que sirve para realizar unas u otras operaciones en funci\u00f3n de una expresi\u00f3n. Funciona de la siguiente manera, primero se eval\u00faa una expresi\u00f3n, si da resultado positivo se realizan las acciones relacionadas con el caso positivo.</p> <p>Ejecuta una sentencia si una condici\u00f3n espec\u00edficada es evaluada como verdadera. Si la condici\u00f3n es evaluada como falsa, otra sentencia puede ser ejecutada.</p> <p>La sintaxis es la siguiente</p> <pre><code>if (condici\u00f3n) sentencia1 [else sentencia2]\n</code></pre> <p>Ejemplos</p> <p>Ejecutar una sentencia si una condici\u00f3n espec\u00edficada es evaluada como verdadera</p> <pre><code>if (expresi\u00f3n) { \n   //acciones a realizar en caso positivo \n   //... \n}\n</code></pre> <p>Opcionalmente se pueden indicar acciones a realizar en caso de que la evaluaci\u00f3n de la sentencia devuelva resultados negativos. </p> <pre><code>if (expresi\u00f3n) { \n   //acciones a realizar en caso positivo \n   //... \n} else { \n   //acciones a realizar en caso negativo \n   //... \n}\n</code></pre> <p>Multiples sentencias if...else pueden ser anidadas para crear una cl\u00e1usula else if</p> <pre><code>if (condici\u00f3n1) {\n   //acciones a realizar en caso que la condici\u00f3n1 sea positiva \n   //...\n} else if (condici\u00f3n2) {\n   //acciones a realizar en caso que la condici\u00f3n2 sea positiva \n   //...\n} else if (condici\u00f3n3) {\n   //acciones a realizar en caso que la condici\u00f3n3 sea positiva \n   //...\n} else {\n   //acciones a realizar en caso que ninguna de las condiciones anteriores sea positiva \n   //...\n}\n</code></pre>"},{"location":"js_estructuras/#operador-ternario","title":"Operador Ternario","text":"<p>Es una forma m\u00e1s esquem\u00e1tica de realizar algunos if-else sencillos. No s\u00f3lo realiza una comparaci\u00f3n de valores, adem\u00e1s asigna un valor a una variable. Lo que hace es evaluar la condici\u00f3n (colocada entre par\u00e9ntesis) y si es positiva asigna el valor1 a la variable y en caso contrario le asigna el valor2</p> <p>La sintaxis es la siguiente</p> <pre><code>variable = (condici\u00f3n) ? valor1 : valor2\n</code></pre> <p>Ejemplo</p> <pre><code>momento = (hora_actual &lt; 12) ? \"Antes del mediod\u00eda\" : \"Despu\u00e9s del mediod\u00eda\"\n</code></pre>"},{"location":"js_estructuras/#switch","title":"switch","text":"<p>switch es una estructura un poco m\u00e1s compleja que permite hacer m\u00faltiples operaciones dependiendo del estado de una variable. Sirve para tomar decisiones en funci\u00f3n de distintos estados de las variables. Esta expresi\u00f3n se utiliza cuando tenemos m\u00faltiples posibilidades como resultado de la evaluaci\u00f3n de una sentencia. Es una alternativa a m\u00faltiples <code>if-else</code>.</p> <p>La declaraci\u00f3n switch eval\u00faa una expresi\u00f3n, comparando el valor de esa expresi\u00f3n con una instancia case, y ejecuta declaraciones asociadas a ese case, as\u00ed como las declaraciones en los case que siguen.</p> <p>La sintaxis es la siguiente</p> <pre><code>switch (expresi\u00f3n) { \n    case valor1: \n        //Sentencias a ejecutar si la expresi\u00f3n tiene como valor a valor1 \n        break \n    case valor2: \n        //Sentencias a ejecutar si la expresi\u00f3n tiene como valor a valor2 \n        break \n    case valor3: \n        //Sentencias a ejecutar si la expresi\u00f3n tiene como valor a valor3 \n        break \n    default: \n        //Sentencias a ejecutar si el valor no es ninguno de los anteriores \n}\n</code></pre> <p>Note</p> <p>La palabra break es opcional, pero si no la ponemos a partir de que se encuentre coincidencia con un valor se ejecutar\u00e1n todas las sentencias relacionadas con este y todas las siguientes. Es decir, si en nuestro esquema anterior no hubiese ning\u00fan break y la expresi\u00f3n valiese valor1, se ejecutar\u00edan las sentencias relacionadas con valor1 y tambi\u00e9n las relacionadas con valor2, valor3 y default.</p> <p>Tambi\u00e9n es opcional la opci\u00f3n default u opci\u00f3n por defecto.</p> <p>Ejemplo</p> <pre><code>switch (dia_de_la_semana) { \n    case 1: \n        document.write(\"Es Lunes\") \n        break \n    case 2: \n        document.write(\"Es Martes\") \n        break \n    case 3: \n        document.write(\"Es Mi\u00e9rcoles\") \n        break \n    case 4: \n        document.write(\"Es Jueves\") \n        break \n    case 5: \n        document.write(\"Es viernes\") \n        break \n    case 6: \n    case 7: \n        document.write(\"Es fin de semana\") \n        break \n    default: \n        document.write(\"Ese d\u00eda no existe\") \n}\n</code></pre>"},{"location":"js_estructuras/#bucles-iteraciones","title":"Bucles - iteraciones","text":"<p>Los bucles se utilizan para realizar ciertas acciones repetidamente. Son muy utilizados a todos los niveles en la programaci\u00f3n. Con un bucle podemos por ejemplo imprimir en una p\u00e1gina los n\u00fameros del 1 al 100 sin necesidad de escribir cien veces el la instrucci\u00f3n imprimir.</p> <p>En Javascript existen varios tipos de bucles, cada uno est\u00e1 indicado para un tipo de iteraci\u00f3n distinto y son los siguientes:</p> <p>https://developer.mozilla.org/es/docs/Web/JavaScript</p>"},{"location":"js_estructuras/#for","title":"for","text":"<p>El bucle for se utiliza para repetir una o m\u00e1s instrucciones un determinado n\u00famero de veces. De entre todos los bucles, el for se suele utilizar cuando sabemos seguro el n\u00famero de veces que queremos que se ejecute. </p> <p>La sintaxis es la siguiente</p> <pre><code>for (inicializaci\u00f3n; condici\u00f3n; actualizaci\u00f3n) { \n    //sentencias a ejecutar en cada iteraci\u00f3n \n}\n</code></pre> <p>El bucle for tiene tres partes incluidas entre los par\u00e9ntesis, que nos sirven para definir c\u00f3mo deseamos que se realicen las repeticiones. La primera parte es la inicializaci\u00f3n, que se ejecuta solamente al comenzar la primera iteraci\u00f3n del bucle. En esta parte se suele colocar la variable que utilizaremos para llevar la cuenta de las veces que se ejecuta el bucle.</p> <p>La segunda parte es la condici\u00f3n, que se evaluar\u00e1 cada vez que comience una iteraci\u00f3n del bucle. Contiene una expresi\u00f3n para decidir cu\u00e1ndo se ha de detener el bucle, o mejor dicho, la condici\u00f3n que se debe cumplir para que contin\u00fae la ejecuci\u00f3n del bucle.</p> <p>Por \u00faltimo tenemos la actualizaci\u00f3n, que sirve para indicar los cambios que queramos ejecutar en las variables cada vez que termina la iteraci\u00f3n del bucle, antes de comprobar si se debe seguir ejecutando.</p> <p>Ejemplo para escribir los n\u00famero del 1 al 10.</p> <pre><code>var i \nfor (i=0; i&lt;=10; i++) { \n    document.write(i)\n    document.write(\"&lt;br&gt;\") \n}\n</code></pre> <p>Por ejemplo si queremos escribir los n\u00famero del 500 al 1.000 de dos en dos se escribir\u00e1 el siguiente bucle.</p> <pre><code>var i \nfor (i=500; i&lt;=1000; i+=2) { \n    document.write(i)\n    document.write(\"&lt;br&gt;\") \n}\n</code></pre>"},{"location":"js_estructuras/#while","title":"while","text":"<p>Este bucle se utiliza cuando queremos repetir la ejecuci\u00f3n de unas sentencias un n\u00famero indefinido de veces, siempre que se cumpla una condici\u00f3n.</p> <p>La sintaxis es la siguiente</p> <pre><code>while (condici\u00f3n){ \n    //sentencias a ejecutar \n}\n</code></pre> <p>Ejemplo</p> <pre><code>let n = 0;\nlet x = 0;\nwhile (n &lt; 3) {\n  n ++;\n  x += n;\n}\n</code></pre> <p>Ejemplo. Lo que hace es pedir que el usuario introduzca un color y lo hace repetidas veces, mientras que el color introducido no sea rojo. </p> <pre><code>var color = \"\" \nwhile (color != \"rojo\"){ \n    color = prompt(\"dame un color (escribe rojo para salir)\",\"\") \n}\n</code></pre>"},{"location":"js_estructuras/#dowhile","title":"do...while","text":"<p>Es una variaci\u00f3n del bucle while visto anteriormente. Se utiliza generalmente cuando no sabemos cuantas veces se habr\u00e1 de ejecutar el bucle, igual que el bucle while, con la diferencia de que sabemos seguro que el bucle por lo menos se ejecutar\u00e1 una vez.</p> <p>La sintaxis es la siguiente</p> <pre><code>do { \n    //sentencias del bucle \n} while (condici\u00f3n)\n</code></pre> <p>Ejemplo. Este ejemplo funciona exactamente igual que el anterior, excepto que no tuvimos que inicializar la variable color antes de introducirnos en el bucle </p> <pre><code>var color \ndo { \n    color = prompt(\"dame un color (escribe rojo para salir)\",\"\") \n} while (color != \"rojo\")\n</code></pre>"},{"location":"js_estructuras/#funciones","title":"Funciones","text":"<p>En t\u00e9rminos generales, una funci\u00f3n es un \"subprograma\" que puede ser llamado por c\u00f3digo externo (o interno en caso de recursi\u00f3n) a la funci\u00f3n. Al igual que el programa en s\u00ed mismo, una funci\u00f3n se compone de una secuencia de declaraciones, que conforman el llamado cuerpo de la funci\u00f3n. Se pueden pasar valores a una funci\u00f3n, y la funci\u00f3n puede devolver un valor. <sup>4</sup></p> <p>Las funciones permiten reutilizar c\u00f3digo y organizarlo mejor.</p> <p>En JavaScript, las funciones son objetos de primera clase, es decir, son objetos y se pueden manipular y transmitir al igual que cualquier otro objeto. Concretamente son objetos Function.</p> <p>JavaScript tiene integradas varias funciones de nivel superior como por ejemplo parseInt(), decodeURI(), etc.</p>"},{"location":"js_estructuras/#declaracion-de-una-funcion","title":"Declaracion de una funci\u00f3n","text":"<p>Una definici\u00f3n de funci\u00f3n (tambi\u00e9n denominada declaraci\u00f3n de funci\u00f3n o expresi\u00f3n de funci\u00f3n) consta de la palabra clave <code>function</code>, seguida de:</p> <ul> <li>El nombre de la funci\u00f3n.</li> <li>Una lista de par\u00e1metros o argumentos de la funci\u00f3n, entre par\u00e9ntesis y separados por comas.</li> <li>Las declaraciones de JavaScript que definen la funci\u00f3n, encerradas entre llaves, { ... }.</li> </ul> <p>Se ejecuta llam\u00e1ndola con su nombre y pasando valores.</p> <pre><code>function saludar(nombre) {\n    console.log(\"Hola, \" + nombre);\n}\n\nsaludar(\"Carlos\"); // Llama a la funci\u00f3n\n</code></pre>"},{"location":"js_estructuras/#funciones-con-retorno-return","title":"Funciones con retorno (<code>return</code>)","text":"<pre><code>function suma(a, b) {\n    return a + b;\n}\n\nconst resultado = suma(4,5); //Llama a la funci\u00f3n y guardar el resultado en una variable\nconsole.log(resultado); // 9\n</code></pre> <p>En el ejemplo anterior tenemos a la funci\u00f3n suma que toma 2 par\u00e1metros a y b y devuelve un valor con la suma de a+b. La instrucci\u00f3n return especifica el valor devuelto por la funci\u00f3n.</p>"},{"location":"js_estructuras/#funciones-anonimas","title":"Funciones an\u00f3nimas","text":"<p>Las funciones tambi\u00e9n se pueden crear mediante una expresi\u00f3n function. Esta funci\u00f3n puede ser an\u00f3nima; no tiene por qu\u00e9 tener un nombre. Por ejemplo, la funci\u00f3n suma se podr\u00eda haber definido como:</p> <pre><code>const suma = function(a, b) {\n    return a + b;\n}\n</code></pre> <p>Las expresi\u00f3n function son convenientes cuando se pasa una funci\u00f3n como argumento a otra funci\u00f3n.</p>"},{"location":"js_estructuras/#parametros-de-una-funcion","title":"Par\u00e1metros de una funci\u00f3n","text":"<p>Existe una variable \"especial\" llamada arguments que es similar a una matriz. Esta variable guarda todos los argumentos de la funci\u00f3n. </p> <pre><code>const suma = function(a, b) {\n    let parametroB = arguments[1]; \n}\n</code></pre> <p>Usando el objeto arguments, puedes llamar a una funci\u00f3n con m\u00e1s argumentos de los que formalmente declara aceptar. Esto suele ser \u00fatil si no sabes de antemano cu\u00e1ntos argumentos se pasar\u00e1n a la funci\u00f3n.</p>"},{"location":"js_estructuras/#parametros-predeterminados","title":"Par\u00e1metros predeterminados","text":"<p>En el pasado (pre ES6), la estrategia general para establecer valores predeterminados era probar los valores de los par\u00e1metros en el cuerpo de la funci\u00f3n y asignar un valor si eran undefined.</p> <p>Con par\u00e1metros predeterminados, ya no es necesaria una verificaci\u00f3n manual en el cuerpo de la funci\u00f3n. Simplemente puedes poner un valor predeterminado para alg\u00fan par\u00e1metro en el encabezado de la funci\u00f3n.</p> <pre><code>const suma = function(a, b = 2) {\n    return a + b;\n}\n</code></pre>"},{"location":"js_estructuras/#parametros-rest","title":"Par\u00e1metros rest","text":"<p>La sintaxis del par\u00e1metro rest (resto de par\u00e1metros) nos permite representar un n\u00famero indefinido de argumentos como una matriz. Para ello ponemos tres puntos antes del nombre del par\u00e1metro</p> <pre><code>const suma = function(a, ...masParametros) {\n    ...\n    ...\n}\nsuma(1, 2, 4, 7); //en este caso ...masParametros ser\u00eda igual a [2, 4, 7]\n</code></pre>"},{"location":"js_estructuras/#funciones-flecha","title":"Funciones flecha","text":"<p>Dos factores influyeron en la introducci\u00f3n de las funciones flecha son: funciones m\u00e1s cortas y no vinculantes de this.</p> <p>Hasta las funciones flecha, cada nueva funci\u00f3n defin\u00eda su propio valor this, lo que causaba algunos problemas. Para m\u00e1s detalles sobre funciones flecha https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Funciones/Arrow_functions y https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/</p> <pre><code>const suma = (a, b) =&gt; a + b;\n\nconst resta = (a, b) =&gt; { //Si tiene varias l\u00edneas de c\u00f3digo, necesita {} y return\n    let resultado = a - b;\n    return resultado;\n};\n\nconst cuadrado = a =&gt; a * a; //Si tiene un solo par\u00e1metro, no necesita par\u00e9ntesis \n</code></pre>"},{"location":"js_estructuras/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>D\u00f3nde estoy? (15 minutos)</p> <ol> <li>Crear una funci\u00f3n que reciba como parametros la latitud y la longitud y devuelva en que hemisferio est\u00e1 (norte o sur) y si es al este u oeste del meridiano 0 (oriental u occidental).</li> </ol>"},{"location":"js_estructuras/#ejercicios-extras","title":"Ejercicios extras","text":"<ul> <li>W3 Schools JS Exercises</li> <li>Exercism</li> <li>JS Challenger</li> </ul>"},{"location":"js_estructuras/#referencias","title":"Referencias","text":"<ol> <li> <p>https://desarrolloweb.com/articulos/543.php \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias \u21a9</p> </li> <li> <p>https://uniwebsidad.com/libros/javascript/capitulo-3/operadores \u21a9</p> </li> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Expressions_and_Operators#precedencia_de_los_operadores \u21a9</p> </li> </ol>"},{"location":"js_objetos/","title":"Objetos en JS","text":"<p>JavaScript est\u00e1 dise\u00f1ado en un paradigma simple basado en objetos. Un objeto es una colecci\u00f3n de propiedades, y una propiedad es una asociaci\u00f3n entre un nombre (o clave) y un valor. El valor de una propiedad puede ser una funci\u00f3n, en cuyo caso la propiedad es conocida como un m\u00e9todo. <sup>1</sup></p> <p>El concepto de Objetos se puede entender con objetos tangibles de la vida real. Por ejemplo una mesa es un objeto con propiedades. La mesa tiena color, un dese\u00f1o, material, n\u00famero de patas, etc. Otro ejemplo ser\u00eda un coche. El coche tiene uan serie de propiedades como la marca, modelo, color, etc. pero tambi\u00e9n tiene una serie de m\u00e9todos (funciones) como puede ser encender, girar, avanzar, etc.</p> <p>Debemos tener en cuenta que todo es un objeto en JavaScript.</p> <p>Por ejemplo si creamos una cadena de texto JS internamente crea un objeto de tipo String (cadena de texto).</p> <pre><code>const texto = \"Hola mundo!\";\n\n/// para ver su longitud podemos consultar la propiedad length\ntexto.length;\n/// podemos convertir todo el texto a may\u00fasculas usando el m\u00e9doto toUpperCase\ntexto.toUpperCase();\n</code></pre> <p>Para ver los m\u00e9todos m\u00e1s usados cuando se trabajan con cadenas de texto visitar https://developer.mozilla.org/es/docs/Learn/JavaScript/First_steps/Useful_string_methods. Aqu\u00ed podremos ver como acceder a una subcadena de caracteres, pasar el texto a may\u00fasculas, etc.</p> <p>Pero normalmente cuando hablamos de objetos en JavaScript, nos referimos a estructuras de datos que almacenan informaci\u00f3n en pares clave-valor.</p> <p>En JavaScript se pueden crear nuevos objetos de diferentes maneras a continuaci\u00f3n veremos algunas.</p>"},{"location":"js_objetos/#iniciador-de-objeto","title":"Iniciador de objeto","text":"<p>Es la forma m\u00e1s simple de crear un objeto. Consiste en crear una lista delimitada por comas de cero o m\u00e1s pares de nombres de propiedad y valores asociados de un objeto, encerrados entre llaves ({}).</p> <p>Ejemplo</p> <pre><code>const miPerro = {\n    nombre: 'H\u00e9rcules',\n    raza: 'Malt\u00e9s',\n    edad: 5,\n    ladrar: function () {\n        console.log(\"guau\");\n    }\n};\n\nconst tuPerro = {\n    nombre: 'Rex',\n    raza: 'Pastor',\n    edad: 10,\n    ladrar: function () {\n        console.log(\"guau\");\n    }\n};\n</code></pre>"},{"location":"js_objetos/#funcion-constructora","title":"Funci\u00f3n constructora","text":"<p>Como alternativa, puedes crear un objeto con estos dos pasos:</p> <ol> <li>Definir el tipo de objeto escribiendo una funci\u00f3n constructora. Existe una fuerte convenci\u00f3n, con buena raz\u00f3n, para utilizar en may\u00fascula la letra inicial.</li> <li>Crear una instancia del objeto con el operador new.</li> </ol> <p>Ejemplo</p> <pre><code>function Perro(nombre, raza, edad) {\n    this.nombre = nombre;\n    this.raza = raza;\n    this.edad = edad;\n    this.ladrar = function () {\n        console.log(\"guau\");\n    }\n}\n\nconst myPerro = new Perro('H\u00e9rcules', 'Malt\u00e9s', 5);\nconst tuPerro = new Perro('Rex', 'Pastor', 10);\n</code></pre>"},{"location":"js_objetos/#acceder-a-las-propiedades","title":"Acceder a las propiedades","text":"<p>Podemos acceder a las prpopiedades de los objetos de 2 formas:</p> <ol> <li> <p>Usando la notaci\u00f3n de punto.</p> <p>Ejemplo </p> <pre><code>const myPerro = new Perro('H\u00e9rcules', 'Malt\u00e9s', 5);\n\nconsole.log(myPerro.nombre); //debe retornar H\u00e9rcules\n</code></pre> </li> <li> <p>Usando la notaci\u00f3n de corchetes.</p> <p>Ejemplo </p> <pre><code>const myPerro = new Perro('H\u00e9rcules', 'Malt\u00e9s', 5);\n\nconsole.log(myPerro[\"nombre\"]); //debe retornar H\u00e9rcules\n</code></pre> </li> </ol> <p>El nombre de la propiedad de un objeto puede ser cualquier cadena v\u00e1lida de JavaScript, o cualquier cosa que se pueda convertir en una cadena, incluyendo una cadena vac\u00eda. Sin embargo, cualquier nombre de propiedad que no sea un identificador v\u00e1lido de JavaScript (por ejemplo, el nombre de alguna propiedad que tenga un espacio o un gui\u00f3n, o comience con un n\u00famero) solo se puede acceder utilizando la notaci\u00f3n de corchetes. Esta notaci\u00f3n es muy \u00fatil tambi\u00e9n cuando los nombres de propiedades son determinados din\u00e1micamente.</p>"},{"location":"js_objetos/#modificar-o-crear-propiedades","title":"Modificar o crear propiedades","text":"<p>Igualmente que en el caso anterior podemos usar las dos notaciones. En este caso le asignaremos un nuevo valor a la propiedad. Si la propiedad ya existe se modifica su valor y si la propiedad no existe se crea esta nueva propiedad.</p> <p>Ejemplo </p> <pre><code>const myPerro = new Perro('H\u00e9rcules', 'Malt\u00e9s', 5);\n\n//modficar una propiedad\nmyPerro.edad = 6;\nmyPerro[\"raza\"] = \"Dogo\";\n\n//crear una propiedad\nmyPerro.color = \"Blanco\";\nmyPerro[\"peso-kg\"] = 64; \n</code></pre>"},{"location":"js_objetos/#eliminar-propiedades","title":"Eliminar propiedades","text":"<p><code>delete</code> elimina una propiedad de un objeto.</p> <pre><code>delete myPerro.edad;\nconsole.log(myPerro);\n</code></pre>"},{"location":"js_objetos/#objetos-con-metodos-funciones-dentro-de-objetos","title":"Objetos con m\u00e9todos (funciones dentro de objetos)","text":"<p>Los m\u00e9todos son funciones dentro de un objeto. Se llaman con <code>objeto.metodo()</code>.</p> <pre><code>let coche = {\n    marca: \"Toyota\",\n    modelo: \"Corolla\",\n    arrancar: function () {\n        console.log(\"El coche ha arrancado.\");\n    }\n};\n\ncoche.arrancar(); // \"El coche ha arrancado.\"\n</code></pre>"},{"location":"js_objetos/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Crear un objeto persona</p> <ol> <li> <p>Crea un objeto persona que tenga las siguientes propiedades:</p> <ul> <li>nombre (string),</li> <li>edad (n\u00famero),</li> <li>ocupacion (string).</li> </ul> </li> <li> <p>Adem\u00e1s, agrega un m\u00e9todo dentro del objeto que imprima un mensaje con el nombre y la ocupaci\u00f3n de la persona.</p> </li> </ol> <p>Modificar un objeto</p> <p>Tienes un objeto libro con las propiedades:   * titulo (string)   * autor (string),   * a\u00f1o (n\u00famero).</p> <ol> <li>Modifica el titulo y el ano del libro para actualizar la informaci\u00f3n. Luego, muestra los cambios en consola.</li> </ol> <p>A\u00f1adir un nuevo m\u00e9todo a un objeto</p> <ol> <li>Crea un objeto vehiculo con las propiedades:<ul> <li>marca (string),</li> <li>modelo (string),</li> <li>a\u00f1o (n\u00famero),</li> <li>kilometraje (n\u00famero).</li> </ul> </li> <li>Agrega un m\u00e9todo que aumente el kilometraje cada vez que se \"realice un viaje\". Cada vez que se llame a este m\u00e9todo, el kilometraje aumentar\u00e1 en una cantidad que pases como par\u00e1metro.</li> </ol> <p>Comparar dos objetos</p> <ol> <li>Crea dos objetos producto1 y producto2 con las propiedades:<ul> <li>nombre (string),</li> <li>precio (n\u00famero).</li> </ul> </li> <li>Escribe una funci\u00f3n que compare ambos productos y determine si tienen el mismo precio y nombre. La funci\u00f3n debe devolver un mensaje indicando si son iguales o no.</li> </ol> <p>Gesti\u00f3n de Inventario de Productos</p> <p>Imagina que tienes un inventario de productos en una tienda, donde cada producto tiene las siguientes propiedades:</p> <ul> <li>nombre: El nombre del producto.</li> <li>precio: El precio del producto.</li> <li>cantidad: Cu\u00e1ntos productos hay en stock.</li> </ul> <p>Crea un sistema que permita realizar las siguientes tareas:</p> <ol> <li>Agregar un producto al inventario (con nombre, precio y cantidad).</li> <li>Eliminar un producto del inventario por su nombre.</li> <li>Actualizar el stock de un producto (aumentar o disminuir la cantidad disponible).</li> <li>Mostrar todos los productos en inventario con su nombre, precio y cantidad.</li> <li>Filtrar productos que tengan un precio mayor a un valor dado.</li> <li>Ordenar el inventario por el precio de los productos de menor a mayor.</li> <li>Calcular el valor total del inventario, multiplicando el precio de cada producto por su cantidad disponible. </li> </ol> <pre><code>const inventario = [\n    { nombre: \"Camiseta\", precio: 20, cantidad: 50 },\n    { nombre: \"Pantal\u00f3n\", precio: 40, cantidad: 30 },\n    { nombre: \"Zapatos\", precio: 60, cantidad: 15 },\n    { nombre: \"Gorra\", precio: 15, cantidad: 100 }\n]\n\n// Pruebas de ejemplo:\nagregarProducto(\"Chaqueta\", 80, 10);\neliminarProducto(\"Gorra\");\nactualizarStock(\"Zapatos\", 5);\nmostrarInventario();\nconsole.log(filtrarPorPrecio(30));  // Productos con precio mayor a 30\nordenarPorPrecio();\nmostrarInventario();\nconsole.log(\"Valor total del inventario: $\", calcularValorInventario());\n</code></pre>"},{"location":"js_objetos/#manipulacion-de-datos-con-json","title":"Manipulaci\u00f3n de Datos con JSON","text":"<p>JSON (JavaScript Object Notation) es el formato m\u00e1s usado para intercambiar datos.</p> <p>Ejemplo de un Objeto en JSON</p> <pre><code>let usuario = {\n    nombre: \"Ana\",\n    edad: 25,\n    ciudad: \"Madrid\"\n};\n</code></pre>"},{"location":"js_objetos/#convertir-un-objeto-en-json-jsonstringify","title":"Convertir un Objeto en JSON (<code>JSON.stringify()</code>)","text":"<pre><code>let usuarioJSON = JSON.stringify(usuario);\nconsole.log(usuarioJSON); // '{\"nombre\":\"Ana\",\"edad\":25,\"ciudad\":\"Madrid\"}'\n</code></pre>"},{"location":"js_objetos/#convertir-un-json-a-objeto-jsonparse","title":"Convertir un JSON a Objeto (<code>JSON.parse()</code>)","text":"<pre><code>let datos = localStorage.getItem(\"datosUsuario\");\nlet usuarioObjeto = JSON.parse(datos);\nconsole.log(usuarioObjeto.nombre); // \"Ana\"\n</code></pre>"},{"location":"js_objetos/#recorrer-propiedades-de-un-objeto","title":"Recorrer propiedades de un objeto","text":""},{"location":"js_objetos/#forin","title":"for...in","text":"<p>Un bucle for...in itera sobre las propiedades de un objeto en un orden arbitrario</p> <p>La sintaxis es la siguiente</p> <pre><code>for (variable in objeto) { \n    //sentencias a ejecutar en cada iteraci\u00f3n \n}\n</code></pre> <p>Ejemplo <pre><code>const object = { a: 1, b: 2, c: 3 };\n\nfor (const property in object) {\n  console.log(`${property}: ${object[property]}`);\n}\n</code></pre></p>"},{"location":"js_objetos/#referencias","title":"Referencias","text":"<ol> <li> <p>https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Trabajando_con_objectos \u21a9</p> </li> </ol>"},{"location":"js_servidor/","title":"JS en el servidor","text":"<p>Dentro del desarrollo web, el backend se encarga de todos los procesos necesarios para que la web funcione de forma correcta. Estos procesos o funciones no son visibles, pero tienen mucha importancia en el buen funcionamiento de un sitio web. Algunas de estas acciones que controla el backend son la conexi\u00f3n con la base de datos o la comunicaci\u00f3n con el servidor de hosting.</p> <p>El desarrollo del backend se puede hacer usando diferentes lenguajes de programaci\u00f3n como PHP, Java, .Net, Python, Node.js, etc. En nuestro caso usaremos Node.js<sup>1</sup> ya que es un entorno de ejecuci\u00f3n multiplataforma basado en JavaScript. </p> <p>Warning</p> <p>Este NO es un curso de Node.js. \u00fanicamente explicaremos un ejemplo de c\u00f3mo montar un servidor con Node.js que permita leer y escribir datos en una Base de datos con PostgreSQL. Tampoco es un curso de base de datos y se asume que ya se tienen conocimientos previos de trabajar con PostgreSQL.</p>"},{"location":"js_servidor/#servidor-nodejs","title":"Servidor Node.js","text":"<p>Para crear nuestro servidor con Node.js usaremos Express<sup>2</sup>. Express es una infraestructura de aplicaciones web Node.js m\u00ednima y flexible que proporciona un conjunto s\u00f3lido de caracter\u00edsticas para las aplicaciones web y m\u00f3viles.</p> <ol> <li> <p>Crear una carpeta llamada servidor</p> </li> <li> <p>Abrir un terminal dentro de esa carpeta y ejecutar el siguiente comando</p> <pre><code>npm init -y\n</code></pre> </li> <li> <p>A continuaci\u00f3n, instale Express en el directorio y gu\u00e1rdelo en la lista de dependencias.</p> <pre><code>npm i express\n</code></pre> </li> <li> <p>En el directorio servidor crear un archivo llamado app.js y copie el sigueinte c\u00f3digo:</p> <pre><code>const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) =&gt; {\nres.send('Hello World!')\n});\n\napp.listen(port, () =&gt; {\nconsole.log(`Example app listening at http://localhost:${port}`)\n});\n</code></pre> </li> <li> <p>Guarde el archivo y abrir la pagina http://localhost:3000/ en el navegador para ver que el servidor est\u00e1 funcionando.</p> </li> <li> <p>Crear la base de datos, en PostgreSQL crear una nueva base de datos llamada node_ejemplo (o usar una existente). Dentro de esa base de datos crear una tabla llamada tranformacion. Esta tabla debe contener 6 columnas: srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino. Las columnas de srs deben ser de tipo texto y el resto de tipo num\u00e9rico</p> <pre><code>CREATE SEQUENCE transformacion_id_seq;\n\nCREATE TABLE public.transformacion\n(\n    srs_origen character varying(5) COLLATE pg_catalog.\"default\" NOT NULL,\n    x_origen numeric NOT NULL,\n    y_origen numeric NOT NULL,\n    srs_destino character varying(5) COLLATE pg_catalog.\"default\" NOT NULL,\n    x_destino numeric NOT NULL,\n    y_destino numeric NOT NULL,\n    id integer NOT NULL DEFAULT nextval('transformacion_id_seq'::regclass),\n    CONSTRAINT transformacion_pkey PRIMARY KEY (id)\n);\n\nALTER SEQUENCE transformacion_id_seq\nOWNED BY transformacion.id;\n</code></pre> </li> <li> <p>Instalar el node-postgres una librer\u00eda de Node.js que nos permite conectar con bases de datos de PostgreSQL</p> <pre><code>npm i pg\n</code></pre> </li> <li> <p>Crear el archivo de configuraci\u00f3n para conectar con la BD desde Node. Dentro de la carpeta servidor crear una nueva carpeta llamada db. Dentro de esta carpeta crear un archivo llamado db.js y copiar el siguiente c\u00f3digo</p> <pre><code>const { Pool } = require(\"pg\");\n\nconst config = {    \n    user: 'TU_USUARIO',\n    host: 'localhost',\n    database: 'node_ejemplo',\n    password: 'TU_CONTRASE\u00d1A',\n    port: 5432,\n};\n\nconst pool = new Pool(config);\n\nmodule.exports = {\n    query: (text, params) =&gt; pool.query(text, params),\n};\n</code></pre> </li> <li> <p>Instalar otras dependencias</p> <pre><code>npm i cors body-parser\n</code></pre> </li> <li> <p>Modificar el servidor para cargar el archivo de configuraci\u00f3n de la Bd y crear la ruta de la API. Modificar el archivo app.js y escribir lo siguiente</p> <pre><code>const express = require('express');\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst apiRoutes = require(\"./routes/api\");\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.raw());\napp.use(cors());\n\napp.get('/', (request, response) =&gt; {\n    response.json({ info: 'Node.js, Express, and Postgres API' })\n});\n\napp.use(\"/api/\", apiRoutes());\n\napp.listen(port, () =&gt; {\nconsole.log(`Example app listening at http://localhost:${port}`)\n});\n</code></pre> </li> <li> <p>Crear el router para procesar las peticiones. Crear una carpeta llamada routes dentro de la carpeta servidor. Dentro de la carpeta routes crear un archivo llamado api.js y escribir lo siguiente:</p> <pre><code>const Router = require(\"express\").Router;\n\nmodule.exports = () =&gt; {\n\n    const api = new Router();\n\n    api.get(\"/transformaciones\", async (req, res) =&gt; {\n\n        res.json({repuesta: `se debe retornar el listado de todas las transformaciones`});\n\n    })\n\n    api.get(\"/transformaciones/:id\", async (req, res) =&gt; {\n\n        const { id } = req.params;\n        res.json({repuesta: `se debe retornar la transformaci\u00f3n con id = ${id}`});\n\n    });\n\n    api.post(\"/transformaciones\", async (req, res) =&gt; {\n\n        console.log(req.body);\n        const { srs_origen, x_origen, y_origen } = req.body;\n\n        res.json({repuesta: `llamada post para insertar nuevas transformaciones con origen ${srs_origen} y coordenadas lat: ${y_origen}, lon: ${x_origen}`});\n\n    });\n\n    return api;\n\n};\n</code></pre> </li> <li> <p>Reiniciar el servidor de Node.js y luego volverlo a arrancarlo para que los cambios hechos tengan efecto</p> <p>Reiniciar el servidor <code>Ctrl+c</code>.</p> <pre><code>node app.js\n</code></pre> </li> <li> <p>Probar nuestra API. Para las peticiones GET podemos probarlas directamente desde nuestro navegador. Podemos escribir http://localhost:3000/api/transformaciones/24 o http://localhost:3000/api/transformaciones y debemos ver la respuesta correspondiente.</p> </li> <li> <p>Para probar la peticiones POST podemos abrir un navegador he ir a https://hoppscotch.io/ o https://www.apirequest.io/. En el selector seleccionar la opci\u00f3n de POST y en el campo para la URL poner http://localhost:3000/api/transformaciones. Luego agregar el header \"Content-Type\"=application/json y en el Request Body copiar </p> <pre><code>{\n    \"srs_origen\": \"4326\",\n    \"x_origen\": 2,\n    \"y_origen\": 41.5,\n    \"srs_destino\": \"3857\",\n    \"x_destino\": 222638.9815,\n    \"y_destino\": 5086373.6492\n}\n</code></pre> <p></p> </li> <li> <p>Crear las funciones que realizan las querys a nuestra base de datos. Crear una nueva carpeta llamada services dentro de la carpeta servidor. Dentro de la nueva carpeta crear un archivo llamado transformaciones.js y copiar lo siguiente dentro del archivo</p> <pre><code>const db = require(\"../db/db\");\n\nclass TransformacionesService {\n\n    static async getTransformaciones() {\n\n        const SQL = \"SELECT * FROM public.transformacion\";\n\n        const {rows} = await db.query(SQL);\n\n        return rows;\n\n    }\n\n    static async getTransformacionById(id) {\n\n        const SQL = \"SELECT * FROM public.transformacion WHERE id = $1\";\n\n        const {rows} = await db.query(SQL, [id]);\n\n        return rows;\n\n    }\n\n\n    static async createTransformacion(srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino) {\n\n        const SQL = \"INSERT INTO public.transformacion (srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *\";\n\n        const {rows} = await db.query(SQL, [srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino]);\n\n        return rows;\n\n    }\n\n}\n\nmodule.exports = TransformacionesService;\n</code></pre> </li> <li> <p>Conectar nuestra API con la base de datos. Modificar el archivo api.js </p> <pre><code>const Router = require(\"express\").Router;\n\nconst TransformacionesService = require(\"../services/transformaciones\");\n\nmodule.exports = () =&gt; {\n\n    const api = new Router();\n\n    api.get(\"/transformaciones\", async (req, res) =&gt; {\n\n        res.json(await TransformacionesService.getTransformaciones());\n\n    })\n\n    api.get(\"/transformaciones/:id\", async (req, res) =&gt; {\n\n        const { id } = req.params;\n        res.json(await TransformacionesService.getTransformacionById(id));\n\n    });\n\n    api.post(\"/transformaciones\", async (req, res) =&gt; {\n\n        const { srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino } = req.body;\n        res.json(await TransformacionesService.createTransformacion(srs_origen, x_origen, y_origen, srs_destino, x_destino, y_destino));\n\n    });\n\n    return api;\n\n};\n</code></pre> </li> <li> <p>Probar nuestra API. Parar y arrancar el servidor de Node.js y volver a hacer la llamada POST desde el navegador. Se deber\u00eda crear un nuevo registro en la base de datos. Para consultar el registro podemos abrir http://localhost:3000/api/transformaciones o http://localhost:3000/api/transformaciones/1</p> </li> </ol> <p>Note</p> <p>Este servidor es un demostrador de la funcionalidad b\u00e1sica de la implementaci\u00f3n de una API. En el mismo no se hace control de errores, ni validaci\u00f3n de valores de entrada, etc. NO es un servidor para producci\u00f3n</p>"},{"location":"js_servidor/#modificar-la-calculadora","title":"Modificar la calculadora","text":""},{"location":"js_servidor/#ejercicios-entregables","title":"Ejercicios entregables","text":"<p>Calculadora geod\u00e9sica</p> <ol> <li> <p>Modificar nuestra aplicaci\u00f3n para llamar a la API. Modificar nuestro archivo index.html que se encuentra en la carpeta web-mgeo y agregar un nuevo boton en el area de la respuesta. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"author\" content=\"[VUESTRO NOMBRE]\"&gt;\n    &lt;meta name=\"description\" content=\"Calculadora geod\u00e9sica que permite hacer la transformaci\u00f3n de coordenadas geogr\u00e1ficas en linea\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;link href=\"https://www.icgc.cat/bundles/microblauicgc/img/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\"&gt;\n    &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"&gt;\n    &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,700;1,400;1,700&amp;display=swap\" rel=\"stylesheet\"&gt;\n    &lt;link type=\"text/css\" href=\"css/estilos.css\" rel=\"stylesheet\"&gt;\n    &lt;title&gt;Mi calculadora geod\u00e9sica&lt;/title&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.6.3/proj4.min.js\" integrity=\"sha512-TzmbpBIqcR0TyAdg+zJJfpbTeKVj24n+U3vvlP3yBDTOs26ELhrzA+TacRmMAuflTY8tU3zVwbCyfvM3QH58lA==\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;img src=\"https://www.uab.cat/Imatge/635/883/logop.gif\" alt=\"UAB\"&gt;\n        &lt;h1&gt;Mi calculadora geod\u00e9sica&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;div&gt;\n            &lt;table&gt;\n                &lt;tr&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"origen\"&gt;Sistema de referencia de origen&lt;/label&gt;&lt;/th&gt;\n                    &lt;th colspan=\"2\"&gt;&lt;label for=\"destino\"&gt;Sistema de referencia de destino&lt;/label&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"origen\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;\n                        &lt;select id=\"destino\"&gt;\n                            &lt;option value=\"EPSG:4326\"&gt;EPSG:4326&lt;/option&gt; \n                            &lt;option value=\"EPSG:3857\"&gt;EPSG:3857&lt;/option&gt;\n                            &lt;option value=\"EPSG:25831\"&gt;EPSG:25831&lt;/option&gt;\n                            &lt;option value=\"EPSG:23031\"&gt;EPSG:23031&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;label for=\"lat\"&gt;Latitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;label for=\"lng\"&gt;Longitud&lt;/label&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lat\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;input type=\"text\" id=\"lng\"&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;div id=\"respuesta\"&gt;&lt;/div&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;button class=\"btn-tranformar\"&gt;Transformar coordenadas&lt;/button&gt;&lt;/td&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;button class=\"btn-guardar\"&gt;Guardar transformaci\u00f3n&lt;/button&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;aside&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;a href=\"https://epsg.io/4326\" title=\"WGS 84 -- WGS84 - World Geodetic System 1984, used in GPS\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;EPSG:4326&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;EPSG:3857&lt;/li&gt;\n                &lt;li&gt;EPSG:25831&lt;/li&gt;\n                &lt;li&gt;EPSG:23031&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/aside&gt;\n    &lt;/main&gt;\n    &lt;footer&gt;\u00a9Copyright 2020 de nadie. Ning\u00fan derecho reservado.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Modificar el archivo script.js para hacer la llamada POST a nuestra API.</p> <pre><code>proj4.defs(\"EPSG:25831\",\"+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\nconst btnTransformar = document.querySelector(\".btn-tranformar\");\n\nbtnTransformar.addEventListener(\"click\", (evt) =&gt; {\n    console.log(\"Transformar coordenadas\");\n    const srs_origen = document.getElementById(\"origen\").value;\n    const coordTransformada = transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:3857\");\n    document.getElementById(\"respuesta\").innerHTML = coordTransformada;\n});\n\nconst transformarCoordenadas = (lat, lon, epsg_in, epsg_out) =&gt; {\n\n    const coordTransformada = proj4(epsg_in, epsg_out, [lon, lat])\n\n    return coordTransformada;\n\n}\n\nconst btnGuardar = document.querySelector(\".btn-guardar\");\nbtnGuardar.addEventListener(\"click\", async (evt) =&gt; {\n    console.log(\"Guardar coordenadas\");\n    const srs_origen = document.getElementById(\"origen\").value;\n    const coordTransformada = transformarCoordenadas(41.5, 2, srs_origen, \"EPSG:3857\");\n\n    const codi_epsg_origen = srs_origen.replace(\"EPSG:\",\"\");\n    const response = await fetch(\"http://localhost:3000/api/transformaciones/\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            srs_origen: codi_epsg_origen,\n            x_origen: 2,\n            y_origen: 41.5,\n            srs_destino: \"3857\",\n            x_destino: coordTransformada[0],\n            y_destino: coordTransformada[1]\n        }),\n        cache: 'no-cache'\n    });\n\n    const data = await response.json();\n\n    console.log(data);\n});\n</code></pre> </li> </ol> <p>Ejercicio 2 pt</p> <ol> <li>Agregar a la calculadora un bot\u00f3n para recuperar todas las transformaciones que est\u00e1n en la base de datos y agregar un elemento para mostrar los registros de la base de datos. 0.5 pt</li> <li>Agregar un campo donde el usuarios pueda poner un id y recuperar el registro de la base de datos con dicho id. Agregar un elemento para mostrar el registro obtenido. 0.25 pt </li> <li>Implementar algunas mejoras a la calculadora, ya sean tanto de estilo, como de funcionalidad 1.25 pt</li> </ol> <p>El resultado debe ser algo como esto </p>"},{"location":"js_servidor/#referencias","title":"Referencias","text":"<ol> <li> <p>https://nodejs.org/ \u21a9</p> </li> <li> <p>https://expressjs.com/es/ \u21a9</p> </li> <li> <p>https://blog.logrocket.com/nodejs-expressjs-postgresql-crud-rest-api-example/ \u21a9</p> </li> </ol>"}]}